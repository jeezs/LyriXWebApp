Opal.modules["fileutils"] = Opal.return_val(Opal.nil); /* Generated by Opal 1.8.2 */

Opal.modules["corelib/random/formatter"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $module = Opal.module, $def = Opal.def, $range = Opal.range, $send = Opal.send, $rb_divide = Opal.rb_divide, $Kernel = Opal.Kernel, $Opal = Opal.Opal, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('_verify_count,bytes,encode,strict_encode64,random_bytes,urlsafe_encode64,split,hex,[]=,[],map,to_proc,join,times,<<,|,ord,/,abs,random_float,raise,coerce_to!,flatten,new,random_number,length,include,extend');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Random');

    var $nesting = [self].concat($parent_nesting);

    
    (function($base, $parent_nesting) {
      var self = $module($base, 'Formatter');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      
      $def(self, '$hex', function $$hex(count) {
        var self = this;

        
        if (count == null) count = nil;
        count = $$$('Random').$_verify_count(count);
        
        var bytes = self.$bytes(count);
        var out = "";
        for (var i = 0; i < count; i++) {
          out += bytes.charCodeAt(i).toString(16).padStart(2, '0');
        }
        return (out).$encode("US-ASCII");
      ;
      }, {$$arity: -1, $$source_location: ['<internal:corelib/random/formatter.rb>', 5]});
      
      $def(self, '$random_bytes', function $$random_bytes(count) {
        var self = this;

        
        if (count == null) count = nil;
        return self.$bytes(count);
      }, {$$arity: -1, $$source_location: ['<internal:corelib/random/formatter.rb>', 17]});
      
      $def(self, '$base64', function $$base64(count) {
        var self = this;

        
        if (count == null) count = nil;
        return $$$('Base64').$strict_encode64(self.$random_bytes(count)).$encode("US-ASCII");
      }, {$$arity: -1, $$source_location: ['<internal:corelib/random/formatter.rb>', 21]});
      
      $def(self, '$urlsafe_base64', function $$urlsafe_base64(count, padding) {
        var self = this;

        
        if (count == null) count = nil;
        if (padding == null) padding = false;
        return $$$('Base64').$urlsafe_encode64(self.$random_bytes(count), padding).$encode("US-ASCII");
      }, {$$arity: -1, $$source_location: ['<internal:corelib/random/formatter.rb>', 25]});
      
      $def(self, '$uuid', function $$uuid() {
        var self = this, str = nil;

        
        str = self.$hex(16).$split("");
        str['$[]='](12, "4");
        str['$[]='](16, (parseInt(str['$[]'](16), 16) & 3 | 8).toString(16));
        str = [str['$[]']($range(0, 8, true)), str['$[]']($range(8, 12, true)), str['$[]']($range(12, 16, true)), str['$[]']($range(16, 20, true)), str['$[]']($range(20, 32, true))];
        str = $send(str, 'map', [], "join".$to_proc());
        return str.$join("-");
      }, {$$source_location: ['<internal:corelib/random/formatter.rb>', 29]});
      
      $def(self, '$random_float', function $$random_float() {
        var self = this, bs = nil, num = nil;

        
        bs = self.$bytes(4);
        num = 0;
        $send((4), 'times', [], function $$1(i){
          
          if (i == null) i = nil;
          num = num['$<<'](8);
          return (num = num['$|'](bs['$[]'](i).$ord()));}, {$$source_location: ['<internal:corelib/random/formatter.rb>', 44]});
        return $rb_divide(num.$abs(), 2147483647);
      }, {$$source_location: ['<internal:corelib/random/formatter.rb>', 41]});
      
      $def(self, '$random_number', function $$random_number(limit) {
        var self = this;

        
        ;
        
        function randomFloat() {
          return self.$random_float();
        }

        function randomInt(max) {
          return Math.floor(randomFloat() * max);
        }

        function randomRange() {
          var min = limit.begin,
              max = limit.end;

          if (min === nil || max === nil) {
            return nil;
          }

          var length = max - min;

          if (length < 0) {
            return nil;
          }

          if (length === 0) {
            return min;
          }

          if (max % 1 === 0 && min % 1 === 0 && !limit.excl) {
            length++;
          }

          return randomInt(length) + min;
        }

        if (limit == null) {
          return randomFloat();
        } else if (limit.$$is_range) {
          return randomRange();
        } else if (limit.$$is_number) {
          if (limit <= 0) {
            $Kernel.$raise($$$('ArgumentError'), "invalid argument - " + (limit))
          }

          if (limit % 1 === 0) {
            // integer
            return randomInt(limit);
          } else {
            return randomFloat() * limit;
          }
        } else {
          limit = $Opal['$coerce_to!'](limit, $$$('Integer'), "to_int");

          if (limit <= 0) {
            $Kernel.$raise($$$('ArgumentError'), "invalid argument - " + (limit))
          }

          return randomInt(limit);
        }
      ;
      }, {$$arity: -1, $$source_location: ['<internal:corelib/random/formatter.rb>', 51]});
      return $def(self, '$alphanumeric', function $$alphanumeric(count) {
        var self = this, map = nil;

        
        if (count == null) count = nil;
        count = $$('Random').$_verify_count(count);
        map = $send([$range("0", "9", false), $range("a", "z", false), $range("A", "Z", false)], 'map', [], "to_a".$to_proc()).$flatten();
        return $send($$$('Array'), 'new', [count], function $$2(i){var self = $$2.$$s == null ? this : $$2.$$s;

          
          if (i == null) i = nil;
          return map['$[]'](self.$random_number(map.$length()));}, {$$s: self, $$source_location: ['<internal:corelib/random/formatter.rb>', 116]}).$join();
      }, {$$arity: -1, $$source_location: ['<internal:corelib/random/formatter.rb>', 113]});
    })(self, $nesting);
    self.$include($$$($$$('Random'), 'Formatter'));
    return self.$extend($$$($$$('Random'), 'Formatter'));
  })('::', null, $nesting)
};

Opal.modules["securerandom"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $module = Opal.module, $defs = Opal.defs, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('require,extend,warn,rand,gen_random,_verify_count,encode');
  
  self.$require("corelib/random/formatter");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'SecureRandom');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    self.$extend($$$($$('Random'), 'Formatter'));
    
    var gen_random_bytes;

    if ((Opal.global.crypto   && Opal.global.crypto.getRandomValues) ||
        (Opal.global.msCrypto && Opal.global.msCrypto.getRandomValues)) {
      // This method is available in all non-ancient web browsers.

      var crypto = Opal.global.crypto || Opal.global.msCrypto;
      gen_random_bytes = function(count) {
        var storage = new Uint8Array(count);
        crypto.getRandomValues(storage);
        return storage;
      };
    }
    else if (Opal.global.crypto && Opal.global.crypto.randomBytes) {
      // This method is available in Node.js

      gen_random_bytes = function(count) {
        return Opal.global.crypto.randomBytes(count);
      };
    }
    else {
      // Let's dangerously polyfill this interface with our MersenneTwister
      // xor native JS Math.random xor something about current time...
      // That's hardly secure, but the following warning should provide a person
      // deploying the code a good idea on what he should do to make his deployment
      // actually secure.
      // It's possible to interface other libraries by adding an else if above if
      // that's really desired.

      self.$warn("Can't get a Crypto.getRandomValues interface or Crypto.randomBytes." + "The random values generated with SecureRandom won't be " + "cryptographically secure")

      gen_random_bytes = function(count) {
        var storage = new Uint8Array(count);
        for (var i = 0; i < count; i++) {
          storage[i] = self.$rand(255) ^ Math.floor(Math.random() * 256);
          storage[i] ^= +(new Date())>>self.$rand(255)&0xff;
        }
        return storage;
      }
    }
  ;
    $defs(self, '$bytes', function $$bytes(bytes) {
      var self = this;

      
      if (bytes == null) bytes = nil;
      return self.$gen_random(bytes);
    }, {$$arity: -1, $$source_location: ['./securerandom.rb', 53]});
    return $defs(self, '$gen_random', function $$gen_random(count) {
      var out = nil;

      
      if (count == null) count = nil;
      count = $$('Random').$_verify_count(count);
      out = "";
      
      var bytes = gen_random_bytes(count);
      for (var i = 0; i < count; i++) {
        out += String.fromCharCode(bytes[i]);
      }
    ;
      return out.$encode("ASCII-8BIT");
    }, {$$arity: -1, $$source_location: ['./securerandom.rb', 57]});
  })($nesting[0], $nesting);
};

Opal.modules["atome/version"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $const_set = Opal.const_set, $nesting = [], nil = Opal.nil;

  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Atome');

    var $nesting = [self].concat($parent_nesting);

    return $const_set($nesting[0], 'VERSION', "0.5.7.8.4")
  })($nesting[0], null, $nesting)
};

Opal.modules["atome/genesis/genesis"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $send = Opal.send, $def = Opal.def, $truthy = Opal.truthy, $hash_rehash = Opal.hash_rehash, $eqeq = Opal.eqeq, $not = Opal.not, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('define_method,particle_creation,to_proc,[],nil?,add_to_particle_list,auto_render_generator,new_particle,additional_particle_methods,add_to_atome_list,atome_method_for_object,default_params,new_default_params,new_atome,new_molecule,each,renderer_list,build_render,is_a?,instance_exec,add_sanitizer_method,to_sym,add_optional_method,[]=,write_auth,==,particle_sanitizer,create_particle,!,include?,collect,send,grab,read_auth,instance_variable_get,particle_read,atome_sanitizer,atome_processor,applicable_atomes,type,<<,fasten,atomes,affect,new');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Genesis');

    var $nesting = [self].concat($parent_nesting);

    return (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      
      $def(self, '$create_particle', function $$create_particle(element, store, render) {
        var $yield = $$create_particle.$$p || nil, self = this;

        $$create_particle.$$p = null;
        return $send($$('Atome'), 'define_method', ["set_" + (element)], function $$1(params){var user_proc = $$1.$$p || nil, self = $$1.$$s == null ? this : $$1.$$s;

          $$1.$$p = null;
          
          ;
          if (params == null) params = nil;
          return $send(self, 'particle_creation', [element, params, store, render], user_proc.$to_proc());}, {$$s: self, $$source_location: ['atome/genesis/genesis.rb', 8]})
      }, {$$source_location: ['atome/genesis/genesis.rb', 7]});
      
      $def(self, '$build_particle', function $$build_particle(particle_name, options) {
        var particle_proc = $$build_particle.$$p || nil, self = this, type = nil, category = nil, store = nil, render = nil;

        $$build_particle.$$p = null;
        
        ;
        if (options == null) options = (new Map());
        type = options['$[]']("type");
        category = options['$[]']("category");
        if ($truthy(options['$[]']("type")['$nil?']())) {
          type = "string"
        };
        store = options['$[]']("store");
        if ($truthy(options['$[]']("store")['$nil?']())) {
          store = true
        };
        render = options['$[]']("render");
        if ($truthy(options['$[]']("render")['$nil?']())) {
          render = true
        };
        $$('Universe').$add_to_particle_list(particle_name, type, category);
        if ($truthy(render)) {
          self.$auto_render_generator(particle_name)
        };
        $send(self, 'new_particle', [particle_name, store, render], particle_proc.$to_proc());
        return $send(self, 'additional_particle_methods', [particle_name, store, render], particle_proc.$to_proc());
      }, {$$arity: -2, $$source_location: ['atome/genesis/genesis.rb', 13]});
      
      $def(self, '$build_atome', function $$build_atome(atome_name) {
        var atome_proc = $$build_atome.$$p || nil, self = this;

        $$build_atome.$$p = null;
        
        ;
        $$('Universe').$add_to_atome_list(atome_name);
        self.$atome_method_for_object(atome_name);
        if (!$truthy($$('Essentials').$default_params()['$[]'](atome_name))) {
          $$('Essentials').$new_default_params($hash_rehash(new Map([[atome_name, (new Map([["type", atome_name]]))]])))
        };
        self.$auto_render_generator(atome_name);
        return $send(self, 'new_atome', [atome_name], atome_proc.$to_proc());
      }, {$$source_location: ['atome/genesis/genesis.rb', 31]});
      
      $def(self, '$build_molecule', function $$build_molecule(molecule_name) {
        var molecule_proc = $$build_molecule.$$p || nil, self = this;

        $$build_molecule.$$p = null;
        
        ;
        return $send(self, 'new_molecule', [molecule_name], molecule_proc.$to_proc());
      }, {$$source_location: ['atome/genesis/genesis.rb', 50]});
      
      $def(self, '$auto_render_generator', function $$auto_render_generator(element) {
        var self = this;

        return $send($$('Universe').$renderer_list(), 'each', [], function $$2(render_engine){var self = $$2.$$s == null ? this : $$2.$$s;

          
          if (render_engine == null) render_engine = nil;
          return self.$build_render("" + (render_engine) + "_" + (element));}, {$$s: self, $$source_location: ['atome/genesis/genesis.rb', 55]})
      }, {$$source_location: ['atome/genesis/genesis.rb', 54]});
      
      $def(self, '$build_render', function $$build_render(renderer_name) {
        var method_proc = $$build_render.$$p || nil, self = this;

        $$build_render.$$p = null;
        
        ;
        return $send($$('Atome'), 'define_method', [renderer_name], function $$3(params){var user_proc = $$3.$$p || nil, self = $$3.$$s == null ? this : $$3.$$s;

          $$3.$$p = null;
          
          ;
          if (params == null) params = nil;
          if ($truthy(method_proc['$is_a?']($$('Proc')))) {
            return $send(self, 'instance_exec', [params, user_proc], method_proc.$to_proc())
          } else {
            return nil
          };}, {$$arity: -1, $$s: self, $$source_location: ['atome/genesis/genesis.rb', 61]});
      }, {$$source_location: ['atome/genesis/genesis.rb', 60]});
      
      $def(self, '$build_sanitizer', function $$build_sanitizer(method_name) {
        var method_proc = $$build_sanitizer.$$p || nil;

        $$build_sanitizer.$$p = null;
        
        ;
        return $send($$('Universe'), 'add_sanitizer_method', [method_name.$to_sym()], method_proc.$to_proc());
      }, {$$source_location: ['atome/genesis/genesis.rb', 66]});
      
      $def(self, '$build_option', function $$build_option(method_name, method_proc) {
        
        return $$('Universe').$add_optional_method(method_name.$to_sym(), method_proc)
      }, {$$source_location: ['atome/genesis/genesis.rb', 70]});
      
      $def(self, '$new_particle', function $$new_particle(element, store, render) {
        var _method_proc = $$new_particle.$$p || nil, self = this;

        $$new_particle.$$p = null;
        
        ;
        return $send($$('Atome'), 'define_method', [element], function $$4(params){var user_proc = $$4.$$p || nil, self = $$4.$$s == null ? this : $$4.$$s, $ret_or_1 = nil, computed_params = nil, value_found = nil;
          if (self.history == null) self.history = nil;
          if (self.type == null) self.type = nil;

          $$4.$$p = null;
          
          ;
          if (params == null) params = nil;
          if ($truthy(($ret_or_1 = self.history['$[]'](element)))) {
            $ret_or_1
          } else {
            self.history['$[]='](element, [])
          };
          if ((($truthy(params) || ($eqeq(params, false))) && ($truthy(self.$write_auth(element))))) {
            
            params = $send(self, 'particle_sanitizer', [element, params], user_proc.$to_proc());
            $$('Genesis').$create_particle(element, store, render);
            if (($eqeq(self.type, "group") && ($not(["type", "id", "collect", "layout"]['$include?'](element))))) {
              $send(self.$collect(), 'each', [], function $$5(collected_found){var $a, self = $$5.$$s == null ? this : $$5.$$s;

                
                if (collected_found == null) collected_found = nil;
                return ($a = self.$grab(collected_found), ($a === nil || $a == null) ? nil : $send($a, 'send', [element, params], user_proc.$to_proc()));}, {$$s: self, $$source_location: ['atome/genesis/genesis.rb', 86]})
            };
            computed_params = $send(self, 'send', ["set_" + (element), params], user_proc.$to_proc());
            return computed_params;
          } else if (($truthy(params) || ($eqeq(params, false)))) {
            return "send a valid password to write " + (element) + " value"
          } else if ($truthy(self.$read_auth(element))) {
            
            value_found = self.$instance_variable_get("@" + (element));
            value_found = $send(self, 'particle_read', [element, value_found], user_proc.$to_proc());
            return value_found;
          } else {
            return "send a valid password to read " + (element) + " value"
          };}, {$$arity: -1, $$s: self, $$source_location: ['atome/genesis/genesis.rb', 76]});
      }, {$$source_location: ['atome/genesis/genesis.rb', 74]});
      
      $def(self, '$additional_particle_methods', function $$additional_particle_methods(element, store, rendering) {
        var method_proc = $$additional_particle_methods.$$p || nil, self = this;

        $$additional_particle_methods.$$p = null;
        
        ;
        return $send($$('Atome'), 'define_method', ["" + (element) + "="], function $$6(params){var user_proc = $$6.$$p || nil, self = $$6.$$s == null ? this : $$6.$$s;

          $$6.$$p = null;
          
          ;
          if (params == null) params = nil;
          if ($truthy(method_proc['$is_a?']($$('Proc')))) {
            $send(self, 'instance_exec', [params, user_proc], method_proc.$to_proc())
          };
          params = self.$particle_sanitizer(element, params);
          return $send(self, 'particle_creation', [element, params, store, rendering], user_proc.$to_proc());}, {$$arity: -1, $$s: self, $$source_location: ['atome/genesis/genesis.rb', 111]});
      }, {$$source_location: ['atome/genesis/genesis.rb', 109]});
      
      $def(self, '$new_atome', function $$new_atome(element) {
        var method_proc = $$new_atome.$$p || nil, self = this;

        $$new_atome.$$p = null;
        
        ;
        $send($$('Atome'), 'define_method', [element], function $$7(params){var user_proc = $$7.$$p || nil, self = $$7.$$s == null ? this : $$7.$$s, collected_atomes = nil;
          if (self.apply == null) self.apply = nil;

          $$7.$$p = null;
          
          ;
          if (params == null) params = nil;
          if ($truthy(method_proc['$is_a?']($$('Proc')))) {
            $send(self, 'instance_exec', [params, user_proc], method_proc.$to_proc())
          };
          if ($truthy(params)) {
            
            params = $send(self, 'atome_sanitizer', [element, params], user_proc.$to_proc());
            return $send(self, 'atome_processor', [element, params], user_proc.$to_proc());
          } else {
            
            collected_atomes = [];
            if ($truthy($$('Universe').$applicable_atomes()['$include?'](element))) {
              $send(self.apply, 'each', [], function $$8(fasten_atome){var self = $$8.$$s == null ? this : $$8.$$s;

                
                if (fasten_atome == null) fasten_atome = nil;
                if ($eqeq(self.$grab(fasten_atome).$type().$to_sym(), element.$to_sym())) {
                  return collected_atomes['$<<'](fasten_atome)
                } else {
                  return nil
                };}, {$$s: self, $$source_location: ['atome/genesis/genesis.rb', 133]})
            } else if ($truthy(self.$fasten())) {
              $send(self.$fasten(), 'each', [], function $$9(fasten_atome){var self = $$9.$$s == null ? this : $$9.$$s, child_found = nil;

                
                if (fasten_atome == null) fasten_atome = nil;
                child_found = self.$grab(fasten_atome);
                if ($eqeq(child_found.$type().$to_sym(), element.$to_sym())) {
                  return collected_atomes['$<<'](fasten_atome)
                } else {
                  return nil
                };}, {$$s: self, $$source_location: ['atome/genesis/genesis.rb', 137]})
            };
            return collected_atomes;
          };}, {$$arity: -1, $$s: self, $$source_location: ['atome/genesis/genesis.rb', 121]});
        return $send($$('Atome'), 'define_method', ["set_" + (element)], function $$10(params){var user_proc = $$10.$$p || nil, self = $$10.$$s == null ? this : $$10.$$s, previous_atome = nil;

          $$10.$$p = null;
          
          ;
          if (params == null) params = nil;
          if ($truthy($$('Universe').$atomes()['$[]'](params['$[]']("id")))) {
            
            previous_atome = self.$grab(params['$[]']("id"));
            previous_atome.$affect(params['$[]']("affect"));
            return previous_atome;
          } else {
            return $send($$('Atome'), 'new', [params], user_proc.$to_proc())
          };}, {$$s: self, $$source_location: ['atome/genesis/genesis.rb', 148]});
      }, {$$source_location: ['atome/genesis/genesis.rb', 118]});
      return $def(self, '$new_molecule', function $$new_molecule(molecule) {
        var method_proc = $$new_molecule.$$p || nil, self = this;

        $$new_molecule.$$p = null;
        
        ;
        return $send($$('Molecule'), 'define_method', [molecule], function $$11(params){var user_proc = $$11.$$p || nil, self = $$11.$$s == null ? this : $$11.$$s, object_to_return = nil;

          $$11.$$p = null;
          
          ;
          if (params == null) params = nil;
          if ($truthy(method_proc['$is_a?']($$('Proc')))) {
            object_to_return = $send(self, 'instance_exec', [params, user_proc], method_proc.$to_proc())
          };
          return object_to_return;}, {$$s: self, $$source_location: ['atome/genesis/genesis.rb', 171]});
      }, {$$source_location: ['atome/genesis/genesis.rb', 170]});
    })(Opal.get_singleton_class(self), $nesting)
  })($nesting[0], null, $nesting)
};

Opal.modules["atome/kernel/black_matter"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $def = Opal.def, $assign_ivar = Opal.assign_ivar, $return_ivar = Opal.return_ivar, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('to_s,sha256,global,encode,==');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Black_matter');

    var $nesting = [self].concat($parent_nesting);

    return (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      
      $def(self, '$encode', function $$encode(string) {
        
        
        string = string.$to_s();
        return $$('JS').$global().$sha256(string.$to_s());
      }, {$$source_location: ['atome/kernel/black_matter.rb', 4]});
      
      $def(self, '$check_password', function $$check_password(input_password, stored_hash) {
        var self = this, input_hash = nil;

        
        input_hash = self.$encode(input_password);
        return input_hash['$=='](stored_hash);
      }, {$$source_location: ['atome/kernel/black_matter.rb', 9]});
      
      $def(self, '$set_password', $assign_ivar("password"), {$$source_location: ['atome/kernel/black_matter.rb', 14]});
      return $def(self, '$password', $return_ivar("password"), {$$source_location: ['atome/kernel/black_matter.rb', 18]});
    })(Opal.get_singleton_class(self), $nesting)
  })($nesting[0], null, $nesting)
};

Opal.modules["atome/kernel/universe"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $return_ivar = Opal.return_ivar, $def = Opal.def, $send = Opal.send, $slice = Opal.slice, $hash_rehash = Opal.hash_rehash, $rb_plus = Opal.rb_plus, $truthy = Opal.truthy, $eqeqeq = Opal.eqeqeq, $eqeq = Opal.eqeq, $assign_ivar = Opal.assign_ivar, $neqeq = Opal.neqeq, $return_val = Opal.return_val, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('attr_reader,attr_accessor,[]=,[],delete,to_sym,merge!,push,+,each_value,tag,<<,id,each,gsub,uuid,strftime,now,generate_uuid,===,=~,last_match,downcase,==,to_s,global,include?,platform_type,current_machine_decision,!=,internet,html,grab,encode,password,connected,puts,sync,%,merge,setItem,length');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Universe');

    var $nesting = [self].concat($parent_nesting);

    
    self.counter = 0;
    self.atomes = (new Map());
    self.atomes_ids = (new Map());
    self.atome_list = [];
    self.molecule_list = [];
    self.particle_list = (new Map());
    self.renderer_list = ["html", "browser", "headless", "server", "log"];
    self.sanitizers = (new Map());
    self.specificities = (new Map());
    self.messages = (new Map());
    self.increment = 0;
    self.categories = ["atome", "communication", "effect", "event", "geometry", "hierarchy", "identity", "material", "property", "security", "spatial", "time", "utility"];
    self.history = (new Map());
    self.users = (new Map());
    self.help = (new Map());
    self.example = (new Map());
    self.allow_localstorage = false;
    self.allow_sync = false;
    self.connected = false;
    self.database_ready = false;
    self.tools_root = [];
    self.tools = (new Map());
    self.allow_tool_operations = false;
    self.active_tools = [];
    self.preset_list = [];
    self.translation = (new Map());
    self.default_selection_style = (new Map([["border", (new Map([["thickness", 1], ["red", 1], ["green", 0], ["blue", 0], ["alpha", 1], ["pattern", "dotted"]]))]]));
    self.applicable_atomes = ["color", "shadow", "border", "paint", "animation"];
    return (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      self.$attr_reader("atomes", "atomes_ids", "renderer_list", "molecule_list", "atome_list", "particle_list", "classes", "counter", "atomes_specificities");
      self.$attr_accessor("connected", "allow_sync", "allow_localstorage", "database_ready", "edit_mode", "tools", "tools_root", "allow_tool_operations", "active_tools", "preset_list", "applicable_atomes", "default_selection_style", "translation", "language", "history_position");
      
      $def(self, '$messages', $return_ivar("messages"), {$$source_location: ['atome/kernel/universe.rb', 43]});
      
      $def(self, '$store_messages', function $$store_messages(new_msg) {
        var $a, self = this;
        if (self.messages == null) self.messages = nil;

        return ($a = [new_msg['$[]']("msg_nb"), new_msg['$[]']("proc")], $send(self.messages, '[]=', $a), $a[$a.length - 1])
      }, {$$source_location: ['atome/kernel/universe.rb', 47]});
      
      $def(self, '$delete_messages', function $$delete_messages(msg_to_del) {
        var self = this;
        if (self.messages == null) self.messages = nil;

        return self.messages.$delete(msg_to_del)
      }, {$$source_location: ['atome/kernel/universe.rb', 51]});
      
      $def(self, '$set_help', function $$set_help(particle) {
        var doc = $$set_help.$$p || nil, $a, self = this;
        if (self.help == null) self.help = nil;

        $$set_help.$$p = null;
        
        ;
        return ($a = [particle, doc], $send(self.help, '[]=', $a), $a[$a.length - 1]);
      }, {$$source_location: ['atome/kernel/universe.rb', 55]});
      
      $def(self, '$get_help', function $$get_help(particle) {
        var self = this;
        if (self.help == null) self.help = nil;

        return self.help['$[]'](particle)
      }, {$$source_location: ['atome/kernel/universe.rb', 59]});
      
      $def(self, '$set_example', function $$set_example(particle) {
        var example = $$set_example.$$p || nil, $a, self = this;
        if (self.example == null) self.example = nil;

        $$set_example.$$p = null;
        
        ;
        return ($a = [particle, example], $send(self.example, '[]=', $a), $a[$a.length - 1]);
      }, {$$source_location: ['atome/kernel/universe.rb', 63]});
      
      $def(self, '$get_example', function $$get_example(particle) {
        var self = this;
        if (self.example == null) self.example = nil;

        return self.example['$[]'](particle)
      }, {$$source_location: ['atome/kernel/universe.rb', 67]});
      
      $def(self, '$categories', $return_ivar("categories"), {$$source_location: ['atome/kernel/universe.rb', 71]});
      
      $def(self, '$add_to_particle_list', function $$add_to_particle_list($a, $b, $c) {
        var $post_args, particle, type, category, $d, self = this;
        if (self.particle_list == null) self.particle_list = nil;

        
        $post_args = $slice(arguments);
        
        if ($post_args.length > 2) particle = $post_args.shift();if (particle == null) particle = nil;
        
        type = $post_args.shift();if (type == null) type = nil;
        
        category = $post_args.shift();if (category == null) category = nil;
        return ($d = [particle, (new Map([["type", type], ["category", category]]))], $send(self.particle_list, '[]=', $d), $d[$d.length - 1]);
      }, {$$arity: -3, $$source_location: ['atome/kernel/universe.rb', 75]});
      
      $def(self, '$add_atomes_specificities', function $$add_atomes_specificities(atome_type_to_add) {
        var $a, self = this;
        if (self.specificities == null) self.specificities = nil;

        return ($a = [atome_type_to_add, (new Map())], $send(self.specificities, '[]=', $a), $a[$a.length - 1])
      }, {$$source_location: ['atome/kernel/universe.rb', 80]});
      
      $def(self, '$set_atomes_specificities', function $$set_atomes_specificities(params) {
        var $a, self = this, particle_found = nil, specificity = nil;
        if (self.specificities == null) self.specificities = nil;

        
        particle_found = params['$[]']("method").$to_sym();
        specificity = (("" + (params['$[]']("specific"))) + "_").$to_sym();
        return ($a = [particle_found, specificity], $send(self.specificities['$[]'](params['$[]']("specific")), '[]=', $a), $a[$a.length - 1]);
      }, {$$source_location: ['atome/kernel/universe.rb', 84]});
      
      $def(self, '$get_atomes_specificities', $return_ivar("specificities"), {$$source_location: ['atome/kernel/universe.rb', 90]});
      
      $def(self, '$add_sanitizer_method', function $$add_sanitizer_method(method_name) {
        var method_proc = $$add_sanitizer_method.$$p || nil, self = this;
        if (self.sanitizers == null) self.sanitizers = nil;

        $$add_sanitizer_method.$$p = null;
        
        ;
        return self.sanitizers['$merge!']($hash_rehash(new Map([[method_name, method_proc]])));
      }, {$$source_location: ['atome/kernel/universe.rb', 94]});
      
      $def(self, '$get_sanitizer_method', function $$get_sanitizer_method(method_name) {
        var self = this;
        if (self.sanitizers == null) self.sanitizers = nil;

        return self.sanitizers['$[]'](method_name)
      }, {$$source_location: ['atome/kernel/universe.rb', 99]});
      
      $def(self, '$add_to_atome_list', function $$add_to_atome_list(atome) {
        var self = this;
        if (self.atome_list == null) self.atome_list = nil;

        return self.atome_list.$push(atome)
      }, {$$source_location: ['atome/kernel/universe.rb', 104]});
      
      $def(self, '$add_to_molecule_list', function $$add_to_molecule_list(molecule) {
        var self = this;
        if (self.molecule_list == null) self.molecule_list = nil;

        return self.molecule_list.$push(molecule)
      }, {$$source_location: ['atome/kernel/universe.rb', 108]});
      
      $def(self, '$add_to_atomes', function $$add_to_atomes(aid, atome) {
        var self = this;
        if (self.atomes == null) self.atomes = nil;
        if (self.counter == null) self.counter = nil;

        
        self.atomes['$[]='](aid, atome);
        return (self.counter = $rb_plus(self.counter, 1));
      }, {$$source_location: ['atome/kernel/universe.rb', 112]});
      
      $def(self, '$id_to_aid', function $$id_to_aid(id, aid) {
        var $a, self = this;
        if (self.atomes_ids == null) self.atomes_ids = nil;

        return ($a = [id, aid], $send(self.atomes_ids, '[]=', $a), $a[$a.length - 1])
      }, {$$source_location: ['atome/kernel/universe.rb', 117]});
      
      $def(self, '$user_atomes', function $$user_atomes() {
        var self = this, collected_id = nil;
        if (self.atomes == null) self.atomes = nil;

        
        collected_id = [];
        $send(self.atomes, 'each_value', [], function $$1(atome_found){
          
          if (atome_found == null) atome_found = nil;
          if (($truthy(atome_found.$tag()) && ($truthy(atome_found.$tag()['$[]']("system"))))) {
            return nil
          } else {
            return collected_id['$<<'](atome_found.$id())
          };}, {$$source_location: ['atome/kernel/universe.rb', 123]});
        return collected_id;
      }, {$$source_location: ['atome/kernel/universe.rb', 121]});
      
      $def(self, '$system_atomes', function $$system_atomes() {
        var self = this, collected_id = nil;
        if (self.atomes == null) self.atomes = nil;

        
        collected_id = [];
        $send(self.atomes, 'each', [], function $$2(id_found, atome_found){
          
          if (id_found == null) id_found = nil;
          if (atome_found == null) atome_found = nil;
          if (($truthy(atome_found.$tag()) && ($truthy(atome_found.$tag()['$[]']("system"))))) {
            return collected_id['$<<'](id_found)
          } else {
            return nil
          };}, {$$source_location: ['atome/kernel/universe.rb', 131]});
        return collected_id;
      }, {$$source_location: ['atome/kernel/universe.rb', 129]});
      
      $def(self, '$generate_uuid', function $$generate_uuid() {
        var uuid = nil, formatted_time = nil;

        
        uuid = $$('SecureRandom').$uuid().$gsub("-", "");
        formatted_time = $$('Time').$now().$strftime("%Y%m%d%H%M%S");
        return "" + (uuid) + (formatted_time);
      }, {$$source_location: ['atome/kernel/universe.rb', 137]});
      
      $def(self, '$app_identity', function $$app_identity() {
        var self = this;

        return (self.app_identity = self.$generate_uuid())
      }, {$$source_location: ['atome/kernel/universe.rb', 143]});
      
      $def(self, '$delete', function $delete$3(id) {
        var self = this;
        if (self.atomes == null) self.atomes = nil;

        return self.atomes.$delete(id)
      }, {$$source_location: ['atome/kernel/universe.rb', 152]});
      
      $def(self, '$current_machine_decision', function $$current_machine_decision(platform, output) {
        var $ret_or_1 = nil;

        
        if ($eqeqeq(/darwin/, ($ret_or_1 = platform))) {
          if ($truthy(output['$=~'](/en1.*?(([A-F0-9]{2}:){5}[A-F0-9]{2})/im))) {
            $$$('Regexp').$last_match(1)
          }
        } else if ($eqeqeq(/win32/, $ret_or_1)) {
          if ($truthy(output['$=~'](/Physical Address.*?(([A-F0-9]{2}-){5}[A-F0-9]{2})/im))) {
            $$$('Regexp').$last_match(1)
          }
        } else {
          "unknown platform"
        };
        return platform;
      }, {$$source_location: ['atome/kernel/universe.rb', 156]});
      
      $def(self, '$platform_type', function $$platform_type() {
        var $ret_or_1 = nil;

        if ($eqeqeq(/win/i, ($ret_or_1 = $$('RUBY_PLATFORM')))) {
          return "Windows"
        } else if ($eqeqeq(/darwin/i, $ret_or_1)) {
          return "macOS"
        } else if ($eqeqeq(/linux/i, $ret_or_1)) {
          return "Linux"
        } else if ($eqeqeq(/unix/i, $ret_or_1)) {
          return "Unix"
        } else {
          return "Plate-forme inconnue"
        }
      }, {$$source_location: ['atome/kernel/universe.rb', 169]});
      
      $def(self, '$engine', function $$engine() {
        var self = this, platform = nil, output = nil;

        
        platform = $$('RUBY_PLATFORM').$downcase();
        output = ($eqeq(platform, "opal") ? (((platform = $$('JS').$global()['$[]']("navigator")['$[]']("userAgent").$to_s().$downcase()), ($truthy(platform['$include?']("win32")) ? ("ipconfig /all") : ("ifconfig")))) : ($eqeq(platform, "wasm32-wasi") ? ("ifconfig") : ($eqeq(self.$platform_type(), "windows") ? ("ipconfig") : ("ifconfig"))));
        return self.$current_machine_decision(platform, output);
      }, {$$source_location: ['atome/kernel/universe.rb', 184]});
      
      $def(self, '$current_server', function $$current_server() {
        
        return $$('JS').$global()['$[]']("location")['$[]']("href").$to_s()
      }, {$$source_location: ['atome/kernel/universe.rb', 201]});
      
      $def(self, '$current_user', $return_ivar("user"), {$$source_location: ['atome/kernel/universe.rb', 205]});
      
      $def(self, '$add_user=', function $add_user$eq$4(id) {
        var $a, self = this;
        if (self.users == null) self.users = nil;

        return ($a = [id, true], $send(self.users, '[]=', $a), $a[$a.length - 1])
      }, {$$source_location: ['atome/kernel/universe.rb', 209]});
      
      $def(self, '$users', $return_ivar("users"), {$$source_location: ['atome/kernel/universe.rb', 213]});
      
      $def(self, '$current_user=', $assign_ivar("user"), {$$source_location: ['atome/kernel/universe.rb', 217]});
      
      $def(self, '$current_machine', $return_ivar("machine"), {$$source_location: ['atome/kernel/universe.rb', 223]});
      
      $def(self, '$current_machine=', $assign_ivar("machine"), {$$source_location: ['atome/kernel/universe.rb', 227]});
      
      $def(self, '$internet', function $$internet() {
        var self = this;

        if ($neqeq($$('RUBY_ENGINE').$downcase(), "native")) {
          return self.$grab("view").$html().$internet()
        } else {
          return nil
        }
      }, {$$source_location: ['atome/kernel/universe.rb', 233]});
      
      $def(self, '$synchronised', function $$synchronised(action_nb, pass) {
        var $a, self = this;
        if (self.history == null) self.history = nil;

        
        if (!$eqeq($$('Black_matter').$encode(pass), $$('Black_matter').$password()['$[]']("read")['$[]']("atome"))) {
          return nil
        };
        return ($a = ["sync", true], $send(self.history['$[]'](action_nb), '[]=', $a), $a[$a.length - 1]);
      }, {$$source_location: ['atome/kernel/universe.rb', 241]});
      
      $def(self, '$historicize', function $$historicize(id, operation, element, params) {
        var $a, self = this, time = nil, formatted_time = nil, operation_timing = nil, data_structure = nil, history_entry = nil;
        if (self.allow_sync == null) self.allow_sync = nil;
        if (self.allow_localstorage == null) self.allow_localstorage = nil;
        if (self.increment == null) self.increment = nil;
        if (self.history == null) self.history = nil;

        if ($truthy(self.allow_sync)) {
          
          time = $$('Time').$now();
          formatted_time = time.$strftime("%Y-%m-%d %H:%M:%S.%L");
          if ($truthy($$('Universe').$connected())) {
            
            self.$puts("[" + (id) + ", " + (operation) + ", " + (element) + ", " + (params) + ", " + (formatted_time) + "]");
            $$('A').$sync((new Map([["action", "historicize"], ["data", (new Map([["table", "creator"]]))]])));
          };
          if ($truthy(self.allow_localstorage)) {
            
            operation_timing = $rb_plus($$('Time').$now().$strftime("%Y%m%d%H%M%S%3N"), self.increment.$to_s());
            self.history_position = operation_timing;
            self.increment = $rb_plus(self.increment, 1)['$%'](100);
            data_structure = $hash_rehash(new Map([[id, $hash_rehash(new Map([[operation, $hash_rehash(new Map([[element, params]]))]]))]]));
            history_entry = $hash_rehash(new Map([[operation_timing, data_structure.$merge((new Map([["sync", false], ["time", $$('Time').$now()]])))]]));
            $$('JS').$global()['$[]']("localStorage").$setItem(operation_timing, "{ " + (id) + " => { " + (operation) + " => { " + (element) + " => " + (params) + " } }, sync: false }");
            return ($a = [self.history.$length(), history_entry], $send(self.history, '[]=', $a), $a[$a.length - 1]);
          } else {
            return nil
          };
        } else {
          return nil
        }
      }, {$$source_location: ['atome/kernel/universe.rb', 247]});
      
      $def(self, '$story', $return_ivar("history"), {$$source_location: ['atome/kernel/universe.rb', 273]});
      return $def(self, '$apis', $return_val("work in progress, take a look at vendor/assets/src/medias/utils/"), {$$source_location: ['atome/kernel/universe.rb', 277]});
    })(Opal.get_singleton_class(self), $nesting);
  })($nesting[0], null, $nesting)
};

Opal.modules["atome/utilities/essentials"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $module = Opal.module, $return_ivar = Opal.return_ivar, $defs = Opal.defs, $truthy = Opal.truthy, $def = Opal.def, $send = Opal.send, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('merge!,current_user,[]=,[],merge');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Essentials');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), corp = nil;

    
    corp = "<g transform=\"matrix(0.0267056,0,0,0.0267056,18.6376,20.2376)\">\n" + "    <g id=\"shapePath1\" transform=\"matrix(4.16667,0,0,4.16667,-377.307,105.632)\">\n" + "        <path d=\"M629.175,81.832C740.508,190.188 742.921,368.28 634.565,479.613C526.209,590.945 348.116,593.358 236.784,485.002C125.451,376.646 123.038,198.554 231.394,87.221C339.75,-24.111 517.843,-26.524 629.175,81.832Z\" style=\"fill:rgb(201,12,125);\"/>\n" + "    </g>\n" + "    <g id=\"shapePath2\" transform=\"matrix(4.16667,0,0,4.16667,-377.307,105.632)\">\n" + "        <path d=\"M1679.33,410.731C1503.98,413.882 1402.52,565.418 1402.72,691.803C1402.91,818.107 1486.13,846.234 1498.35,1056.78C1501.76,1313.32 1173.12,1490.47 987.025,1492.89C257.861,1502.39 73.275,904.061 71.639,735.381C70.841,653.675 1.164,647.648 2.788,737.449C12.787,1291.4 456.109,1712.79 989.247,1706.24C1570.67,1699.09 1982.31,1234 1965.76,683.236C1961.3,534.95 1835.31,407.931 1679.33,410.731Z\" style=\"fill:rgb(201,12,125);\"/>\n" + "    </g>\n" + "</g>\n";
    self.default_params = (new Map([["render_engines", ["html"]], ["table", (new Map([["type", "table"], ["left", 0], ["top", 0], ["option", (new Map())]]))], ["animation", (new Map([["type", "animation"], ["attach", "black_matter"]]))], ["element", (new Map([["type", "element"], ["renderers", []], ["attach", "black_matter"]]))], ["box", (new Map([["type", "shape"], ["width", 39], ["height", 39], ["apply", ["box_color"]], ["left", 0], ["top", 0]]))], ["vector", (new Map([["type", "vector"], ["width", 39], ["height", 39], ["left", 0], ["top", 0], ["preset", "vector"], ["definition", corp]]))], ["circle", (new Map([["type", "shape"], ["width", 39], ["height", 39], ["smooth", "100%"], ["apply", ["circle_color"]], ["left", 0], ["top", 0], ["preset", "circle"]]))], ["shape", (new Map([["type", "shape"], ["width", 39], ["height", 39], ["apply", ["shape_color"]], ["left", 0], ["top", 0]]))], ["vr", (new Map([["type", "vr"], ["width", 390], ["height", 390], ["apply", ["shape_color"]], ["left", 0], ["top", 0]]))], ["text", (new Map([["type", "text"], ["component", (new Map([["size", 12]]))], ["left", 0], ["top", 0], ["apply", ["text_color"]], ["width", "auto"], ["height", "auto"]]))], ["drm", (new Map([["type", "drm"], ["attach", "black_matter"]]))], ["shadow", (new Map([["type", "shadow"], ["red", 0], ["green", 0], ["blue", 0], ["alpha", 1], ["blur", 3], ["left", 3], ["top", 3]]))], ["border", (new Map([["type", "border"], ["red", 0], ["green", 0], ["blue", 0], ["alpha", 0], ["pattern", "solid"], ["thickness", 6]]))], ["color", (new Map([["type", "color"], ["red", 0], ["green", 0], ["blue", 0], ["alpha", 1]]))]]));
    $defs(self, '$default_params', $return_ivar("default_params"), {$$source_location: ['atome/utilities/essentials.rb', 53]});
    $defs(self, '$new_default_params', function $$new_default_params(new_default) {
      var self = this;
      if (self.default_params == null) self.default_params = nil;

      return self.default_params['$merge!'](new_default)
    }, {$$source_location: ['atome/utilities/essentials.rb', 57]});
    
    $def(self, '$validation', function $$validation(atome_instance_var) {
      
      if ($truthy(atome_instance_var)) {
        return true
      } else {
        return nil
      }
    }, {$$source_location: ['atome/utilities/essentials.rb', 61]});
    return $def(self, '$add_essential_drm', function $$add_essential_drm(params) {
      var $a, essential_drm = nil;

      
      essential_drm = (new Map([["authorisation", (new Map([["read", [$$('Atome').$current_user()]], ["write", [$$('Atome').$current_user()]]]))], ["atome", (new Map([["read", ["all"]], ["write", ["me"]]]))]]));
      return ($a = ["drm", ($truthy(params['$[]']("drm")) ? (essential_drm.$merge(params['$[]']("drm"))) : (essential_drm))], $send(params, '[]=', $a), $a[$a.length - 1]);
    }, {$$source_location: ['atome/utilities/essentials.rb', 66]});
  })($nesting[0], $nesting)
};

Opal.modules["renderers/renderer"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $def = Opal.def, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('each,[],get_atomes_specificities,type,send,to_proc');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Atome');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.renderers = nil;
    return $def(self, '$render', function $$render(element, params) {
      var user_proc = $$render.$$p || nil, self = this, render_engines = nil, $ret_or_1 = nil;

      $$render.$$p = null;
      
      ;
      render_engines = ($truthy(($ret_or_1 = self.renderers)) ? ($ret_or_1) : ([]));
      return $send(render_engines, 'each', [], function $$1(render_engine){var self = $$1.$$s == null ? this : $$1.$$s, exception_found = nil;

        
        if (render_engine == null) render_engine = nil;
        exception_found = "" + ($$('Universe').$get_atomes_specificities()['$[]'](self.$type())['$[]'](element));
        return $send(self, 'send', ["" + (render_engine) + "_" + (exception_found) + (element), params], user_proc.$to_proc());}, {$$s: self, $$source_location: ['renderers/renderer.rb', 9]});
    }, {$$source_location: ['renderers/renderer.rb', 6]})
  })($nesting[0], null, $nesting)
};

Opal.modules["atome/utilities/color_helper/color/rgb/metallic"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $module = Opal.module, $slice = Opal.slice, $send = Opal.send, $to_a = Opal.to_a, $def = Opal.def, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('private,__named_color,new,metallic');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'RGB');

    var $nesting = [self].concat($parent_nesting);

    
    $module($nesting[0], 'Metallic');
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      self.$private();
      return $def(self, '$metallic', function $$metallic(rgb, $a) {
        var $post_args, names, self = this;

        
        $post_args = $slice(arguments, 1);
        names = $post_args;
        return $send(self, '__named_color', [$$('Metallic'), $send(self, 'new', $to_a(rgb))].concat($to_a(names)));
      }, {$$arity: -2, $$source_location: ['atome/utilities/color_helper/color/rgb/metallic.rb', 10]});
    })(Opal.get_singleton_class(self), $nesting);
    self.$metallic([153, 153, 153], "Aluminum");
    self.$metallic([217, 135, 25], "CoolCopper");
    self.$metallic([184, 115, 51], "Copper");
    self.$metallic([76, 76, 76], "Iron");
    self.$metallic([25, 25, 25], "Lead");
    self.$metallic([179, 179, 179], "Magnesium");
    self.$metallic([230, 230, 230], "Mercury");
    self.$metallic([128, 128, 128], "Nickel");
    self.$metallic([96, 0, 0], "PolySilicon", "Poly");
    self.$metallic([204, 204, 204], "Silver");
    self.$metallic([102, 102, 102], "Steel");
    self.$metallic([127, 127, 127], "Tin");
    return self.$metallic([51, 51, 51], "Tungsten");
  })($$('Color'), null, $nesting)
};

Opal.modules["atome/utilities/color_helper/color/rgb/colors"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $slice = Opal.slice, $send = Opal.send, $to_a = Opal.to_a, $def = Opal.def, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('private,__named_color,new,named');
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'RGB');

    var $nesting = [self].concat($parent_nesting);

    
    (function(self, $parent_nesting) {
      
      
      self.$private();
      return $def(self, '$named', function $$named(rgb, $a) {
        var $post_args, names, self = this;

        
        $post_args = $slice(arguments, 1);
        names = $post_args;
        return $send(self, '__named_color', [self, $send(self, 'new', $to_a(rgb))].concat($to_a(names)));
      }, {$$arity: -2, $$source_location: ['atome/utilities/color_helper/color/rgb/colors.rb', 4]});
    })(Opal.get_singleton_class(self), $nesting);
    self.$named([240, 248, 255], "AliceBlue");
    self.$named([250, 235, 215], "AntiqueWhite");
    self.$named([0, 255, 255], "Aqua");
    self.$named([127, 255, 212], "Aquamarine");
    self.$named([240, 255, 255], "Azure");
    self.$named([245, 245, 220], "Beige");
    self.$named([255, 228, 196], "Bisque");
    self.$named([102, 51, 153], "RebeccaPurple", "BeccaPurple");
    self.$named([0, 0, 0], "Black");
    self.$named([255, 235, 205], "BlanchedAlmond");
    self.$named([0, 0, 255], "Blue");
    self.$named([138, 43, 226], "BlueViolet");
    self.$named([165, 42, 42], "Brown");
    self.$named([222, 184, 135], "BurlyWood", "Burlywood");
    self.$named([95, 158, 160], "CadetBlue");
    self.$named([255, 94, 208], "Carnation");
    self.$named([141, 0, 0], "Cayenne");
    self.$named([127, 255, 0], "Chartreuse");
    self.$named([210, 105, 30], "Chocolate");
    self.$named([255, 127, 80], "Coral");
    self.$named([100, 149, 237], "CornflowerBlue");
    self.$named([255, 248, 220], "Cornsilk");
    self.$named([220, 20, 60], "Crimson");
    self.$named([0, 255, 255], "Cyan");
    self.$named([0, 0, 139], "DarkBlue");
    self.$named([0, 139, 139], "DarkCyan");
    self.$named([184, 134, 11], "DarkGoldenRod", "DarkGoldenrod");
    self.$named([169, 169, 169], "DarkGray", "DarkGrey");
    self.$named([0, 100, 0], "DarkGreen");
    self.$named([189, 183, 107], "DarkKhaki");
    self.$named([139, 0, 139], "DarkMagenta");
    self.$named([85, 107, 47], "DarkOliveGreen", "DarkoliveGreen");
    self.$named([255, 140, 0], "DarkOrange");
    self.$named([153, 50, 204], "DarkOrchid");
    self.$named([139, 0, 0], "DarkRed");
    self.$named([233, 150, 122], "DarkSalmon", "Darksalmon");
    self.$named([143, 188, 143], "DarkSeaGreen");
    self.$named([72, 61, 139], "DarkSlateBlue");
    self.$named([47, 79, 79], "DarkSlateGray", "DarkSlateGrey");
    self.$named([0, 206, 209], "DarkTurquoise");
    self.$named([148, 0, 211], "DarkViolet");
    self.$named([255, 140, 0], "Darkorange");
    self.$named([255, 20, 147], "DeepPink");
    self.$named([0, 191, 191], "DeepSkyBlue");
    self.$named([105, 105, 105], "DimGray", "DimGrey");
    self.$named([30, 144, 255], "DodgerBlue");
    self.$named([209, 146, 117], "Feldspar");
    self.$named([178, 34, 34], "FireBrick", "Firebrick");
    self.$named([255, 250, 240], "FloralWhite");
    self.$named([34, 139, 34], "ForestGreen");
    self.$named([255, 0, 255], "Fuchsia");
    self.$named([220, 220, 220], "Gainsboro");
    self.$named([248, 248, 255], "GhostWhite");
    self.$named([255, 215, 0], "Gold");
    self.$named([218, 165, 32], "GoldenRod", "Goldenrod");
    self.$named([128, 128, 128], "Gray", "Grey");
    self.$named([10, 10, 10, 100.0], "Gray10", "Grey10");
    self.$named([20, 20, 20, 100.0], "Gray20", "Grey20");
    self.$named([30, 30, 30, 100.0], "Gray30", "Grey30");
    self.$named([40, 40, 40, 100.0], "Gray40", "Grey40");
    self.$named([50, 50, 50, 100.0], "Gray50", "Grey50");
    self.$named([60, 60, 60, 100.0], "Gray60", "Grey60");
    self.$named([70, 70, 70, 100.0], "Gray70", "Grey70");
    self.$named([80, 80, 80, 100.0], "Gray80", "Grey80");
    self.$named([90, 90, 90, 100.0], "Gray90", "Grey90");
    self.$named([0, 128, 0], "Green");
    self.$named([173, 255, 47], "GreenYellow");
    self.$named([240, 255, 240], "HoneyDew", "Honeydew");
    self.$named([255, 105, 180], "HotPink");
    self.$named([205, 92, 92], "IndianRed");
    self.$named([75, 0, 130], "Indigo");
    self.$named([255, 255, 240], "Ivory");
    self.$named([240, 230, 140], "Khaki");
    self.$named([230, 230, 250], "Lavender");
    self.$named([255, 240, 245], "LavenderBlush");
    self.$named([124, 252, 0], "LawnGreen");
    self.$named([255, 250, 205], "LemonChiffon");
    self.$named([173, 216, 230], "LightBlue");
    self.$named([240, 128, 128], "LightCoral");
    self.$named([224, 255, 255], "LightCyan");
    self.$named([250, 250, 210], "LightGoldenRodYellow", "LightGoldenrodYellow");
    self.$named([211, 211, 211], "LightGray", "LightGrey");
    self.$named([144, 238, 144], "LightGreen");
    self.$named([255, 182, 193], "LightPink");
    self.$named([255, 160, 122], "LightSalmon", "Lightsalmon");
    self.$named([32, 178, 170], "LightSeaGreen");
    self.$named([135, 206, 250], "LightSkyBlue");
    self.$named([132, 112, 255], "LightSlateBlue");
    self.$named([119, 136, 153], "LightSlateGray", "LightSlateGrey");
    self.$named([176, 196, 222], "LightSteelBlue", "LightsteelBlue");
    self.$named([255, 255, 224], "LightYellow");
    self.$named([0, 255, 0], "Lime");
    self.$named([50, 205, 50], "LimeGreen");
    self.$named([250, 240, 230], "Linen");
    self.$named([255, 0, 255], "Magenta");
    self.$named([128, 0, 0], "Maroon");
    self.$named([102, 205, 170], "MediumAquaMarine", "MediumAquamarine");
    self.$named([0, 0, 205], "MediumBlue");
    self.$named([186, 85, 211], "MediumOrchid");
    self.$named([147, 112, 219], "MediumPurple");
    self.$named([60, 179, 113], "MediumSeaGreen");
    self.$named([123, 104, 238], "MediumSlateBlue");
    self.$named([0, 250, 154], "MediumSpringGreen");
    self.$named([72, 209, 204], "MediumTurquoise");
    self.$named([199, 21, 133], "MediumVioletRed");
    self.$named([25, 25, 112], "MidnightBlue");
    self.$named([245, 255, 250], "MintCream");
    self.$named([255, 228, 225], "MistyRose");
    self.$named([255, 228, 181], "Moccasin");
    self.$named([255, 222, 173], "NavajoWhite");
    self.$named([0, 0, 128], "Navy");
    self.$named([253, 245, 230], "OldLace");
    self.$named([128, 128, 0], "Olive");
    self.$named([107, 142, 35], "OliveDrab", "Olivedrab");
    self.$named([255, 165, 0], "Orange");
    self.$named([255, 69, 0], "OrangeRed");
    self.$named([218, 112, 214], "Orchid");
    self.$named([238, 232, 170], "PaleGoldenRod", "PaleGoldenrod");
    self.$named([152, 251, 152], "PaleGreen");
    self.$named([175, 238, 238], "PaleTurquoise");
    self.$named([219, 112, 147], "PaleVioletRed");
    self.$named([255, 239, 213], "PapayaWhip");
    self.$named([255, 218, 185], "PeachPuff", "Peachpuff");
    self.$named([205, 133, 63], "Peru");
    self.$named([255, 192, 203], "Pink");
    self.$named([221, 160, 221], "Plum");
    self.$named([176, 224, 230], "PowderBlue");
    self.$named([128, 0, 128], "Purple");
    self.$named([255, 0, 0], "Red");
    self.$named([188, 143, 143], "RosyBrown");
    self.$named([65, 105, 225], "RoyalBlue");
    self.$named([139, 69, 19], "SaddleBrown");
    self.$named([250, 128, 114], "Salmon");
    self.$named([244, 164, 96], "SandyBrown");
    self.$named([46, 139, 87], "SeaGreen");
    self.$named([255, 245, 238], "SeaShell", "Seashell");
    self.$named([160, 82, 45], "Sienna");
    self.$named([192, 192, 192], "Silver");
    self.$named([135, 206, 235], "SkyBlue");
    self.$named([106, 90, 205], "SlateBlue");
    self.$named([112, 128, 144], "SlateGray", "SlateGrey");
    self.$named([255, 250, 250], "Snow");
    self.$named([0, 255, 127], "SpringGreen");
    self.$named([70, 130, 180], "SteelBlue");
    self.$named([210, 180, 140], "Tan");
    self.$named([0, 128, 128], "Teal");
    self.$named([216, 191, 216], "Thistle");
    self.$named([255, 99, 71], "Tomato");
    self.$named([64, 224, 208], "Turquoise");
    self.$named([238, 130, 238], "Violet");
    self.$named([208, 32, 144], "VioletRed");
    self.$named([245, 222, 179], "Wheat");
    self.$named([255, 255, 255], "White");
    self.$named([245, 245, 245], "WhiteSmoke");
    self.$named([255, 255, 0], "Yellow");
    return self.$named([154, 205, 50], "YellowGreen");
  })($$('Color'), null, $nesting);
  return self.$require("atome/utilities/color_helper/color/rgb/colors.rb"+ '/../' + "metallic");
};

Opal.modules["atome/utilities/color_helper/color/rgb"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $const_set = Opal.const_set, $def = Opal.def, $to_ary = Opal.to_ary, $send = Opal.send, $rb_divide = Opal.rb_divide, $truthy = Opal.truthy, $rb_times = Opal.rb_times, $rb_gt = Opal.rb_gt, $rb_minus = Opal.rb_minus, $rb_plus = Opal.rb_plus, $eqeq = Opal.eqeq, $rb_lt = Opal.rb_lt, $alias = Opal.alias, $eqeqeq = Opal.eqeqeq, $return_ivar = Opal.return_ivar, $to_a = Opal.to_a, $slice = Opal.slice, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('include,to_rgb,map,normalize,/,call,%,round,*,>,hex,red_p,green_p,blue_p,css_hsl,to_hsl,css_hsla,-,to_f,min,brightness,max,from_fraction,+,near_zero?,near_zero_or_less?,==,<,downcase,to_s,raise,**,to_xyz,[],mix_with,dup,r=,r,g=,g,b=,b,y,to_yiq,l,to_grayscale,normalize_percent,l=,s=,s,h=,h,flatten,empty?,===,to_lab,each,delta_e94,values_at,sqrt,class,-@,max_rgb_as_grayscale,html,instance_variable_set,private,new,to_proc,alias_method,scan,size,to_i,each_slice,join,fetch,__by_hex,html_hexify,from_html,__by_name,by_name,by_hex,union,keys,by_css,constants,length,const_set,names=,names,[]=,freeze');
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'RGB');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.r = $proto.g = $proto.b = nil;
    
    self.$include($$('Color'));
    $const_set($nesting[0], 'PDF_FORMAT_STR', "%.3f %.3f %.3f %s");
    
    $def(self, '$coerce', function $$coerce(other) {
      
      return other.$to_rgb()
    }, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 11]});
    
    $def(self, '$initialize', function $$initialize(r, g, b, radix) {
      var block = $$initialize.$$p || nil, $a, $b, self = this;

      $$initialize.$$p = null;
      
      ;
      if (r == null) r = 0;
      if (g == null) g = 0;
      if (b == null) b = 0;
      if (radix == null) radix = 255.0;
      $b = $send([r, g, b], 'map', [], function $$1(v){
        
        if (v == null) v = nil;
        return $$('Color').$normalize($rb_divide(v, radix));}, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 20]}), $a = $to_ary($b), (self.r = ($a[0] == null ? nil : $a[0])), (self.g = ($a[1] == null ? nil : $a[1])), (self.b = ($a[2] == null ? nil : $a[2])), $b;
      if ($truthy(block)) {
        return block.$call(self)
      } else {
        return nil
      };
    }, {$$arity: -1, $$source_location: ['atome/utilities/color_helper/color/rgb.rb', 19]});
    
    $def(self, '$pdf_fill', function $$pdf_fill() {
      var self = this;

      return $$('PDF_FORMAT_STR')['$%']([self.r, self.g, self.b, "rg"])
    }, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 26]});
    
    $def(self, '$pdf_stroke', function $$pdf_stroke() {
      var self = this;

      return $$('PDF_FORMAT_STR')['$%']([self.r, self.g, self.b, "RG"])
    }, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 32]});
    
    $def(self, '$hex', function $$hex() {
      var self = this, r = nil, g = nil, b = nil;

      
      r = $rb_times(self.r, 255).$round();
      if ($truthy($rb_gt(r, 255))) {
        r = 255
      };
      g = $rb_times(self.g, 255).$round();
      if ($truthy($rb_gt(g, 255))) {
        g = 255
      };
      b = $rb_times(self.b, 255).$round();
      if ($truthy($rb_gt(b, 255))) {
        b = 255
      };
      return "%02x%02x%02x"['$%']([r, g, b]);
    }, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 37]});
    
    $def(self, '$html', function $$html() {
      var self = this;

      return "#" + (self.$hex())
    }, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 51]});
    
    $def(self, '$css_rgb', function $$css_rgb() {
      var self = this;

      return "rgb(%3.2f%%, %3.2f%%, %3.2f%%)"['$%']([self.$red_p(), self.$green_p(), self.$blue_p()])
    }, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 58]});
    
    $def(self, '$css_rgba', function $$css_rgba(alpha) {
      var self = this;

      
      if (alpha == null) alpha = 1;
      return "rgba(%3.2f%%, %3.2f%%, %3.2f%%, %3.2f)"['$%']([self.$red_p(), self.$green_p(), self.$blue_p(), alpha]);
    }, {$$arity: -1, $$source_location: ['atome/utilities/color_helper/color/rgb.rb', 70]});
    
    $def(self, '$css_hsl', function $$css_hsl() {
      var self = this;

      return self.$to_hsl().$css_hsl()
    }, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 77]});
    
    $def(self, '$css_hsla', function $$css_hsla() {
      var self = this;

      return self.$to_hsl().$css_hsla()
    }, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 84]});
    
    $def(self, '$to_cmyk', function $$to_cmyk() {
      var self = this, c = nil, m = nil, y = nil, k = nil;

      
      c = $rb_minus(1.0, self.r.$to_f());
      m = $rb_minus(1.0, self.g.$to_f());
      y = $rb_minus(1.0, self.b.$to_f());
      k = [c, m, y].$min();
      k = $rb_minus(k, $rb_times(k, self.$brightness()));
      c = [1.0, [0.0, $rb_minus(c, k)].$max()].$min();
      m = [1.0, [0.0, $rb_minus(m, k)].$max()].$min();
      y = [1.0, [0.0, $rb_minus(y, k)].$max()].$min();
      k = [1.0, [0.0, k].$max()].$min();
      return $$$($$('Color'), 'CMYK').$from_fraction(c, m, y, k);
    }, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 114]});
    
    $def(self, '$to_rgb', function $$to_rgb(ignored) {
      var self = this;

      
      if (ignored == null) ignored = nil;
      return self;
    }, {$$arity: -1, $$source_location: ['atome/utilities/color_helper/color/rgb.rb', 130]});
    
    $def(self, '$to_yiq', function $$to_yiq() {
      var self = this, y = nil, i = nil, q = nil;

      
      y = $rb_plus($rb_plus($rb_times(self.r, 0.299), $rb_times(self.g, 0.587)), $rb_times(self.b, 0.114));
      i = $rb_plus($rb_plus($rb_times(self.r, 0.596), $rb_times(self.g, -0.275)), $rb_times(self.b, -0.321));
      q = $rb_plus($rb_plus($rb_times(self.r, 0.212), $rb_times(self.g, -0.523)), $rb_times(self.b, 0.311));
      return $$$($$('Color'), 'YIQ').$from_fraction(y, i, q);
    }, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 135]});
    
    $def(self, '$to_hsl', function $$to_hsl() {
      var self = this, min = nil, max = nil, delta = nil, lum = nil, hue = nil, sat = nil, sixth = nil;

      
      min = [self.r, self.g, self.b].$min();
      max = [self.r, self.g, self.b].$max();
      delta = $rb_minus(max, min).$to_f();
      lum = $rb_divide($rb_plus(max, min), 2.0);
      if ($truthy($$('Color')['$near_zero?'](delta))) {
        
        hue = 0;
        sat = 0;
      } else {
        
        if ($truthy($$('Color')['$near_zero_or_less?']($rb_minus(lum, 0.5)))) {
          sat = $rb_divide(delta, $rb_plus(max, min).$to_f())
        } else {
          sat = $rb_divide(delta, $rb_minus($rb_minus(2, max), min).$to_f())
        };
        sixth = $rb_divide(1, 6.0);
        if ($eqeq(self.r, max)) {
          
          hue = $rb_times(sixth, $rb_divide($rb_minus(self.g, self.b), delta));
          if ($truthy($rb_lt(self.g, self.b))) {
            hue = $rb_plus(hue, 1.0)
          };
        } else if ($eqeq(self.g, max)) {
          hue = $rb_plus($rb_times(sixth, $rb_divide($rb_minus(self.b, self.r), delta)), $rb_divide(1.0, 3.0))
        } else if ($eqeq(self.b, max)) {
          hue = $rb_plus($rb_times(sixth, $rb_divide($rb_minus(self.r, self.g), delta)), $rb_divide(2.0, 3.0))
        };
        if ($truthy($rb_lt(hue, 0))) {
          hue = $rb_plus(hue, 1)
        };
        if ($truthy($rb_gt(hue, 1))) {
          hue = $rb_minus(hue, 1)
        };
      };
      return $$$($$('Color'), 'HSL').$from_fraction(hue, sat, lum);
    }, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 145]});
    
    $def(self, '$to_xyz', function $$to_xyz(color_space) {
      var $a, $b, self = this, r = nil, g = nil, b = nil;

      
      if (color_space == null) color_space = "sRGB";
      if (!$eqeq(color_space.$to_s().$downcase(), "srgb")) {
        self.$raise($$('ArgumentError'), "Unsupported colour space " + (color_space) + ".")
      };
      $b = $send([self.r, self.g, self.b], 'map', [], function $$2(v){
        
        if (v == null) v = nil;
        if ($truthy($rb_gt(v, 0.04045))) {
          return $rb_times($rb_divide($rb_plus(v, 0.055), 1.055)['$**'](2.4), 100)
        } else {
          return $rb_times($rb_divide(v, 12.92), 100)
        };}, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 193]}), $a = $to_ary($b), (r = ($a[0] == null ? nil : $a[0])), (g = ($a[1] == null ? nil : $a[1])), (b = ($a[2] == null ? nil : $a[2])), $b;
      return (new Map([["x", $rb_plus($rb_plus($rb_times(r, 0.4124564), $rb_times(g, 0.3575761)), $rb_times(b, 0.1804375))], ["y", $rb_plus($rb_plus($rb_times(r, 0.2126729), $rb_times(g, 0.7151522)), $rb_times(b, 0.072175))], ["z", $rb_plus($rb_plus($rb_times(r, 0.0193339), $rb_times(g, 0.119192)), $rb_times(b, 0.9503041))]]));
    }, {$$arity: -1, $$source_location: ['atome/utilities/color_helper/color/rgb.rb', 186]});
    
    $def(self, '$to_lab', function $$to_lab(color_space, reference_white) {
      var $a, $b, self = this, xyz = nil, xr = nil, yr = nil, zr = nil, epsilon = nil, kappa = nil, fx = nil, fy = nil, fz = nil;

      
      if (color_space == null) color_space = "sRGB";
      if (reference_white == null) reference_white = [95.047, 100.0, 108.883];
      xyz = self.$to_xyz();
      xr = $rb_divide(xyz['$[]']("x"), reference_white['$[]'](0));
      yr = $rb_divide(xyz['$[]']("y"), reference_white['$[]'](1));
      zr = $rb_divide(xyz['$[]']("z"), reference_white['$[]'](2));
      epsilon = $rb_divide(216, 24389.0);
      kappa = $rb_divide(24389, 27.0);
      $b = $send([xr, yr, zr], 'map', [], function $$3(t){
        
        if (t == null) t = nil;
        if ($truthy($rb_gt(t, epsilon))) {
          return t['$**']($rb_divide(1.0, 3))
        } else {
          return $rb_divide($rb_plus($rb_times(kappa, t), 16), 116.0)
        };}, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 236]}), $a = $to_ary($b), (fx = ($a[0] == null ? nil : $a[0])), (fy = ($a[1] == null ? nil : $a[1])), (fz = ($a[2] == null ? nil : $a[2])), $b;
      return (new Map([["L", $rb_minus($rb_times(116, fy), 16)], ["a", $rb_times(500, $rb_minus(fx, fy))], ["b", $rb_times(200, $rb_minus(fy, fz))]]));
    }, {$$arity: -1, $$source_location: ['atome/utilities/color_helper/color/rgb.rb', 217]});
    
    $def(self, '$lighten_by', function $$lighten_by(percent) {
      var self = this;

      return self.$mix_with($$('White'), percent)
    }, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 256]});
    
    $def(self, '$darken_by', function $$darken_by(percent) {
      var self = this;

      return self.$mix_with($$('Black'), percent)
    }, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 263]});
    
    $def(self, '$mix_with', function $$mix_with(mask, opacity) {
      var self = this, rgb = nil;

      
      opacity = $rb_divide(opacity, 100.0);
      rgb = self.$dup();
      rgb['$r=']($rb_plus($rb_times(self.r, opacity), $rb_times(mask.$r(), $rb_minus(1, opacity))));
      rgb['$g=']($rb_plus($rb_times(self.g, opacity), $rb_times(mask.$g(), $rb_minus(1, opacity))));
      rgb['$b=']($rb_plus($rb_times(self.b, opacity), $rb_times(mask.$b(), $rb_minus(1, opacity))));
      return rgb;
    }, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 269]});
    
    $def(self, '$brightness', function $$brightness() {
      var self = this;

      return self.$to_yiq().$y()
    }, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 286]});
    
    $def(self, '$to_grayscale', function $$to_grayscale() {
      var self = this;

      return $$$($$('Color'), 'GrayScale').$from_fraction(self.$to_hsl().$l())
    }, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 290]});
    $alias(self, "to_greyscale", "to_grayscale");
    
    $def(self, '$adjust_brightness', function $$adjust_brightness(percent) {
      var self = this, hsl = nil;

      
      percent = self.$normalize_percent(percent);
      hsl = self.$to_hsl();
      hsl['$l=']($rb_times(hsl.$l(), percent));
      return hsl.$to_rgb();
    }, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 301]});
    
    $def(self, '$adjust_saturation', function $$adjust_saturation(percent) {
      var self = this, hsl = nil;

      
      percent = self.$normalize_percent(percent);
      hsl = self.$to_hsl();
      hsl['$s=']($rb_times(hsl.$s(), percent));
      return hsl.$to_rgb();
    }, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 314]});
    
    $def(self, '$adjust_hue', function $$adjust_hue(percent) {
      var self = this, hsl = nil;

      
      percent = self.$normalize_percent(percent);
      hsl = self.$to_hsl();
      hsl['$h=']($rb_times(hsl.$h(), percent));
      return hsl.$to_rgb();
    }, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 327]});
    
    $def(self, '$closest_match', function $$closest_match(color_list, threshold_distance) {
      var self = this, $ret_or_1 = nil, lab = nil, closest_distance = nil, best_match = nil;

      
      if (threshold_distance == null) threshold_distance = 1000.0;
      color_list = [color_list].$flatten(1);
      if ($truthy(color_list['$empty?']())) {
        return nil
      };
      threshold_distance = (($eqeqeq("jnd", ($ret_or_1 = threshold_distance)) || ($eqeqeq("just_noticeable", $ret_or_1))) ? (2.3) : (threshold_distance.$to_f()));
      lab = self.$to_lab();
      closest_distance = threshold_distance;
      best_match = nil;
      $send(color_list, 'each', [], function $$4(c){var self = $$4.$$s == null ? this : $$4.$$s, distance = nil;

        
        if (c == null) c = nil;
        distance = self.$delta_e94(lab, c.$to_lab());
        if ($truthy($rb_lt(distance, closest_distance))) {
          
          closest_distance = distance;
          return (best_match = c);
        } else {
          return nil
        };}, {$$s: self, $$source_location: ['atome/utilities/color_helper/color/rgb.rb', 361]});
      return best_match;
    }, {$$arity: -2, $$source_location: ['atome/utilities/color_helper/color/rgb.rb', 347]});
    
    $def(self, '$delta_e94', function $$delta_e94(color_1, color_2, weighting_type) {
      var $a, $b, self = this, k_1 = nil, k_2 = nil, k_L = nil, k_C = nil, k_H = nil, l_1 = nil, a_1 = nil, b_1 = nil, l_2 = nil, a_2 = nil, b_2 = nil, delta_a = nil, delta_b = nil, c_1 = nil, c_2 = nil, delta_L = nil, delta_C = nil, delta_H2 = nil, s_L = nil, s_C = nil, s_H = nil, composite_L = nil, composite_C = nil, composite_H = nil;

      
      if (weighting_type == null) weighting_type = "graphic_arts";
      
      switch (weighting_type.valueOf()) {
        case "graphic_arts":
          
          k_1 = 0.045;
          k_2 = 0.015;
          k_L = 1;
          break;
        case "textiles":
          
          k_1 = 0.048;
          k_2 = 0.014;
          k_L = 2;
          break;
        default:
          self.$raise($$('ArgumentError'), "Unsupported weighting type " + (weighting_type) + ".")
      };
      k_C = (k_H = 1);
      $b = color_1.$values_at("L", "a", "b"), $a = $to_ary($b), (l_1 = ($a[0] == null ? nil : $a[0])), (a_1 = ($a[1] == null ? nil : $a[1])), (b_1 = ($a[2] == null ? nil : $a[2])), $b;
      $b = color_2.$values_at("L", "a", "b"), $a = $to_ary($b), (l_2 = ($a[0] == null ? nil : $a[0])), (a_2 = ($a[1] == null ? nil : $a[1])), (b_2 = ($a[2] == null ? nil : $a[2])), $b;
      delta_a = $rb_minus(a_1, a_2);
      delta_b = $rb_minus(b_1, b_2);
      c_1 = $$('Math').$sqrt($rb_plus(a_1['$**'](2), b_1['$**'](2)));
      c_2 = $$('Math').$sqrt($rb_plus(a_2['$**'](2), b_2['$**'](2)));
      delta_L = $rb_minus(color_1['$[]']("L"), color_2['$[]']("L"));
      delta_C = $rb_minus(c_1, c_2);
      delta_H2 = $rb_minus($rb_plus(delta_a['$**'](2), delta_b['$**'](2)), delta_C['$**'](2));
      s_L = 1;
      s_C = $rb_plus(1, $rb_times(k_1, c_1));
      s_H = $rb_plus(1, $rb_times(k_2, c_1));
      composite_L = $rb_divide(delta_L, $rb_times(k_L, s_L))['$**'](2);
      composite_C = $rb_divide(delta_C, $rb_times(k_C, s_C))['$**'](2);
      composite_H = $rb_divide(delta_H2, $rb_times(k_H, s_H)['$**'](2));
      return $$('Math').$sqrt($rb_plus($rb_plus(composite_L, composite_C), composite_H));
    }, {$$arity: -3, $$source_location: ['atome/utilities/color_helper/color/rgb.rb', 387]});
    
    $def(self, '$red', function $$red() {
      var self = this;

      return $rb_times(self.r, 255.0)
    }, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 446]});
    
    $def(self, '$red_p', function $$red_p() {
      var self = this;

      return $rb_times(self.r, 100.0)
    }, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 450]});
    
    $def(self, '$r', $return_ivar("r"), {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 455]});
    
    $def(self, '$red=', function $RGB_red$eq$5(rr) {
      var self = this;

      return (self.r = $$('Color').$normalize($rb_divide(rr, 255.0)))
    }, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 459]});
    
    $def(self, '$red_p=', function $RGB_red_p$eq$6(rr) {
      var self = this;

      return (self.r = $$('Color').$normalize($rb_divide(rr, 100.0)))
    }, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 463]});
    
    $def(self, '$r=', function $RGB_r$eq$7(rr) {
      var self = this;

      return (self.r = $$('Color').$normalize(rr))
    }, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 468]});
    
    $def(self, '$green', function $$green() {
      var self = this;

      return $rb_times(self.g, 255.0)
    }, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 473]});
    
    $def(self, '$green_p', function $$green_p() {
      var self = this;

      return $rb_times(self.g, 100.0)
    }, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 477]});
    
    $def(self, '$g', $return_ivar("g"), {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 482]});
    
    $def(self, '$green=', function $RGB_green$eq$8(gg) {
      var self = this;

      return (self.g = $$('Color').$normalize($rb_divide(gg, 255.0)))
    }, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 486]});
    
    $def(self, '$green_p=', function $RGB_green_p$eq$9(gg) {
      var self = this;

      return (self.g = $$('Color').$normalize($rb_divide(gg, 100.0)))
    }, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 490]});
    
    $def(self, '$g=', function $RGB_g$eq$10(gg) {
      var self = this;

      return (self.g = $$('Color').$normalize(gg))
    }, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 495]});
    
    $def(self, '$blue', function $$blue() {
      var self = this;

      return $rb_times(self.b, 255.0)
    }, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 500]});
    
    $def(self, '$blue_p', function $$blue_p() {
      var self = this;

      return $rb_times(self.b, 100.0)
    }, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 504]});
    
    $def(self, '$b', $return_ivar("b"), {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 509]});
    
    $def(self, '$blue=', function $RGB_blue$eq$11(bb) {
      var self = this;

      return (self.b = $$('Color').$normalize($rb_divide(bb, 255.0)))
    }, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 513]});
    
    $def(self, '$blue_p=', function $RGB_blue_p$eq$12(bb) {
      var self = this;

      return (self.b = $$('Color').$normalize($rb_divide(bb, 100.0)))
    }, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 517]});
    
    $def(self, '$b=', function $RGB_b$eq$13(bb) {
      var self = this;

      return (self.b = $$('Color').$normalize(bb))
    }, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 522]});
    
    $def(self, '$+', function $RGB_$plus$14(other) {
      var self = this;

      return self.$class().$from_fraction($rb_plus(self.$r(), other.$r()), $rb_plus(self.$g(), other.$g()), $rb_plus(self.$b(), other.$b()))
    }, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 532]});
    
    $def(self, '$-', function $RGB_$minus$15(other) {
      var self = this;

      return $rb_plus(self, other['$-@']())
    }, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 542]});
    
    $def(self, '$max_rgb_as_grayscale', function $$max_rgb_as_grayscale() {
      var self = this;

      return $$$($$('Color'), 'GrayScale').$from_fraction([self.r, self.g, self.b].$max())
    }, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 548]});
    $alias(self, "max_rgb_as_greyscale", "max_rgb_as_grayscale");
    
    $def(self, '$inspect', function $$inspect() {
      var self = this;

      return "RGB [" + (self.$html()) + "]"
    }, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 553]});
    
    $def(self, '$to_a', function $$to_a() {
      var self = this;

      return [self.$r(), self.$g(), self.$b()]
    }, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 557]});
    
    $def(self, '$-@', function $RGB_$minus$$16() {
      var self = this, rgb = nil;

      
      rgb = self.$dup();
      rgb.$instance_variable_set("@r", rgb.$r()['$-@']());
      rgb.$instance_variable_set("@g", rgb.$g()['$-@']());
      rgb.$instance_variable_set("@b", rgb.$b()['$-@']());
      return rgb;
    }, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 563]});
    self.$private();
    return $def(self, '$normalize_percent', function $$normalize_percent(percent) {
      
      
      percent = $rb_divide(percent, 100.0);
      percent = $rb_plus(percent, 1.0);
      percent = [percent, 2.0].$min();
      return [0.0, percent].$max();
    }, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 572]});
  })($$('Color'), null, $nesting);
  (function(self, $parent_nesting) {
    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    
    $def(self, '$from_percentage', function $$from_percentage(r, g, b) {
      var block = $$from_percentage.$$p || nil, self = this;

      $$from_percentage.$$p = null;
      
      ;
      if (r == null) r = 0;
      if (g == null) g = 0;
      if (b == null) b = 0;
      return $send(self, 'new', [r, g, b, 100.0], block.$to_proc());
    }, {$$arity: -1, $$source_location: ['atome/utilities/color_helper/color/rgb.rb', 585]});
    
    $def(self, '$from_fraction', function $$from_fraction(r, g, b) {
      var block = $$from_fraction.$$p || nil, self = this;

      $$from_fraction.$$p = null;
      
      ;
      if (r == null) r = 0.0;
      if (g == null) g = 0.0;
      if (b == null) b = 0.0;
      return $send(self, 'new', [r, g, b, 1.0], block.$to_proc());
    }, {$$arity: -1, $$source_location: ['atome/utilities/color_helper/color/rgb.rb', 592]});
    
    $def(self, '$from_grayscale_fraction', function $$from_grayscale_fraction(l) {
      var block = $$from_grayscale_fraction.$$p || nil, self = this;

      $$from_grayscale_fraction.$$p = null;
      
      ;
      if (l == null) l = 0.0;
      return $send(self, 'new', [l, l, l, 1.0], block.$to_proc());
    }, {$$arity: -1, $$source_location: ['atome/utilities/color_helper/color/rgb.rb', 597]});
    self.$alias_method("from_greyscale_fraction", "from_grayscale_fraction");
    
    $def(self, '$from_html', function $$from_html(html_colour) {
      var block = $$from_html.$$p || nil, self = this, h = nil;

      $$from_html.$$p = null;
      
      ;
      h = html_colour.$scan(/[0-9a-f]/i);
      
      switch (h.$size().valueOf()) {
        case 3:
          return $send(self, 'new', $to_a($send(h, 'map', [], function $$17(v){
            
            if (v == null) v = nil;
            return $rb_times(v, 2).$to_i(16);}, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 614]})), block.$to_proc())
        case 6:
          return $send(self, 'new', $to_a($send(h.$each_slice(2), 'map', [], function $$18(v){
            
            if (v == null) v = nil;
            return v.$join().$to_i(16);}, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 616]})), block.$to_proc())
        default:
          return self.$raise($$('ArgumentError'), "Not a supported HTML colour type.")
      };
    }, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 609]});
    
    $def(self, '$by_hex', function $$by_hex(hex) {
      var block = $$by_hex.$$p || nil, self = this;

      $$by_hex.$$p = null;
      
      ;
      try {
        return $send(self.$__by_hex(), 'fetch', [self.$html_hexify(hex)], function $$19(){var self = $$19.$$s == null ? this : $$19.$$s;

          return self.$from_html(hex)}, {$$s: self, $$source_location: ['atome/utilities/color_helper/color/rgb.rb', 633]})
      } catch ($err) {
        if (Opal.rescue($err, [$$('StandardError')])) {
          try {
            if ($truthy(block)) {
              return block.$call()
            } else {
              return self.$raise()
            }
          } finally { Opal.pop_exception($err); }
        } else { throw $err; }
      };
    }, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 632]});
    
    $def(self, '$by_name', function $$by_name(name) {
      var block = $$by_name.$$p || nil, self = this;

      $$by_name.$$p = null;
      
      ;
      return $send(self.$__by_name(), 'fetch', [name.$to_s().$downcase()], block.$to_proc());
    }, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 643]});
    
    $def(self, '$by_css', function $$by_css(name_or_hex) {
      var block = $$by_css.$$p || nil, self = this;

      $$by_css.$$p = null;
      
      ;
      return $send(self, 'by_name', [name_or_hex], function $$20(){var self = $$20.$$s == null ? this : $$20.$$s;

        return $send(self, 'by_hex', [name_or_hex], block.$to_proc())}, {$$s: self, $$source_location: ['atome/utilities/color_helper/color/rgb.rb', 649]});
    }, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 648]});
    return $def(self, '$extract_colors', function $$extract_colors(text, mode) {
      var self = this, regex = nil, $ret_or_1 = nil;

      
      if (mode == null) mode = "both";
      text = text.$downcase();
      regex = ($eqeqeq("name", ($ret_or_1 = mode)) ? ($$('Regexp').$union(self.$__by_name().$keys())) : ($eqeqeq("hex", $ret_or_1) ? ($$('Regexp').$union(self.$__by_hex().$keys())) : ($eqeqeq("both", $ret_or_1) ? ($$('Regexp').$union($rb_plus(self.$__by_hex().$keys(), self.$__by_name().$keys()))) : (nil))));
      return $send(text.$scan(regex), 'map', [], function $$21(match){var self = $$21.$$s == null ? this : $$21.$$s;

        
        if (match == null) match = nil;
        
        switch (mode.valueOf()) {
          case "name":
            return self.$by_name(match)
          case "hex":
            return self.$by_hex(match)
          case "both":
            return self.$by_css(match)
          default:
            return nil
        };}, {$$s: self, $$source_location: ['atome/utilities/color_helper/color/rgb.rb', 664]});
    }, {$$arity: -2, $$source_location: ['atome/utilities/color_helper/color/rgb.rb', 653]});
  })(Opal.get_singleton_class($$$($$('Color'), 'RGB')), $nesting);
  (function(self, $parent_nesting) {
    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    self.$private();
    
    $def(self, '$__named_color', function $$__named_color(mod, rgb, $a) {
      var $post_args, names, self = this, used = nil;

      
      $post_args = $slice(arguments, 2);
      names = $post_args;
      used = $rb_minus(names, $send(mod.$constants(), 'map', [], "to_sym".$to_proc()));
      if ($truthy($rb_lt(used.$length(), names.$length()))) {
        self.$raise($$('ArgumentError'), "" + (names.$join(", ")) + " already defined in " + (mod))
      };
      $send(names, 'each', [], function $$22(n){
        
        if (n == null) n = nil;
        return mod.$const_set(n, rgb);}, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 686]});
      rgb['$names='](names);
      $send(rgb.$names(), 'each', [], function $$23(n){var $b, self = $$23.$$s == null ? this : $$23.$$s;

        
        if (n == null) n = nil;
        return ($b = [n, rgb], $send(self.$__by_name(), '[]=', $b), $b[$b.length - 1]);}, {$$s: self, $$source_location: ['atome/utilities/color_helper/color/rgb.rb', 689]});
      self.$__by_hex()['$[]='](rgb.$hex(), rgb);
      return rgb.$freeze();
    }, {$$arity: -3, $$source_location: ['atome/utilities/color_helper/color/rgb.rb', 680]});
    
    $def(self, '$__by_hex', function $$__by_hex() {
      var self = this, $ret_or_1 = nil;
      if (self.__by_hex == null) self.__by_hex = nil;

      return (self.__by_hex = ($truthy(($ret_or_1 = self.__by_hex)) ? ($ret_or_1) : ((new Map()))))
    }, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 694]});
    
    $def(self, '$__by_name', function $$__by_name() {
      var self = this, $ret_or_1 = nil;
      if (self.__by_name == null) self.__by_name = nil;

      return (self.__by_name = ($truthy(($ret_or_1 = self.__by_name)) ? ($ret_or_1) : ((new Map()))))
    }, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 698]});
    return $def(self, '$html_hexify', function $$html_hexify(hex) {
      var self = this, h = nil;

      
      h = hex.$to_s().$downcase().$scan(/[0-9a-f]/);
      
      switch (h.$size().valueOf()) {
        case 3:
          return $send(h, 'map', [], function $$24(v){
            
            if (v == null) v = nil;
            return $rb_times(v, 2);}, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 707]}).$join()
        case 6:
          return h.$join()
        default:
          return self.$raise($$('ArgumentError'), "Not a supported HTML colour type.")
      };
    }, {$$source_location: ['atome/utilities/color_helper/color/rgb.rb', 702]});
  })(Opal.get_singleton_class($$$($$('Color'), 'RGB')), $nesting);
  return self.$require("atome/utilities/color_helper/color/rgb.rb"+ '/../' + "rgb/colors");
};

Opal.modules["atome/utilities/color_helper/color/cmyk"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $const_set = Opal.const_set, $def = Opal.def, $send = Opal.send, $to_ary = Opal.to_ary, $rb_divide = Opal.rb_divide, $truthy = Opal.truthy, $to_a = Opal.to_a, $rb_times = Opal.rb_times, $rb_minus = Opal.rb_minus, $rb_plus = Opal.rb_plus, $alias = Opal.alias, $return_self = Opal.return_self, $return_ivar = Opal.return_ivar, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('include,to_cmyk,new,to_proc,map,normalize,/,call,%,html,to_rgb,css_rgb,css_rgba,css_hsl,to_hsl,css_hsla,from_fraction,adobe_cmyk_rgb,standard_cmyk_rgb,*,to_f,-,min,+,to_grayscale,cyan,magenta,yellow,black,to_yiq,c,m,y,k,private');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'CMYK');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.c = $proto.m = $proto.y = $proto.k = nil;
    
    self.$include($$('Color'));
    $const_set($nesting[0], 'PDF_FORMAT_STR', "%.3f %.3f %.3f %.3f %s");
    
    $def(self, '$coerce', function $$coerce(other) {
      
      return other.$to_cmyk()
    }, {$$source_location: ['atome/utilities/color_helper/color/cmyk.rb', 14]});
    (function(self, $parent_nesting) {
      
      
      
      $def(self, '$from_fraction', function $$from_fraction(c, m, y, k) {
        var block = $$from_fraction.$$p || nil, self = this;

        $$from_fraction.$$p = null;
        
        ;
        if (c == null) c = 0;
        if (m == null) m = 0;
        if (y == null) y = 0;
        if (k == null) k = 0;
        return $send(self, 'new', [c, m, y, k, 1.0], block.$to_proc());
      }, {$$arity: -1, $$source_location: ['atome/utilities/color_helper/color/cmyk.rb', 22]});
      return $def(self, '$from_percent', function $$from_percent(c, m, y, k) {
        var block = $$from_percent.$$p || nil, self = this;

        $$from_percent.$$p = null;
        
        ;
        if (c == null) c = 0;
        if (m == null) m = 0;
        if (y == null) y = 0;
        if (k == null) k = 0;
        return $send(self, 'new', [c, m, y, k], block.$to_proc());
      }, {$$arity: -1, $$source_location: ['atome/utilities/color_helper/color/cmyk.rb', 30]});
    })(Opal.get_singleton_class(self), $nesting);
    
    $def(self, '$initialize', function $$initialize(c, m, y, k, radix) {
      var block = $$initialize.$$p || nil, $a, $b, self = this;

      $$initialize.$$p = null;
      
      ;
      if (c == null) c = 0;
      if (m == null) m = 0;
      if (y == null) y = 0;
      if (k == null) k = 0;
      if (radix == null) radix = 100.0;
      $b = $send([c, m, y, k], 'map', [], function $$1(v){
        
        if (v == null) v = nil;
        return $$('Color').$normalize($rb_divide(v, radix));}, {$$source_location: ['atome/utilities/color_helper/color/cmyk.rb', 40]}), $a = $to_ary($b), (self.c = ($a[0] == null ? nil : $a[0])), (self.m = ($a[1] == null ? nil : $a[1])), (self.y = ($a[2] == null ? nil : $a[2])), (self.k = ($a[3] == null ? nil : $a[3])), $b;
      if ($truthy(block)) {
        return block.$call(self)
      } else {
        return nil
      };
    }, {$$arity: -1, $$source_location: ['atome/utilities/color_helper/color/cmyk.rb', 39]});
    
    $def(self, '$pdf_fill', function $$pdf_fill() {
      var self = this;

      return $$('PDF_FORMAT_STR')['$%']([self.c, self.m, self.y, self.k, "k"])
    }, {$$source_location: ['atome/utilities/color_helper/color/cmyk.rb', 46]});
    
    $def(self, '$pdf_stroke', function $$pdf_stroke() {
      var self = this;

      return $$('PDF_FORMAT_STR')['$%']([self.c, self.m, self.y, self.k, "K"])
    }, {$$source_location: ['atome/utilities/color_helper/color/cmyk.rb', 52]});
    
    $def(self, '$html', function $$html() {
      var self = this;

      return self.$to_rgb().$html()
    }, {$$source_location: ['atome/utilities/color_helper/color/cmyk.rb', 59]});
    
    $def(self, '$css_rgb', function $$css_rgb() {
      var self = this;

      return self.$to_rgb().$css_rgb()
    }, {$$source_location: ['atome/utilities/color_helper/color/cmyk.rb', 66]});
    
    $def(self, '$css_rgba', function $$css_rgba(alpha) {
      var self = this;

      
      if (alpha == null) alpha = 1;
      return self.$to_rgb().$css_rgba(alpha);
    }, {$$arity: -1, $$source_location: ['atome/utilities/color_helper/color/cmyk.rb', 73]});
    
    $def(self, '$css_hsl', function $$css_hsl() {
      var self = this;

      return self.$to_hsl().$css_hsl()
    }, {$$source_location: ['atome/utilities/color_helper/color/cmyk.rb', 80]});
    
    $def(self, '$css_hsla', function $$css_hsla() {
      var self = this;

      return self.$to_hsl().$css_hsla()
    }, {$$source_location: ['atome/utilities/color_helper/color/cmyk.rb', 87]});
    
    $def(self, '$to_rgb', function $$to_rgb(use_adobe_method) {
      var self = this;

      
      if (use_adobe_method == null) use_adobe_method = false;
      if ($truthy(use_adobe_method)) {
        return $send($$$($$('Color'), 'RGB'), 'from_fraction', $to_a(self.$adobe_cmyk_rgb()))
      } else {
        return $send($$$($$('Color'), 'RGB'), 'from_fraction', $to_a(self.$standard_cmyk_rgb()))
      };
    }, {$$arity: -1, $$source_location: ['atome/utilities/color_helper/color/cmyk.rb', 125]});
    
    $def(self, '$to_grayscale', function $$to_grayscale() {
      var self = this, c = nil, m = nil, y = nil, g = nil;

      
      c = $rb_times(0.299, self.c.$to_f());
      m = $rb_times(0.587, self.m.$to_f());
      y = $rb_times(0.114, self.y.$to_f());
      g = $rb_minus(1.0, [1.0, $rb_plus($rb_plus($rb_plus(c, m), y), self.k)].$min());
      return $$$($$('Color'), 'GrayScale').$from_fraction(g);
    }, {$$source_location: ['atome/utilities/color_helper/color/cmyk.rb', 143]});
    $alias(self, "to_greyscale", "to_grayscale");
    
    $def(self, '$to_cmyk', $return_self, {$$source_location: ['atome/utilities/color_helper/color/cmyk.rb', 152]});
    
    $def(self, '$inspect', function $$inspect() {
      var self = this;

      return "CMYK [%.2f%%, %.2f%%, %.2f%%, %.2f%%]"['$%']([self.$cyan(), self.$magenta(), self.$yellow(), self.$black()])
    }, {$$source_location: ['atome/utilities/color_helper/color/cmyk.rb', 156]});
    
    $def(self, '$to_yiq', function $$to_yiq() {
      var self = this;

      return self.$to_rgb().$to_yiq()
    }, {$$source_location: ['atome/utilities/color_helper/color/cmyk.rb', 161]});
    
    $def(self, '$to_hsl', function $$to_hsl() {
      var self = this;

      return self.$to_rgb().$to_hsl()
    }, {$$source_location: ['atome/utilities/color_helper/color/cmyk.rb', 166]});
    
    $def(self, '$cyan', function $$cyan() {
      var self = this;

      return $rb_times(self.c, 100.0)
    }, {$$source_location: ['atome/utilities/color_helper/color/cmyk.rb', 171]});
    
    $def(self, '$c', $return_ivar("c"), {$$source_location: ['atome/utilities/color_helper/color/cmyk.rb', 176]});
    
    $def(self, '$cyan=', function $CMYK_cyan$eq$2(cc) {
      var self = this;

      return (self.c = $$('Color').$normalize($rb_divide(cc, 100.0)))
    }, {$$source_location: ['atome/utilities/color_helper/color/cmyk.rb', 180]});
    
    $def(self, '$c=', function $CMYK_c$eq$3(cc) {
      var self = this;

      return (self.c = $$('Color').$normalize(cc))
    }, {$$source_location: ['atome/utilities/color_helper/color/cmyk.rb', 185]});
    
    $def(self, '$magenta', function $$magenta() {
      var self = this;

      return $rb_times(self.m, 100.0)
    }, {$$source_location: ['atome/utilities/color_helper/color/cmyk.rb', 191]});
    
    $def(self, '$m', $return_ivar("m"), {$$source_location: ['atome/utilities/color_helper/color/cmyk.rb', 196]});
    
    $def(self, '$magenta=', function $CMYK_magenta$eq$4(mm) {
      var self = this;

      return (self.m = $$('Color').$normalize($rb_divide(mm, 100.0)))
    }, {$$source_location: ['atome/utilities/color_helper/color/cmyk.rb', 200]});
    
    $def(self, '$m=', function $CMYK_m$eq$5(mm) {
      var self = this;

      return (self.m = $$('Color').$normalize(mm))
    }, {$$source_location: ['atome/utilities/color_helper/color/cmyk.rb', 205]});
    
    $def(self, '$yellow', function $$yellow() {
      var self = this;

      return $rb_times(self.y, 100.0)
    }, {$$source_location: ['atome/utilities/color_helper/color/cmyk.rb', 211]});
    
    $def(self, '$y', $return_ivar("y"), {$$source_location: ['atome/utilities/color_helper/color/cmyk.rb', 216]});
    
    $def(self, '$yellow=', function $CMYK_yellow$eq$6(yy) {
      var self = this;

      return (self.y = $$('Color').$normalize($rb_divide(yy, 100.0)))
    }, {$$source_location: ['atome/utilities/color_helper/color/cmyk.rb', 220]});
    
    $def(self, '$y=', function $CMYK_y$eq$7(kk) {
      var self = this;

      return (self.y = $$('Color').$normalize(kk))
    }, {$$source_location: ['atome/utilities/color_helper/color/cmyk.rb', 225]});
    
    $def(self, '$black', function $$black() {
      var self = this;

      return $rb_times(self.k, 100.0)
    }, {$$source_location: ['atome/utilities/color_helper/color/cmyk.rb', 231]});
    
    $def(self, '$k', $return_ivar("k"), {$$source_location: ['atome/utilities/color_helper/color/cmyk.rb', 236]});
    
    $def(self, '$black=', function $CMYK_black$eq$8(kk) {
      var self = this;

      return (self.k = $$('Color').$normalize($rb_divide(kk, 100.0)))
    }, {$$source_location: ['atome/utilities/color_helper/color/cmyk.rb', 240]});
    
    $def(self, '$k=', function $CMYK_k$eq$9(kk) {
      var self = this;

      return (self.k = $$('Color').$normalize(kk))
    }, {$$source_location: ['atome/utilities/color_helper/color/cmyk.rb', 245]});
    
    $def(self, '$to_a', function $$to_a() {
      var self = this;

      return [self.$c(), self.$m(), self.$y(), self.$k()]
    }, {$$source_location: ['atome/utilities/color_helper/color/cmyk.rb', 249]});
    self.$private();
    
    $def(self, '$adobe_cmyk_rgb', function $$adobe_cmyk_rgb() {
      var self = this;

      return $send([self.c, self.m, self.y], 'map', [], function $$10(v){var self = $$10.$$s == null ? this : $$10.$$s;
        if (self.k == null) self.k = nil;

        
        if (v == null) v = nil;
        return $rb_minus(1.0, [1.0, $rb_plus(v, self.k)].$min());}, {$$s: self, $$source_location: ['atome/utilities/color_helper/color/cmyk.rb', 256]})
    }, {$$source_location: ['atome/utilities/color_helper/color/cmyk.rb', 255]});
    return $def(self, '$standard_cmyk_rgb', function $$standard_cmyk_rgb() {
      var self = this;

      return $send([self.c, self.m, self.y], 'map', [], function $$11(v){var self = $$11.$$s == null ? this : $$11.$$s;

        
        if (v == null) v = nil;
        return $rb_minus(1.0, $rb_plus($rb_times(v, $rb_minus(1.0, self.$k())), self.$k()));}, {$$s: self, $$source_location: ['atome/utilities/color_helper/color/cmyk.rb', 261]})
    }, {$$source_location: ['atome/utilities/color_helper/color/cmyk.rb', 260]});
  })($$('Color'), null, $nesting)
};

Opal.modules["atome/utilities/color_helper/color/grayscale"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $const_set = Opal.const_set, $send = Opal.send, $def = Opal.def, $rb_divide = Opal.rb_divide, $truthy = Opal.truthy, $rb_times = Opal.rb_times, $rb_minus = Opal.rb_minus, $return_self = Opal.return_self, $alias = Opal.alias, $rb_plus = Opal.rb_plus, $return_ivar = Opal.return_ivar, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('include,new,to_proc,normalize,/,call,to_grayscale,%,min,round,*,private,to_255,gray,css_hsl,to_hsl,css_hsla,-,to_f,from_fraction,g,+,max,gray=,class,-@,dup,instance_variable_set');
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'GrayScale');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.g = nil;
    
    self.$include($$('Color'));
    $const_set($nesting[0], 'PDF_FORMAT_STR', "%.3f %s");
    (function(self, $parent_nesting) {
      
      
      
      $def(self, '$from_fraction', function $$from_fraction(g) {
        var block = $$from_fraction.$$p || nil, self = this;

        $$from_fraction.$$p = null;
        
        ;
        if (g == null) g = 0;
        return $send(self, 'new', [g, 1.0], block.$to_proc());
      }, {$$arity: -1, $$source_location: ['atome/utilities/color_helper/color/grayscale.rb', 15]});
      return $def(self, '$from_percent', function $$from_percent(g) {
        var block = $$from_percent.$$p || nil, self = this;

        $$from_percent.$$p = null;
        
        ;
        if (g == null) g = 0;
        return $send(self, 'new', [g], block.$to_proc());
      }, {$$arity: -1, $$source_location: ['atome/utilities/color_helper/color/grayscale.rb', 22]});
    })(Opal.get_singleton_class(self), $nesting);
    
    $def(self, '$initialize', function $$initialize(g, radix) {
      var block = $$initialize.$$p || nil, self = this;

      $$initialize.$$p = null;
      
      ;
      if (g == null) g = 0;
      if (radix == null) radix = 100.0;
      self.g = $$('Color').$normalize($rb_divide(g, radix));
      if ($truthy(block)) {
        return block.$call()
      } else {
        return nil
      };
    }, {$$arity: -1, $$source_location: ['atome/utilities/color_helper/color/grayscale.rb', 30]});
    
    $def(self, '$coerce', function $$coerce(other) {
      
      return other.$to_grayscale()
    }, {$$source_location: ['atome/utilities/color_helper/color/grayscale.rb', 36]});
    
    $def(self, '$pdf_fill', function $$pdf_fill() {
      var self = this;

      return $$('PDF_FORMAT_STR')['$%']([self.g, "g"])
    }, {$$source_location: ['atome/utilities/color_helper/color/grayscale.rb', 42]});
    
    $def(self, '$pdf_stroke', function $$pdf_stroke() {
      var self = this;

      return $$('PDF_FORMAT_STR')['$%']([self.g, "G"])
    }, {$$source_location: ['atome/utilities/color_helper/color/grayscale.rb', 48]});
    
    $def(self, '$to_255', function $$to_255() {
      var self = this;

      return [$rb_times(self.g, 255).$round(), 255].$min()
    }, {$$source_location: ['atome/utilities/color_helper/color/grayscale.rb', 52]});
    self.$private("to_255");
    
    $def(self, '$html', function $$html() {
      var self = this, gs = nil;

      
      gs = "%02x"['$%'](self.$to_255());
      return "#" + ($rb_times(gs, 3));
    }, {$$source_location: ['atome/utilities/color_helper/color/grayscale.rb', 58]});
    
    $def(self, '$css_rgb', function $$css_rgb() {
      var self = this;

      return "rgb(%3.2f%%, %3.2f%%, %3.2f%%)"['$%']([self.$gray(), self.$gray(), self.$gray()])
    }, {$$source_location: ['atome/utilities/color_helper/color/grayscale.rb', 65]});
    
    $def(self, '$css_rgba', function $$css_rgba(alpha) {
      var self = this;

      
      if (alpha == null) alpha = 1;
      return "rgba(%3.2f%%, %3.2f%%, %3.2f%%, %1.2f)"['$%']([self.$gray(), self.$gray(), self.$gray(), alpha]);
    }, {$$arity: -1, $$source_location: ['atome/utilities/color_helper/color/grayscale.rb', 71]});
    
    $def(self, '$css_hsl', function $$css_hsl() {
      var self = this;

      return self.$to_hsl().$css_hsl()
    }, {$$source_location: ['atome/utilities/color_helper/color/grayscale.rb', 77]});
    
    $def(self, '$css_hsla', function $$css_hsla() {
      var self = this;

      return self.$to_hsl().$css_hsla()
    }, {$$source_location: ['atome/utilities/color_helper/color/grayscale.rb', 84]});
    
    $def(self, '$to_cmyk', function $$to_cmyk() {
      var self = this, k = nil;

      
      k = $rb_minus(1.0, self.g.$to_f());
      return $$$($$('Color'), 'CMYK').$from_fraction(0, 0, 0, k);
    }, {$$source_location: ['atome/utilities/color_helper/color/grayscale.rb', 89]});
    
    $def(self, '$to_rgb', function $$to_rgb(ignored) {
      var self = this;

      
      if (ignored == null) ignored = true;
      return $$$($$('Color'), 'RGB').$from_fraction(self.$g(), self.$g(), self.$g());
    }, {$$arity: -1, $$source_location: ['atome/utilities/color_helper/color/grayscale.rb', 95]});
    
    $def(self, '$to_grayscale', $return_self, {$$source_location: ['atome/utilities/color_helper/color/grayscale.rb', 100]});
    $alias(self, "to_greyscale", "to_grayscale");
    
    $def(self, '$lighten_by', function $$lighten_by(percent) {
      var self = this, g = nil;

      
      g = [$rb_plus(self.g, $rb_times(self.g, $rb_divide(percent, 100.0))), 1.0].$min();
      return $$$($$('Color'), 'GrayScale').$from_fraction(g);
    }, {$$source_location: ['atome/utilities/color_helper/color/grayscale.rb', 106]});
    
    $def(self, '$darken_by', function $$darken_by(percent) {
      var self = this, g = nil;

      
      g = [$rb_minus(self.g, $rb_times(self.g, $rb_divide(percent, 100.0))), 0.0].$max();
      return $$$($$('Color'), 'GrayScale').$from_fraction(g);
    }, {$$source_location: ['atome/utilities/color_helper/color/grayscale.rb', 112]});
    
    $def(self, '$to_yiq', function $$to_yiq() {
      var self = this, y = nil, i = nil, q = nil;

      
      y = self.g;
      i = $rb_plus($rb_plus($rb_times(self.g, 0.596), $rb_times(self.g, -0.275)), $rb_times(self.g, -0.321));
      q = $rb_plus($rb_plus($rb_times(self.g, 0.212), $rb_times(self.g, -0.523)), $rb_times(self.g, 0.311));
      return $$$($$('Color'), 'YIQ').$from_fraction(y, i, q);
    }, {$$source_location: ['atome/utilities/color_helper/color/grayscale.rb', 121]});
    
    $def(self, '$to_hsl', function $$to_hsl() {
      var self = this;

      return $$$($$('Color'), 'HSL').$from_fraction(0, 0, self.g)
    }, {$$source_location: ['atome/utilities/color_helper/color/grayscale.rb', 129]});
    
    $def(self, '$brightness', $return_ivar("g"), {$$source_location: ['atome/utilities/color_helper/color/grayscale.rb', 135]});
    
    $def(self, '$gray', function $$gray() {
      var self = this;

      return $rb_times(self.g, 100.0)
    }, {$$source_location: ['atome/utilities/color_helper/color/grayscale.rb', 141]});
    $alias(self, "grey", "gray");
    
    $def(self, '$g', $return_ivar("g"), {$$source_location: ['atome/utilities/color_helper/color/grayscale.rb', 147]});
    
    $def(self, '$gray=', function $GrayScale_gray$eq$1(gg) {
      var self = this;

      return (self.g = $$('Color').$normalize($rb_divide(gg, 100.0)))
    }, {$$source_location: ['atome/utilities/color_helper/color/grayscale.rb', 151]});
    $alias(self, "grey=", "gray=");
    
    $def(self, '$g=', function $GrayScale_g$eq$2(gg) {
      var self = this;

      return (self.g = $$('Color').$normalize(gg))
    }, {$$source_location: ['atome/utilities/color_helper/color/grayscale.rb', 157]});
    
    $def(self, '$+', function $GrayScale_$plus$3(other) {
      var self = this;

      return self.$class().$from_fraction($rb_plus(self.$g(), other.$to_grayscale().$g()))
    }, {$$source_location: ['atome/utilities/color_helper/color/grayscale.rb', 167]});
    
    $def(self, '$-', function $GrayScale_$minus$4(other) {
      var self = this;

      return $rb_plus(self, other['$-@']())
    }, {$$source_location: ['atome/utilities/color_helper/color/grayscale.rb', 177]});
    
    $def(self, '$inspect', function $$inspect() {
      var self = this;

      return "Gray [%.2f%%]"['$%']([self.$gray()])
    }, {$$source_location: ['atome/utilities/color_helper/color/grayscale.rb', 181]});
    
    $def(self, '$to_a', function $$to_a() {
      var self = this;

      return [self.$g()]
    }, {$$source_location: ['atome/utilities/color_helper/color/grayscale.rb', 185]});
    return $def(self, '$-@', function $GrayScale_$minus$$5() {
      var self = this, gs = nil;

      
      gs = self.$dup();
      gs.$instance_variable_set("@g", self.$g()['$-@']());
      return gs;
    }, {$$source_location: ['atome/utilities/color_helper/color/grayscale.rb', 189]});
  })($$('Color'), null, $nesting);
  return $const_set($$('Color'), 'GreyScale', $$$($$('Color'), 'GrayScale'));
};

Opal.modules["atome/utilities/color_helper/color/hsl"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $send = Opal.send, $def = Opal.def, $rb_divide = Opal.rb_divide, $truthy = Opal.truthy, $slice = Opal.slice, $to_a = Opal.to_a, $rb_plus = Opal.rb_plus, $return_ivar = Opal.return_ivar, $alias = Opal.alias, $rb_times = Opal.rb_times, $rb_lt = Opal.rb_lt, $rb_gt = Opal.rb_gt, $rb_minus = Opal.rb_minus, $return_self = Opal.return_self, $to_ary = Opal.to_ary, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('include,new,to_proc,to_hsl,normalize,/,call,html,to_rgb,css_rgb,css_rgba,%,hue,saturation,luminosity,near_zero_or_less?,l,near_one_or_more?,near_zero?,s,from_grayscale_fraction,+,compute_fvd_rgb,to_yiq,to_cmyk,from_fraction,to_greyscale,*,<,>,-,luminosity=,map,zip,to_a,coerce,class,h,private,fvd_mix_sat_lum,hue_to_rgb,rotate_hue,to_f');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'HSL');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.l = $proto.h = $proto.s = nil;
    
    self.$include($$('Color'));
    (function(self, $parent_nesting) {
      
      return $def(self, '$from_fraction', function $$from_fraction(h, s, l) {
        var block = $$from_fraction.$$p || nil, self = this;

        $$from_fraction.$$p = null;
        
        ;
        if (h == null) h = 0.0;
        if (s == null) s = 0.0;
        if (l == null) l = 0.0;
        return $send(self, 'new', [h, s, l, 1.0, 1.0], block.$to_proc());
      }, {$$arity: -1, $$source_location: ['atome/utilities/color_helper/color/hsl.rb', 11]})
    })(Opal.get_singleton_class(self), $nesting);
    
    $def(self, '$coerce', function $$coerce(other) {
      
      return other.$to_hsl()
    }, {$$source_location: ['atome/utilities/color_helper/color/hsl.rb', 17]});
    
    $def(self, '$initialize', function $$initialize(h, s, l, radix1, radix2) {
      var block = $$initialize.$$p || nil, self = this;

      $$initialize.$$p = null;
      
      ;
      if (h == null) h = 0;
      if (s == null) s = 0;
      if (l == null) l = 0;
      if (radix1 == null) radix1 = 360.0;
      if (radix2 == null) radix2 = 100.0;
      self.h = $$('Color').$normalize($rb_divide(h, radix1));
      self.s = $$('Color').$normalize($rb_divide(s, radix2));
      self.l = $$('Color').$normalize($rb_divide(l, radix2));
      if ($truthy(block)) {
        return block.$call()
      } else {
        return nil
      };
    }, {$$arity: -1, $$source_location: ['atome/utilities/color_helper/color/hsl.rb', 23]});
    
    $def(self, '$html', function $$html() {
      var self = this;

      return self.$to_rgb().$html()
    }, {$$source_location: ['atome/utilities/color_helper/color/hsl.rb', 31]});
    
    $def(self, '$css_rgb', function $$css_rgb() {
      var self = this;

      return self.$to_rgb().$css_rgb()
    }, {$$source_location: ['atome/utilities/color_helper/color/hsl.rb', 38]});
    
    $def(self, '$css_rgba', function $$css_rgba(alpha) {
      var self = this;

      
      if (alpha == null) alpha = 1;
      return self.$to_rgb().$css_rgba(alpha);
    }, {$$arity: -1, $$source_location: ['atome/utilities/color_helper/color/hsl.rb', 45]});
    
    $def(self, '$css_hsl', function $$css_hsl() {
      var self = this;

      return "hsl(%3.2f, %3.2f%%, %3.2f%%)"['$%']([self.$hue(), self.$saturation(), self.$luminosity()])
    }, {$$source_location: ['atome/utilities/color_helper/color/hsl.rb', 51]});
    
    $def(self, '$css_hsla', function $$css_hsla() {
      var self = this;

      return "hsla(%3.2f, %3.2f%%, %3.2f%%, %3.2f)"['$%']([self.$hue(), self.$saturation(), self.$luminosity(), 1])
    }, {$$source_location: ['atome/utilities/color_helper/color/hsl.rb', 57]});
    
    $def(self, '$to_rgb', function $$to_rgb($a) {
      var $post_args, $fwd_rest, self = this;

      
      $post_args = $slice(arguments);
      $fwd_rest = $post_args;
      if ($truthy($$('Color')['$near_zero_or_less?'](self.$l()))) {
        return $$$($$$($$('Color'), 'RGB'), 'Black')
      } else if ($truthy($$('Color')['$near_one_or_more?'](self.$l()))) {
        return $$$($$$($$('Color'), 'RGB'), 'White')
      } else if ($truthy($$('Color')['$near_zero?'](self.$s()))) {
        return $$$($$('Color'), 'RGB').$from_grayscale_fraction(self.$l())
      } else {
        return $send($$$($$('Color'), 'RGB'), 'new', $to_a($rb_plus(self.$compute_fvd_rgb(), [1.0])))
      };
    }, {$$arity: -1, $$source_location: ['atome/utilities/color_helper/color/hsl.rb', 73]});
    
    $def(self, '$to_yiq', function $$to_yiq() {
      var self = this;

      return self.$to_rgb().$to_yiq()
    }, {$$source_location: ['atome/utilities/color_helper/color/hsl.rb', 88]});
    
    $def(self, '$to_cmyk', function $$to_cmyk() {
      var self = this;

      return self.$to_rgb().$to_cmyk()
    }, {$$source_location: ['atome/utilities/color_helper/color/hsl.rb', 93]});
    
    $def(self, '$brightness', $return_ivar("l"), {$$source_location: ['atome/utilities/color_helper/color/hsl.rb', 98]});
    
    $def(self, '$to_greyscale', function $$to_greyscale() {
      var self = this;

      return $$$($$('Color'), 'GrayScale').$from_fraction(self.l)
    }, {$$source_location: ['atome/utilities/color_helper/color/hsl.rb', 101]});
    $alias(self, "to_grayscale", "to_greyscale");
    
    $def(self, '$hue', function $$hue() {
      var self = this;

      return $rb_times(self.h, 360.0)
    }, {$$source_location: ['atome/utilities/color_helper/color/hsl.rb', 107]});
    
    $def(self, '$h', $return_ivar("h"), {$$source_location: ['atome/utilities/color_helper/color/hsl.rb', 111]});
    
    $def(self, '$hue=', function $HSL_hue$eq$1(hh) {
      var self = this;

      
      hh = $rb_divide(hh, 360.0);
      if ($truthy($rb_lt(hh, 0.0))) {
        hh = $rb_plus(hh, 1.0)
      };
      if ($truthy($rb_gt(hh, 1.0))) {
        hh = $rb_minus(hh, 1.0)
      };
      return (self.h = $$('Color').$normalize(hh));
    }, {$$source_location: ['atome/utilities/color_helper/color/hsl.rb', 116]});
    
    $def(self, '$h=', function $HSL_h$eq$2(hh) {
      var self = this;

      return (self.h = $$('Color').$normalize(hh))
    }, {$$source_location: ['atome/utilities/color_helper/color/hsl.rb', 125]});
    
    $def(self, '$saturation', function $$saturation() {
      var self = this;

      return $rb_times(self.s, 100.0)
    }, {$$source_location: ['atome/utilities/color_helper/color/hsl.rb', 129]});
    
    $def(self, '$s', $return_ivar("s"), {$$source_location: ['atome/utilities/color_helper/color/hsl.rb', 133]});
    
    $def(self, '$saturation=', function $HSL_saturation$eq$3(ss) {
      var self = this;

      return (self.s = $$('Color').$normalize($rb_divide(ss, 100.0)))
    }, {$$source_location: ['atome/utilities/color_helper/color/hsl.rb', 137]});
    
    $def(self, '$s=', function $HSL_s$eq$4(ss) {
      var self = this;

      return (self.s = $$('Color').$normalize(ss))
    }, {$$source_location: ['atome/utilities/color_helper/color/hsl.rb', 141]});
    
    $def(self, '$luminosity', function $$luminosity() {
      var self = this;

      return $rb_times(self.l, 100.0)
    }, {$$source_location: ['atome/utilities/color_helper/color/hsl.rb', 146]});
    $alias(self, "lightness", "luminosity");
    
    $def(self, '$l', $return_ivar("l"), {$$source_location: ['atome/utilities/color_helper/color/hsl.rb', 151]});
    
    $def(self, '$luminosity=', function $HSL_luminosity$eq$5(ll) {
      var self = this;

      return (self.l = $$('Color').$normalize($rb_divide(ll, 100.0)))
    }, {$$source_location: ['atome/utilities/color_helper/color/hsl.rb', 155]});
    $alias(self, "lightness=", "luminosity=");
    
    $def(self, '$l=', function $HSL_l$eq$6(ll) {
      var self = this;

      return (self.l = $$('Color').$normalize(ll))
    }, {$$source_location: ['atome/utilities/color_helper/color/hsl.rb', 160]});
    
    $def(self, '$to_hsl', $return_self, {$$source_location: ['atome/utilities/color_helper/color/hsl.rb', 164]});
    
    $def(self, '$inspect', function $$inspect() {
      var self = this;

      return "HSL [%.2f deg, %.2f%%, %.2f%%]"['$%']([self.$hue(), self.$saturation(), self.$luminosity()])
    }, {$$source_location: ['atome/utilities/color_helper/color/hsl.rb', 168]});
    
    $def(self, '$mix_with', function $$mix_with(color, mix_percent) {
      var self = this, v = nil;

      
      if (mix_percent == null) mix_percent = 0.5;
      v = $send(self.$to_a().$zip(self.$coerce(color).$to_a()), 'map', [], function $$7($mlhs_tmp1){var $a, $b, x = nil, y = nil;

        
        if ($mlhs_tmp1 == null) $mlhs_tmp1 = nil;
        $b = $mlhs_tmp1, $a = $to_ary($b), (x = ($a[0] == null ? nil : $a[0])), (y = ($a[1] == null ? nil : $a[1])), $b;
        return $rb_plus($rb_times($rb_minus(y, x), mix_percent), x);}, {$$source_location: ['atome/utilities/color_helper/color/hsl.rb', 177], $$has_top_level_mlhs_arg: true});
      return $send(self.$class(), 'from_fraction', $to_a(v));
    }, {$$arity: -2, $$source_location: ['atome/utilities/color_helper/color/hsl.rb', 176]});
    
    $def(self, '$to_a', function $$to_a() {
      var self = this;

      return [self.$h(), self.$s(), self.$l()]
    }, {$$source_location: ['atome/utilities/color_helper/color/hsl.rb', 183]});
    self.$private();
    
    $def(self, '$compute_fvd_rgb', function $$compute_fvd_rgb() {
      var $a, $b, self = this, t1 = nil, t2 = nil;

      
      $b = self.$fvd_mix_sat_lum(), $a = $to_ary($b), (t1 = ($a[0] == null ? nil : $a[0])), (t2 = ($a[1] == null ? nil : $a[1])), $b;
      return $send([$rb_plus(self.$h(), $rb_divide(1, 3.0)), self.$h(), $rb_minus(self.$h(), $rb_divide(1, 3.0))], 'map', [], function $$8(v){var self = $$8.$$s == null ? this : $$8.$$s;

        
        if (v == null) v = nil;
        return self.$hue_to_rgb(self.$rotate_hue(v), t1, t2);}, {$$s: self, $$source_location: ['atome/utilities/color_helper/color/hsl.rb', 196]});
    }, {$$source_location: ['atome/utilities/color_helper/color/hsl.rb', 194]});
    
    $def(self, '$fvd_mix_sat_lum', function $$fvd_mix_sat_lum() {
      var self = this, t = nil;

      
      t = ($truthy($$('Color')['$near_zero_or_less?']($rb_minus(self.$l(), 0.5))) ? ($rb_times(self.$l(), $rb_plus(1.0, self.$s().$to_f()))) : ($rb_minus($rb_plus(self.$l(), self.$s()), $rb_times(self.$l(), self.$s().$to_f()))));
      return [$rb_minus($rb_times(2.0, self.$l()), t), t];
    }, {$$source_location: ['atome/utilities/color_helper/color/hsl.rb', 203]});
    
    $def(self, '$rotate_hue', function $$rotate_hue(h) {
      
      
      if ($truthy($$('Color')['$near_zero_or_less?'](h))) {
        h = $rb_plus(h, 1.0)
      };
      if ($truthy($$('Color')['$near_one_or_more?'](h))) {
        h = $rb_minus(h, 1.0)
      };
      return h;
    }, {$$source_location: ['atome/utilities/color_helper/color/hsl.rb', 215]});
    return $def(self, '$hue_to_rgb', function $$hue_to_rgb(h, t1, t2) {
      
      if ($truthy($$('Color')['$near_zero_or_less?']($rb_minus($rb_times(6.0, h), 1.0)))) {
        return $rb_plus(t1, $rb_times($rb_times($rb_minus(t2, t1), h), 6.0))
      } else if ($truthy($$('Color')['$near_zero_or_less?']($rb_minus($rb_times(2.0, h), 1.0)))) {
        return t2
      } else if ($truthy($$('Color')['$near_zero_or_less?']($rb_minus($rb_times(3.0, h), 2.0)))) {
        return $rb_plus(t1, $rb_times($rb_times($rb_minus(t2, t1), $rb_minus($rb_divide(2, 3.0), h)), 6.0))
      } else {
        return t1
      }
    }, {$$source_location: ['atome/utilities/color_helper/color/hsl.rb', 229]});
  })($$('Color'), null, $nesting)
};

Opal.modules["atome/utilities/color_helper/color/yiq"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $send = Opal.send, $defs = Opal.defs, $to_ary = Opal.to_ary, $rb_divide = Opal.rb_divide, $truthy = Opal.truthy, $def = Opal.def, $return_self = Opal.return_self, $return_ivar = Opal.return_ivar, $alias = Opal.alias, $rb_times = Opal.rb_times, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('include,new,to_proc,map,normalize,/,call,to_yiq,to_grayscale,%,*,y,i,q');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'YIQ');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.y = $proto.i = $proto.q = nil;
    
    self.$include($$('Color'));
    $defs(self, '$from_fraction', function $$from_fraction(y, i, q) {
      var block = $$from_fraction.$$p || nil, self = this;

      $$from_fraction.$$p = null;
      
      ;
      if (y == null) y = 0;
      if (i == null) i = 0;
      if (q == null) q = 0;
      return $send(self, 'new', [y, i, q, 1.0], block.$to_proc());
    }, {$$arity: -1, $$source_location: ['atome/utilities/color_helper/color/yiq.rb', 8]});
    
    $def(self, '$initialize', function $$initialize(y, i, q, radix) {
      var block = $$initialize.$$p || nil, $a, $b, self = this;

      $$initialize.$$p = null;
      
      ;
      if (y == null) y = 0;
      if (i == null) i = 0;
      if (q == null) q = 0;
      if (radix == null) radix = 100.0;
      $b = $send([y, i, q], 'map', [], function $$1(v){
        
        if (v == null) v = nil;
        return $$('Color').$normalize($rb_divide(v, radix));}, {$$source_location: ['atome/utilities/color_helper/color/yiq.rb', 16]}), $a = $to_ary($b), (self.y = ($a[0] == null ? nil : $a[0])), (self.i = ($a[1] == null ? nil : $a[1])), (self.q = ($a[2] == null ? nil : $a[2])), $b;
      if ($truthy(block)) {
        return block.$call()
      } else {
        return nil
      };
    }, {$$arity: -1, $$source_location: ['atome/utilities/color_helper/color/yiq.rb', 15]});
    
    $def(self, '$coerce', function $$coerce(other) {
      
      return other.$to_yiq()
    }, {$$source_location: ['atome/utilities/color_helper/color/yiq.rb', 20]});
    
    $def(self, '$to_yiq', $return_self, {$$source_location: ['atome/utilities/color_helper/color/yiq.rb', 24]});
    
    $def(self, '$brightness', $return_ivar("y"), {$$source_location: ['atome/utilities/color_helper/color/yiq.rb', 28]});
    
    $def(self, '$to_grayscale', function $$to_grayscale() {
      var self = this;

      return $$$($$('Color'), 'GrayScale').$new(self.y)
    }, {$$source_location: ['atome/utilities/color_helper/color/yiq.rb', 31]});
    $alias(self, "to_greyscale", "to_grayscale");
    
    $def(self, '$y', $return_ivar("y"), {$$source_location: ['atome/utilities/color_helper/color/yiq.rb', 36]});
    
    $def(self, '$y=', function $YIQ_y$eq$2(yy) {
      var self = this;

      return (self.y = $$('Color').$normalize(yy))
    }, {$$source_location: ['atome/utilities/color_helper/color/yiq.rb', 39]});
    
    $def(self, '$i', $return_ivar("i"), {$$source_location: ['atome/utilities/color_helper/color/yiq.rb', 42]});
    
    $def(self, '$i=', function $YIQ_i$eq$3(ii) {
      var self = this;

      return (self.i = $$('Color').$normalize(ii))
    }, {$$source_location: ['atome/utilities/color_helper/color/yiq.rb', 45]});
    
    $def(self, '$q', $return_ivar("q"), {$$source_location: ['atome/utilities/color_helper/color/yiq.rb', 48]});
    
    $def(self, '$q=', function $YIQ_q$eq$4(qq) {
      var self = this;

      return (self.q = $$('Color').$normalize(qq))
    }, {$$source_location: ['atome/utilities/color_helper/color/yiq.rb', 51]});
    
    $def(self, '$inspect', function $$inspect() {
      var self = this;

      return "YIQ [%.2f%%, %.2f%%, %.2f%%]"['$%']([$rb_times(self.y, 100), $rb_times(self.i, 100), $rb_times(self.q, 100)])
    }, {$$source_location: ['atome/utilities/color_helper/color/yiq.rb', 55]});
    return $def(self, '$to_a', function $$to_a() {
      var self = this;

      return [self.$y(), self.$i(), self.$q()]
    }, {$$source_location: ['atome/utilities/color_helper/color/yiq.rb', 59]});
  })($$('Color'), null, $nesting)
};

Opal.modules["atome/utilities/color_helper/color/css"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $module = Opal.module, $send = Opal.send, $return_val = Opal.return_val, $defs = Opal.defs, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('by_name');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'CSS');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    return $defs(self, '$[]', function $CSS_$$$1(name) {
      
      return $send($$$($$('Color'), 'RGB'), 'by_name', [name], $return_val(nil), {$$source_location: ['atome/utilities/color_helper/color/css.rb', 5]})
    }, {$$source_location: ['atome/utilities/color_helper/color/css.rb', 4]})
  })($$('Color'), $nesting)
};

Opal.modules["atome/utilities/color_helper/color"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $module = Opal.module, $const_set = Opal.const_set, $klass = Opal.klass, $def = Opal.def, $truthy = Opal.truthy, $send = Opal.send, $rb_le = Opal.rb_le, $rb_lt = Opal.rb_lt, $rb_minus = Opal.rb_minus, $rb_gt = Opal.rb_gt, $to_ary = Opal.to_ary, $alias = Opal.alias, $rb_ge = Opal.rb_ge, $range = Opal.range, $send2 = Opal.send2, $find_super = Opal.find_super, $eqeqeq = Opal.eqeqeq, $to_a = Opal.to_a, $eqeq = Opal.eqeq, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('equivalent?,first,names,names=,uniq,sort,map,compact,flatten,Array,to_proc,alias_method,<=,abs,<,near_zero?,-,>,near_one?,kind_of?,all?,zip,to_a,coerce,near?,near_zero_or_less?,near_one_or_more?,normalize,end,begin,>=,to_i,normalize_to_range,normalize_byte,normalize_word,warn,const_defined?,const_get,upcase,to_s,===,new,==,size,from_html,to_hsl');
  
  (function($base, $parent_nesting) {
    var self = $module($base, 'Color');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    $const_set($nesting[0], 'COLOR_VERSION', "1.8");
    $klass($nesting[0], null, 'RGB');
    $klass($nesting[0], null, 'CMYK');
    $klass($nesting[0], null, 'HSL');
    $klass($nesting[0], null, 'GrayScale');
    $klass($nesting[0], null, 'YIQ');
    $const_set($nesting[0], 'COLOR_EPSILON', 1.0e-05);
    $const_set($nesting[0], 'COLOR_TOLERANCE', 0.0001);
    
    $def(self, '$==', function $Color_$eq_eq$1(other) {
      var self = this;

      return $$('Color')['$equivalent?'](self, other)
    }, {$$source_location: ['atome/utilities/color_helper/color.rb', 38]});
    
    $def(self, '$name', function $$name() {
      var self = this;

      return self.$names().$first()
    }, {$$source_location: ['atome/utilities/color_helper/color.rb', 43]});
    
    $def(self, '$names', function $$names() {
      var $a, self = this;
      if (self.names == null) self.names = nil;

      
      if (!$truthy((($a = self['names'], $a != null && $a !== nil) ? 'instance-variable' : nil))) {
        self['$names='](nil)
      };
      return self.names;
    }, {$$source_location: ['atome/utilities/color_helper/color.rb', 48]});
    
    $def(self, '$names=', function $Color_names$eq$2(n) {
      var self = this;

      return (self.names = $send($send(self.$Array(n).$flatten().$compact(), 'map', [], "to_s".$to_proc()), 'map', [], "downcase".$to_proc()).$sort().$uniq())
    }, {$$source_location: ['atome/utilities/color_helper/color.rb', 53]});
    return self.$alias_method("name=", "names=");
  })($nesting[0], $nesting);
  (function(self, $parent_nesting) {
    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    
    $def(self, '$near_zero?', function $near_zero$ques$3(value) {
      
      return $rb_le(value.$abs(), $$$($$('Color'), 'COLOR_EPSILON'))
    }, {$$source_location: ['atome/utilities/color_helper/color.rb', 63]});
    
    $def(self, '$near_zero_or_less?', function $near_zero_or_less$ques$4(value) {
      var self = this, $ret_or_1 = nil;

      if ($truthy(($ret_or_1 = $rb_lt(value, 0.0)))) {
        return $ret_or_1
      } else {
        return self['$near_zero?'](value)
      }
    }, {$$source_location: ['atome/utilities/color_helper/color.rb', 69]});
    
    $def(self, '$near_one?', function $near_one$ques$5(value) {
      var self = this;

      return self['$near_zero?']($rb_minus(value, 1.0))
    }, {$$source_location: ['atome/utilities/color_helper/color.rb', 74]});
    
    $def(self, '$near_one_or_more?', function $near_one_or_more$ques$6(value) {
      var self = this, $ret_or_1 = nil;

      if ($truthy(($ret_or_1 = $rb_gt(value, 1.0)))) {
        return $ret_or_1
      } else {
        return self['$near_one?'](value)
      }
    }, {$$source_location: ['atome/utilities/color_helper/color.rb', 80]});
    
    $def(self, '$near?', function $near$ques$7(x, y) {
      
      return $rb_le($rb_minus(x, y).$abs(), $$$($$('Color'), 'COLOR_TOLERANCE'))
    }, {$$source_location: ['atome/utilities/color_helper/color.rb', 85]});
    
    $def(self, '$equivalent?', function $equivalent$ques$8(a, b) {
      var self = this;

      
      if (!($truthy(a['$kind_of?']($$('Color'))) && ($truthy(b['$kind_of?']($$('Color')))))) {
        return false
      };
      return $send(a.$to_a().$zip(a.$coerce(b).$to_a()), 'all?', [], function $$9($mlhs_tmp1){var $a, $b, self = $$9.$$s == null ? this : $$9.$$s, x = nil, y = nil;

        
        if ($mlhs_tmp1 == null) $mlhs_tmp1 = nil;
        $b = $mlhs_tmp1, $a = $to_ary($b), (x = ($a[0] == null ? nil : $a[0])), (y = ($a[1] == null ? nil : $a[1])), $b;
        return self['$near?'](x, y);}, {$$s: self, $$source_location: ['atome/utilities/color_helper/color.rb', 94], $$has_top_level_mlhs_arg: true});
    }, {$$source_location: ['atome/utilities/color_helper/color.rb', 92]});
    
    $def(self, '$coerce', function $$coerce(a, b) {
      
      return a.$coerce(b)
    }, {$$source_location: ['atome/utilities/color_helper/color.rb', 100]});
    
    $def(self, '$normalize', function $$normalize(value) {
      var self = this;

      if ($truthy(self['$near_zero_or_less?'](value))) {
        return 0.0
      } else if ($truthy(self['$near_one_or_more?'](value))) {
        return 1.0
      } else {
        return value
      }
    }, {$$source_location: ['atome/utilities/color_helper/color.rb', 105]});
    $alias(self, "normalize_fractional", "normalize");
    
    $def(self, '$normalize_to_range', function $$normalize_to_range(value, range) {
      
      
      if ($truthy($rb_lt(range.$end(), range.$begin()))) {
        range = Opal.Range.$new(range.$end(), range.$begin(), false)
      };
      if ($truthy($rb_le(value, range.$begin()))) {
        return range.$begin()
      } else if ($truthy($rb_ge(value, range.$end()))) {
        return range.$end()
      } else {
        return value
      };
    }, {$$source_location: ['atome/utilities/color_helper/color.rb', 118]});
    
    $def(self, '$normalize_byte', function $$normalize_byte(value) {
      var self = this;

      return self.$normalize_to_range(value, $range(0, 255, false)).$to_i()
    }, {$$source_location: ['atome/utilities/color_helper/color.rb', 131]});
    $alias(self, "normalize_8bit", "normalize_byte");
    
    $def(self, '$normalize_word', function $$normalize_word(value) {
      var self = this;

      return self.$normalize_to_range(value, $range(0, 65535, false)).$to_i()
    }, {$$source_location: ['atome/utilities/color_helper/color.rb', 138]});
    return $alias(self, "normalize_16bit", "normalize_word");
  })(Opal.get_singleton_class($$('Color')), $nesting);
  self.$require("atome/utilities/color_helper/color.rb"+ '/../' + "color/rgb");
  self.$require("atome/utilities/color_helper/color.rb"+ '/../' + "color/cmyk");
  self.$require("atome/utilities/color_helper/color.rb"+ '/../' + "color/grayscale");
  self.$require("atome/utilities/color_helper/color.rb"+ '/../' + "color/hsl");
  self.$require("atome/utilities/color_helper/color.rb"+ '/../' + "color/yiq");
  self.$require("atome/utilities/color_helper/color.rb"+ '/../' + "color/css");
  return (function(self, $parent_nesting) {
    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    
    $def(self, '$const_missing', function $$const_missing(name) {
      var $yield = $$const_missing.$$p || nil, self = this;

      $$const_missing.$$p = null;
      
      switch (name.valueOf()) {
        case "VERSION":
        case "VERSION":
        case "COLOR_TOOLS_VERSION":
        case "COLOR_TOOLS_VERSION":
          
          self.$warn("Color::" + (name) + " has been deprecated. Use Color::COLOR_VERSION instead.");
          return $$$($$('Color'), 'COLOR_VERSION');
        default:
          if ($truthy($$$($$('Color'), 'RGB')['$const_defined?'](name))) {
            
            self.$warn("Color::" + (name) + " has been deprecated. Use Color::RGB::" + (name) + " instead.");
            return $$$($$('Color'), 'RGB').$const_get(name);
          } else {
            return $send2(self, $find_super(self, 'const_missing', $$const_missing, false, true), 'const_missing', [name], $yield)
          }
      }
    }, {$$source_location: ['atome/utilities/color_helper/color.rb', 158]});
    return $def(self, '$new', function $new$10(values, mode) {
      var self = this, color = nil, $ret_or_1 = nil;

      
      if (mode == null) mode = "rgb";
      self.$warn("Color.new has been deprecated. Use Color::" + (mode.$to_s().$upcase()) + ".new instead.");
      color = ($eqeqeq("hsl", ($ret_or_1 = mode)) ? ($send($$$($$('Color'), 'HSL'), 'new', $to_a(values))) : ($eqeqeq("rgb", $ret_or_1) ? (((values = [values].$flatten()), ($eqeq(values.$size(), 1) ? ($send($$$($$('Color'), 'RGB'), 'from_html', $to_a(values))) : ($send($$$($$('Color'), 'RGB'), 'new', $to_a(values)))))) : ($eqeqeq("cmyk", $ret_or_1) ? ($send($$$($$('Color'), 'CMYK'), 'new', $to_a(values))) : (nil))));
      return color.$to_hsl();
    }, {$$arity: -2, $$source_location: ['atome/utilities/color_helper/color.rb', 185]});
  })(Opal.get_singleton_class($$('Color')), $nesting);
};

Opal.modules["atome/extensions/converters"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $not = Opal.not, $to_ary = Opal.to_ary, $def = Opal.def, $send = Opal.send, $hash_rehash = Opal.hash_rehash, $regexp = Opal.regexp, $truthy = Opal.truthy, $rb_minus = Opal.rb_minus, $rb_divide = Opal.rb_divide, $rb_plus = Opal.rb_plus, $rb_times = Opal.rb_times, $eqeq = Opal.eqeq, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('extract_svg_elements,!,empty?,first,convert_element_to_hash,[]=,calculate_optimal_viewbox,map,calculate_optimal_viewbox_for_multiple,private,gsub,each,scan,parse_attributes,[],<<,to_f,-,/,+,*,floor,ceil,min,abs,-@,==,split,to_proc,max,color_to_symbol,to_i,to_s,to_sym');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Svg_to_atome');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    
    $def(self, '$convert', function $$convert(svg_content) {
      var $a, $b, self = this, svg_elements = nil, data_hash = nil, first_element = nil, type_key = nil, element_hash = nil, optimal_viewbox = nil;

      
      svg_elements = self.$extract_svg_elements(svg_content);
      data_hash = (new Map());
      if ($not(svg_elements['$empty?']())) {
        
        first_element = svg_elements.$first();
        $b = self.$convert_element_to_hash(first_element), $a = $to_ary($b), (type_key = ($a[0] == null ? nil : $a[0])), (element_hash = ($a[1] == null ? nil : $a[1])), $b;
        data_hash['$[]='](type_key, element_hash);
        optimal_viewbox = self.$calculate_optimal_viewbox(first_element);
      } else {
        optimal_viewbox = "0 0 100 100"
      };
      return [data_hash, optimal_viewbox];
    }, {$$source_location: ['atome/extensions/converters.rb', 5]});
    
    $def(self, '$convert_to_array', function $$convert_to_array(svg_content) {
      var self = this, svg_elements = nil, data_array = nil, optimal_viewbox = nil;

      
      svg_elements = self.$extract_svg_elements(svg_content);
      data_array = $send(svg_elements, 'map', [], function $$1(element){var $a, $b, self = $$1.$$s == null ? this : $$1.$$s, type_key = nil, element_hash = nil;

        
        if (element == null) element = nil;
        $b = self.$convert_element_to_hash(element), $a = $to_ary($b), (type_key = ($a[0] == null ? nil : $a[0])), (element_hash = ($a[1] == null ? nil : $a[1])), $b;
        return $hash_rehash(new Map([[type_key, element_hash]]));}, {$$s: self, $$source_location: ['atome/extensions/converters.rb', 34]});
      optimal_viewbox = self.$calculate_optimal_viewbox_for_multiple(svg_elements);
      return [data_array, optimal_viewbox];
    }, {$$source_location: ['atome/extensions/converters.rb', 29]});
    self.$private();
    
    $def(self, '$extract_svg_elements', function $$extract_svg_elements(svg_content) {
      var self = this, elements = nil, cleaned_svg = nil, svg_tags = nil;

      
      elements = [];
      cleaned_svg = svg_content.$gsub(/<!--.*?-->/m, "").$gsub(/\s+/, " ").$gsub(/>\s+</, "><");
      svg_tags = ["path", "circle", "rect", "ellipse", "line", "polyline", "polygon", "text"];
      $send(svg_tags, 'each', [], function $$2(tag){var self = $$2.$$s == null ? this : $$2.$$s, pattern = nil;

        
        if (tag == null) tag = nil;
        pattern = $regexp(["<", tag, "\\s+([^>]*?)/>"]);
        return $send(cleaned_svg, 'scan', [pattern], function $$3(match){var self = $$3.$$s == null ? this : $$3.$$s, attrs = nil;

          
          if (match == null) match = nil;
          attrs = self.$parse_attributes(match['$[]'](0));
          return elements['$<<']((new Map([["type", tag], ["attributes", attrs]])));}, {$$s: self, $$source_location: ['atome/extensions/converters.rb', 62]});}, {$$s: self, $$source_location: ['atome/extensions/converters.rb', 60]});
      $send(svg_tags, 'each', [], function $$4(tag){var self = $$4.$$s == null ? this : $$4.$$s, pattern = nil;

        
        if (tag == null) tag = nil;
        pattern = $regexp(["<", tag, "\\s+([^>]*?)>(.*?)</", tag, ">"], 'm');
        return $send(cleaned_svg, 'scan', [pattern], function $$5(match){var self = $$5.$$s == null ? this : $$5.$$s, attrs = nil, inner_content = nil;

          
          if (match == null) match = nil;
          attrs = self.$parse_attributes(match['$[]'](0));
          inner_content = match['$[]'](1);
          return elements['$<<']((new Map([["type", tag], ["attributes", attrs], ["inner_content", inner_content]])));}, {$$s: self, $$source_location: ['atome/extensions/converters.rb', 71]});}, {$$s: self, $$source_location: ['atome/extensions/converters.rb', 69]});
      return elements;
    }, {$$source_location: ['atome/extensions/converters.rb', 48]});
    
    $def(self, '$parse_attributes', function $$parse_attributes(attr_string) {
      var attributes = nil, attr_pattern = nil;

      
      attributes = (new Map());
      attr_pattern = /(\w+(?:\-\w+)?)=["']([^"']*)["']/;
      $send(attr_string, 'scan', [attr_pattern], function $$6(key, value){var $a;

        
        if (key == null) key = nil;
        if (value == null) value = nil;
        return ($a = [key, value], $send(attributes, '[]=', $a), $a[$a.length - 1]);}, {$$source_location: ['atome/extensions/converters.rb', 86]});
      return attributes;
    }, {$$source_location: ['atome/extensions/converters.rb', 81]});
    
    $def(self, '$calculate_optimal_viewbox', function $$calculate_optimal_viewbox(element) {
      var attrs = nil, $ret_or_2 = nil, cx = nil, cy = nil, r = nil, stroke_width = nil, min_x = nil, min_y = nil, width = nil, height = nil, x = nil, y = nil, total_width = nil, total_height = nil, rx = nil, ry = nil, x1 = nil, y1 = nil, x2 = nil, y2 = nil;

      
      switch (element['$[]']("type").valueOf()) {
        case "circle":
          
          attrs = ($truthy(($ret_or_2 = element['$[]']("attributes"))) ? ($ret_or_2) : ((new Map())));
          cx = ($truthy(($ret_or_2 = attrs['$[]']("cx"))) ? ($ret_or_2) : ("0")).$to_f();
          cy = ($truthy(($ret_or_2 = attrs['$[]']("cy"))) ? ($ret_or_2) : ("0")).$to_f();
          r = ($truthy(($ret_or_2 = attrs['$[]']("r"))) ? ($ret_or_2) : ("0")).$to_f();
          stroke_width = ($truthy(($ret_or_2 = attrs['$[]']("stroke-width"))) ? ($ret_or_2) : ("0")).$to_f();
          min_x = $rb_minus($rb_minus(cx, r), $rb_divide(stroke_width, 2));
          min_y = $rb_minus($rb_minus(cy, r), $rb_divide(stroke_width, 2));
          width = $rb_plus($rb_times(2, r), stroke_width);
          height = $rb_plus($rb_times(2, r), stroke_width);
          return "" + (min_x.$floor()) + " " + (min_y.$floor()) + " " + (width.$ceil()) + " " + (height.$ceil());
        case "rect":
          
          attrs = ($truthy(($ret_or_2 = element['$[]']("attributes"))) ? ($ret_or_2) : ((new Map())));
          x = ($truthy(($ret_or_2 = attrs['$[]']("x"))) ? ($ret_or_2) : ("0")).$to_f();
          y = ($truthy(($ret_or_2 = attrs['$[]']("y"))) ? ($ret_or_2) : ("0")).$to_f();
          width = ($truthy(($ret_or_2 = attrs['$[]']("width"))) ? ($ret_or_2) : ("0")).$to_f();
          height = ($truthy(($ret_or_2 = attrs['$[]']("height"))) ? ($ret_or_2) : ("0")).$to_f();
          stroke_width = ($truthy(($ret_or_2 = attrs['$[]']("stroke-width"))) ? ($ret_or_2) : ("0")).$to_f();
          min_x = $rb_minus(x, $rb_divide(stroke_width, 2));
          min_y = $rb_minus(y, $rb_divide(stroke_width, 2));
          total_width = $rb_plus(width, stroke_width);
          total_height = $rb_plus(height, stroke_width);
          return "" + (min_x.$floor()) + " " + (min_y.$floor()) + " " + (total_width.$ceil()) + " " + (total_height.$ceil());
        case "ellipse":
          
          attrs = ($truthy(($ret_or_2 = element['$[]']("attributes"))) ? ($ret_or_2) : ((new Map())));
          cx = ($truthy(($ret_or_2 = attrs['$[]']("cx"))) ? ($ret_or_2) : ("0")).$to_f();
          cy = ($truthy(($ret_or_2 = attrs['$[]']("cy"))) ? ($ret_or_2) : ("0")).$to_f();
          rx = ($truthy(($ret_or_2 = attrs['$[]']("rx"))) ? ($ret_or_2) : ("0")).$to_f();
          ry = ($truthy(($ret_or_2 = attrs['$[]']("ry"))) ? ($ret_or_2) : ("0")).$to_f();
          stroke_width = ($truthy(($ret_or_2 = attrs['$[]']("stroke-width"))) ? ($ret_or_2) : ("0")).$to_f();
          min_x = $rb_minus($rb_minus(cx, rx), $rb_divide(stroke_width, 2));
          min_y = $rb_minus($rb_minus(cy, ry), $rb_divide(stroke_width, 2));
          width = $rb_plus($rb_times(2, rx), stroke_width);
          height = $rb_plus($rb_times(2, ry), stroke_width);
          return "" + (min_x.$floor()) + " " + (min_y.$floor()) + " " + (width.$ceil()) + " " + (height.$ceil());
        case "line":
          
          attrs = ($truthy(($ret_or_2 = element['$[]']("attributes"))) ? ($ret_or_2) : ((new Map())));
          x1 = ($truthy(($ret_or_2 = attrs['$[]']("x1"))) ? ($ret_or_2) : ("0")).$to_f();
          y1 = ($truthy(($ret_or_2 = attrs['$[]']("y1"))) ? ($ret_or_2) : ("0")).$to_f();
          x2 = ($truthy(($ret_or_2 = attrs['$[]']("x2"))) ? ($ret_or_2) : ("0")).$to_f();
          y2 = ($truthy(($ret_or_2 = attrs['$[]']("y2"))) ? ($ret_or_2) : ("0")).$to_f();
          stroke_width = ($truthy(($ret_or_2 = attrs['$[]']("stroke-width"))) ? ($ret_or_2) : ("0")).$to_f();
          min_x = $rb_minus([x1, x2].$min(), $rb_divide(stroke_width, 2));
          min_y = $rb_minus([y1, y2].$min(), $rb_divide(stroke_width, 2));
          width = $rb_plus($rb_minus(x1, x2).$abs(), stroke_width);
          height = $rb_plus($rb_minus(y1, y2).$abs(), stroke_width);
          return "" + (min_x.$floor()) + " " + (min_y.$floor()) + " " + (width.$ceil()) + " " + (height.$ceil());
        case "path":
        case "polygon":
        case "polyline":
          return "0 0 100 100"
        default:
          return "0 0 100 100"
      }
    }, {$$source_location: ['atome/extensions/converters.rb', 93]});
    
    $def(self, '$calculate_optimal_viewbox_for_multiple', function $$calculate_optimal_viewbox_for_multiple(elements) {
      var self = this, min_x = nil, min_y = nil, max_x = nil, max_y = nil, width = nil, height = nil;

      
      if ($truthy(elements['$empty?']())) {
        return "0 0 100 100"
      };
      min_x = $$$($$('Float'), 'INFINITY');
      min_y = $$$($$('Float'), 'INFINITY');
      max_x = $$$($$('Float'), 'INFINITY')['$-@']();
      max_y = $$$($$('Float'), 'INFINITY')['$-@']();
      $send(elements, 'each', [], function $$7(element){var $a, $b, self = $$7.$$s == null ? this : $$7.$$s, viewbox_str = nil, vb_min_x = nil, vb_min_y = nil, vb_width = nil, vb_height = nil, vb_max_x = nil, vb_max_y = nil;

        
        if (element == null) element = nil;
        viewbox_str = self.$calculate_optimal_viewbox(element);
        if ($eqeq(viewbox_str, "0 0 100 100")) {
          return nil
        };
        $b = $send(viewbox_str.$split(" "), 'map', [], "to_f".$to_proc()), $a = $to_ary($b), (vb_min_x = ($a[0] == null ? nil : $a[0])), (vb_min_y = ($a[1] == null ? nil : $a[1])), (vb_width = ($a[2] == null ? nil : $a[2])), (vb_height = ($a[3] == null ? nil : $a[3])), $b;
        vb_max_x = $rb_plus(vb_min_x, vb_width);
        vb_max_y = $rb_plus(vb_min_y, vb_height);
        min_x = [min_x, vb_min_x].$min();
        min_y = [min_y, vb_min_y].$min();
        max_x = [max_x, vb_max_x].$max();
        return (max_y = [max_y, vb_max_y].$max());}, {$$s: self, $$source_location: ['atome/extensions/converters.rb', 182]});
      if (($eqeq(min_x, $$$($$('Float'), 'INFINITY')) || ($eqeq(min_y, $$$($$('Float'), 'INFINITY'))))) {
        return "0 0 100 100"
      };
      width = $rb_minus(max_x, min_x);
      height = $rb_minus(max_y, min_y);
      return "" + (min_x.$floor()) + " " + (min_y.$floor()) + " " + (width.$ceil()) + " " + (height.$ceil());
    }, {$$source_location: ['atome/extensions/converters.rb', 171]});
    
    $def(self, '$convert_element_to_hash', function $$convert_element_to_hash(element) {
      var self = this, attrs = nil, $ret_or_2 = nil, path_d = nil, stroke = nil, stroke_width = nil, fill = nil, hash = nil, cx = nil, cy = nil, r = nil, x = nil, y = nil, width = nil, height = nil, rx = nil, ry = nil, x1 = nil, y1 = nil, x2 = nil, y2 = nil, points = nil, content = nil, font_family = nil, font_size = nil;

      
      switch (element['$[]']("type").valueOf()) {
        case "path":
          
          attrs = ($truthy(($ret_or_2 = element['$[]']("attributes"))) ? ($ret_or_2) : ((new Map())));
          path_d = ($truthy(($ret_or_2 = attrs['$[]']("d"))) ? ($ret_or_2) : (""));
          stroke = ($truthy(($ret_or_2 = attrs['$[]']("stroke"))) ? ($ret_or_2) : ("black"));
          stroke_width = ($truthy(($ret_or_2 = attrs['$[]']("stroke-width"))) ? ($ret_or_2) : ("1"));
          fill = ($truthy(($ret_or_2 = attrs['$[]']("fill"))) ? ($ret_or_2) : ("none"));
          hash = (new Map([["d", path_d], ["stroke", self.$color_to_symbol(stroke)], ["stroke-width", stroke_width.$to_i()], ["fill", self.$color_to_symbol(fill)]]));
          return ["path", hash];
        case "circle":
          
          attrs = ($truthy(($ret_or_2 = element['$[]']("attributes"))) ? ($ret_or_2) : ((new Map())));
          cx = ($truthy(($ret_or_2 = attrs['$[]']("cx"))) ? ($ret_or_2) : ("0"));
          cy = ($truthy(($ret_or_2 = attrs['$[]']("cy"))) ? ($ret_or_2) : ("0"));
          r = ($truthy(($ret_or_2 = attrs['$[]']("r"))) ? ($ret_or_2) : ("0"));
          stroke = ($truthy(($ret_or_2 = attrs['$[]']("stroke"))) ? ($ret_or_2) : ("black"));
          stroke_width = ($truthy(($ret_or_2 = attrs['$[]']("stroke-width"))) ? ($ret_or_2) : ("1"));
          fill = ($truthy(($ret_or_2 = attrs['$[]']("fill"))) ? ($ret_or_2) : ("none"));
          hash = (new Map([["cx", cx.$to_i()], ["cy", cy.$to_i()], ["r", r.$to_i()], ["stroke", self.$color_to_symbol(stroke)], ["stroke-width", stroke_width.$to_i()], ["fill", self.$color_to_symbol(fill)]]));
          return ["circle", hash];
        case "rect":
          
          attrs = ($truthy(($ret_or_2 = element['$[]']("attributes"))) ? ($ret_or_2) : ((new Map())));
          x = ($truthy(($ret_or_2 = attrs['$[]']("x"))) ? ($ret_or_2) : ("0"));
          y = ($truthy(($ret_or_2 = attrs['$[]']("y"))) ? ($ret_or_2) : ("0"));
          width = ($truthy(($ret_or_2 = attrs['$[]']("width"))) ? ($ret_or_2) : ("0"));
          height = ($truthy(($ret_or_2 = attrs['$[]']("height"))) ? ($ret_or_2) : ("0"));
          stroke = ($truthy(($ret_or_2 = attrs['$[]']("stroke"))) ? ($ret_or_2) : ("black"));
          stroke_width = ($truthy(($ret_or_2 = attrs['$[]']("stroke-width"))) ? ($ret_or_2) : ("1"));
          fill = ($truthy(($ret_or_2 = attrs['$[]']("fill"))) ? ($ret_or_2) : ("none"));
          hash = (new Map([["x", x.$to_i()], ["y", y.$to_i()], ["width", width.$to_i()], ["height", height.$to_i()], ["stroke", self.$color_to_symbol(stroke)], ["stroke-width", stroke_width.$to_i()], ["fill", self.$color_to_symbol(fill)]]));
          return ["rect", hash];
        case "ellipse":
          
          attrs = ($truthy(($ret_or_2 = element['$[]']("attributes"))) ? ($ret_or_2) : ((new Map())));
          cx = ($truthy(($ret_or_2 = attrs['$[]']("cx"))) ? ($ret_or_2) : ("0"));
          cy = ($truthy(($ret_or_2 = attrs['$[]']("cy"))) ? ($ret_or_2) : ("0"));
          rx = ($truthy(($ret_or_2 = attrs['$[]']("rx"))) ? ($ret_or_2) : ("0"));
          ry = ($truthy(($ret_or_2 = attrs['$[]']("ry"))) ? ($ret_or_2) : ("0"));
          stroke = ($truthy(($ret_or_2 = attrs['$[]']("stroke"))) ? ($ret_or_2) : ("black"));
          stroke_width = ($truthy(($ret_or_2 = attrs['$[]']("stroke-width"))) ? ($ret_or_2) : ("1"));
          fill = ($truthy(($ret_or_2 = attrs['$[]']("fill"))) ? ($ret_or_2) : ("none"));
          hash = (new Map([["cx", cx.$to_i()], ["cy", cy.$to_i()], ["rx", rx.$to_i()], ["ry", ry.$to_i()], ["stroke", self.$color_to_symbol(stroke)], ["stroke-width", stroke_width.$to_i()], ["fill", self.$color_to_symbol(fill)]]));
          return ["ellipse", hash];
        case "line":
          
          attrs = ($truthy(($ret_or_2 = element['$[]']("attributes"))) ? ($ret_or_2) : ((new Map())));
          x1 = ($truthy(($ret_or_2 = attrs['$[]']("x1"))) ? ($ret_or_2) : ("0"));
          y1 = ($truthy(($ret_or_2 = attrs['$[]']("y1"))) ? ($ret_or_2) : ("0"));
          x2 = ($truthy(($ret_or_2 = attrs['$[]']("x2"))) ? ($ret_or_2) : ("0"));
          y2 = ($truthy(($ret_or_2 = attrs['$[]']("y2"))) ? ($ret_or_2) : ("0"));
          stroke = ($truthy(($ret_or_2 = attrs['$[]']("stroke"))) ? ($ret_or_2) : ("black"));
          stroke_width = ($truthy(($ret_or_2 = attrs['$[]']("stroke-width"))) ? ($ret_or_2) : ("1"));
          hash = (new Map([["x1", x1.$to_i()], ["y1", y1.$to_i()], ["x2", x2.$to_i()], ["y2", y2.$to_i()], ["stroke", self.$color_to_symbol(stroke)], ["stroke-width", stroke_width.$to_i()]]));
          return ["line", hash];
        case "polyline":
          
          attrs = ($truthy(($ret_or_2 = element['$[]']("attributes"))) ? ($ret_or_2) : ((new Map())));
          points = ($truthy(($ret_or_2 = attrs['$[]']("points"))) ? ($ret_or_2) : (""));
          stroke = ($truthy(($ret_or_2 = attrs['$[]']("stroke"))) ? ($ret_or_2) : ("black"));
          stroke_width = ($truthy(($ret_or_2 = attrs['$[]']("stroke-width"))) ? ($ret_or_2) : ("1"));
          fill = ($truthy(($ret_or_2 = attrs['$[]']("fill"))) ? ($ret_or_2) : ("none"));
          hash = (new Map([["points", points], ["stroke", self.$color_to_symbol(stroke)], ["stroke-width", stroke_width.$to_i()], ["fill", self.$color_to_symbol(fill)]]));
          return ["polyline", hash];
        case "polygon":
          
          attrs = ($truthy(($ret_or_2 = element['$[]']("attributes"))) ? ($ret_or_2) : ((new Map())));
          points = ($truthy(($ret_or_2 = attrs['$[]']("points"))) ? ($ret_or_2) : (""));
          stroke = ($truthy(($ret_or_2 = attrs['$[]']("stroke"))) ? ($ret_or_2) : ("black"));
          stroke_width = ($truthy(($ret_or_2 = attrs['$[]']("stroke-width"))) ? ($ret_or_2) : ("1"));
          fill = ($truthy(($ret_or_2 = attrs['$[]']("fill"))) ? ($ret_or_2) : ("none"));
          hash = (new Map([["points", points], ["stroke", self.$color_to_symbol(stroke)], ["stroke-width", stroke_width.$to_i()], ["fill", self.$color_to_symbol(fill)]]));
          return ["polygon", hash];
        case "text":
          
          attrs = ($truthy(($ret_or_2 = element['$[]']("attributes"))) ? ($ret_or_2) : ((new Map())));
          x = ($truthy(($ret_or_2 = attrs['$[]']("x"))) ? ($ret_or_2) : ("0"));
          y = ($truthy(($ret_or_2 = attrs['$[]']("y"))) ? ($ret_or_2) : ("0"));
          content = ($truthy(($ret_or_2 = element['$[]']("inner_content"))) ? ($ret_or_2) : (""));
          font_family = ($truthy(($ret_or_2 = attrs['$[]']("font-family"))) ? ($ret_or_2) : ("sans-serif"));
          font_size = ($truthy(($ret_or_2 = attrs['$[]']("font-size"))) ? ($ret_or_2) : ("12"));
          fill = ($truthy(($ret_or_2 = attrs['$[]']("fill"))) ? ($ret_or_2) : ("black"));
          hash = (new Map([["x", x.$to_i()], ["y", y.$to_i()], ["content", content], ["font-family", font_family], ["font-size", font_size.$to_i()], ["fill", self.$color_to_symbol(fill)]]));
          return ["text", hash];
        default:
          return ["unknown", (new Map([["type", element['$[]']("type")]]))]
      }
    }, {$$source_location: ['atome/extensions/converters.rb', 212]});
    return $def(self, '$color_to_symbol', function $$color_to_symbol(color) {
      var common_colors = nil;

      
      color = color.$to_s().$gsub("#", "");
      common_colors = (new Map([["none", "none"], ["black", "black"], ["white", "white"], ["red", "red"], ["green", "green"], ["blue", "blue"], ["yellow", "yellow"], ["cyan", "cyan"], ["magenta", "magenta"], ["gray", "gray"], ["grey", "gray"], ["transparent", "transparent"]]));
      if ($truthy(common_colors['$[]'](color))) {
        return common_colors['$[]'](color)
      } else {
        return color.$to_sym()
      };
    }, {$$source_location: ['atome/extensions/converters.rb', 380]});
  })($nesting[0], null, $nesting)
};

Opal.modules["forwardable"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy, $def = Opal.def, $slice = Opal.slice, $to_a = Opal.to_a, $alias = Opal.alias, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('each,respond_to?,def_instance_delegator,include?,start_with?,to_s,define_method,__send__,instance_variable_get,to_proc,instance_delegate,def_instance_delegators,def_single_delegator,define_singleton_method,single_delegate,def_single_delegators');
  
  (function($base) {
    var self = $module($base, 'Forwardable');

    
    
    
    $def(self, '$instance_delegate', function $$instance_delegate(hash) {
      var self = this;

      return $send(hash, 'each', [], function $$1(methods, accessor){var self = $$1.$$s == null ? this : $$1.$$s;

        
        if (methods == null) methods = nil;
        if (accessor == null) accessor = nil;
        if (!$truthy(methods['$respond_to?']("each"))) {
          methods = [methods]
        };
        return $send(methods, 'each', [], function $$2(method){var self = $$2.$$s == null ? this : $$2.$$s;

          
          if (method == null) method = nil;
          return self.$def_instance_delegator(accessor, method);}, {$$s: self, $$source_location: ['./forwardable.rb', 6]});}, {$$s: self, $$source_location: ['./forwardable.rb', 3]})
    }, {$$source_location: ['./forwardable.rb', 2]});
    
    $def(self, '$def_instance_delegators', function $$def_instance_delegators(accessor, $a) {
      var $post_args, methods, self = this;

      
      $post_args = $slice(arguments, 1);
      methods = $post_args;
      return $send(methods, 'each', [], function $$3(method){var self = $$3.$$s == null ? this : $$3.$$s;

        
        if (method == null) method = nil;
        if ($truthy(["__send__", "__id__"]['$include?'](method))) {
          return nil
        };
        return self.$def_instance_delegator(accessor, method);}, {$$s: self, $$source_location: ['./forwardable.rb', 13]});
    }, {$$arity: -2, $$source_location: ['./forwardable.rb', 12]});
    
    $def(self, '$def_instance_delegator', function $$def_instance_delegator(accessor, method, ali) {
      var $yield = $$def_instance_delegator.$$p || nil, self = this;

      $$def_instance_delegator.$$p = null;
      
      if (ali == null) ali = method;
      if ($truthy(accessor.$to_s()['$start_with?']("@"))) {
        return $send(self, 'define_method', [ali], function $$4($a){var block = $$4.$$p || nil, $post_args, args, self = $$4.$$s == null ? this : $$4.$$s;

          $$4.$$p = null;
          
          ;
          $post_args = $slice(arguments);
          args = $post_args;
          return $send(self.$instance_variable_get(accessor), '__send__', [method].concat($to_a(args)), block.$to_proc());}, {$$arity: -1, $$s: self, $$source_location: ['./forwardable.rb', 22]})
      } else {
        return $send(self, 'define_method', [ali], function $$5($a){var block = $$5.$$p || nil, $post_args, args, self = $$5.$$s == null ? this : $$5.$$s;

          $$5.$$p = null;
          
          ;
          $post_args = $slice(arguments);
          args = $post_args;
          return $send(self.$__send__(accessor), '__send__', [method].concat($to_a(args)), block.$to_proc());}, {$$arity: -1, $$s: self, $$source_location: ['./forwardable.rb', 26]})
      };
    }, {$$arity: -3, $$source_location: ['./forwardable.rb', 20]});
    $alias(self, "delegate", "instance_delegate");
    $alias(self, "def_delegators", "def_instance_delegators");
    return $alias(self, "def_delegator", "def_instance_delegator");
  })($nesting[0]);
  return (function($base) {
    var self = $module($base, 'SingleForwardable');

    
    
    
    $def(self, '$single_delegate', function $$single_delegate(hash) {
      var self = this;

      return $send(hash, 'each', [], function $$6(methods, accessor){var self = $$6.$$s == null ? this : $$6.$$s;

        
        if (methods == null) methods = nil;
        if (accessor == null) accessor = nil;
        if (!$truthy(methods['$respond_to?']("each"))) {
          methods = [methods]
        };
        return $send(methods, 'each', [], function $$7(method){var self = $$7.$$s == null ? this : $$7.$$s;

          
          if (method == null) method = nil;
          return self.$def_single_delegator(accessor, method);}, {$$s: self, $$source_location: ['./forwardable.rb', 42]});}, {$$s: self, $$source_location: ['./forwardable.rb', 39]})
    }, {$$source_location: ['./forwardable.rb', 38]});
    
    $def(self, '$def_single_delegators', function $$def_single_delegators(accessor, $a) {
      var $post_args, methods, self = this;

      
      $post_args = $slice(arguments, 1);
      methods = $post_args;
      return $send(methods, 'each', [], function $$8(method){var self = $$8.$$s == null ? this : $$8.$$s;

        
        if (method == null) method = nil;
        if ($truthy(["__send__", "__id__"]['$include?'](method))) {
          return nil
        };
        return self.$def_single_delegator(accessor, method);}, {$$s: self, $$source_location: ['./forwardable.rb', 49]});
    }, {$$arity: -2, $$source_location: ['./forwardable.rb', 48]});
    
    $def(self, '$def_single_delegator', function $$def_single_delegator(accessor, method, ali) {
      var $yield = $$def_single_delegator.$$p || nil, self = this;

      $$def_single_delegator.$$p = null;
      
      if (ali == null) ali = method;
      if ($truthy(accessor.$to_s()['$start_with?']("@"))) {
        return $send(self, 'define_singleton_method', [ali], function $$9($a){var block = $$9.$$p || nil, $post_args, args, self = $$9.$$s == null ? this : $$9.$$s;

          $$9.$$p = null;
          
          ;
          $post_args = $slice(arguments);
          args = $post_args;
          return $send(self.$instance_variable_get(accessor), '__send__', [method].concat($to_a(args)), block.$to_proc());}, {$$arity: -1, $$s: self, $$source_location: ['./forwardable.rb', 58]})
      } else {
        return $send(self, 'define_singleton_method', [ali], function $$10($a){var block = $$10.$$p || nil, $post_args, args, self = $$10.$$s == null ? this : $$10.$$s;

          $$10.$$p = null;
          
          ;
          $post_args = $slice(arguments);
          args = $post_args;
          return $send(self.$__send__(accessor), '__send__', [method].concat($to_a(args)), block.$to_proc());}, {$$arity: -1, $$s: self, $$source_location: ['./forwardable.rb', 62]})
      };
    }, {$$arity: -3, $$source_location: ['./forwardable.rb', 56]});
    $alias(self, "delegate", "single_delegate");
    $alias(self, "def_delegators", "def_single_delegators");
    return $alias(self, "def_delegator", "def_single_delegator");
  })($nesting[0]);
};

Opal.modules["date/infinity"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $def = Opal.def, $return_val = Opal.return_val, $eqeqeq = Opal.eqeqeq, $to_ary = Opal.to_ary, $send2 = Opal.send2, $find_super = Opal.find_super, $eqeq = Opal.eqeq, $truthy = Opal.truthy, $rb_gt = Opal.rb_gt, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('include,<=>,attr_reader,nonzero?,d,zero?,new,class,-@,+@,===,coerce,==,>');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Date');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Infinity');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

      $proto.d = nil;
      
      self.$include($$('Comparable'));
      
      $def(self, '$initialize', function $$initialize(d) {
        var self = this;

        
        if (d == null) d = 1;
        return (self.d = d['$<=>'](0));
      }, {$$arity: -1, $$source_location: ['date/infinity.rb', 5]});
      self.$attr_reader("d");
      
      $def(self, '$zero?', $return_val(false), {$$source_location: ['date/infinity.rb', 11]});
      
      $def(self, '$finite?', $return_val(false), {$$source_location: ['date/infinity.rb', 15]});
      
      $def(self, '$infinite?', function $Infinity_infinite$ques$1() {
        var self = this;

        return self.$d()['$nonzero?']()
      }, {$$source_location: ['date/infinity.rb', 19]});
      
      $def(self, '$nan?', function $Infinity_nan$ques$2() {
        var self = this;

        return self.$d()['$zero?']()
      }, {$$source_location: ['date/infinity.rb', 23]});
      
      $def(self, '$abs', function $$abs() {
        var self = this;

        return self.$class().$new()
      }, {$$source_location: ['date/infinity.rb', 27]});
      
      $def(self, '$-@', function $Infinity_$minus$$3() {
        var self = this;

        return self.$class().$new(self.$d()['$-@']())
      }, {$$source_location: ['date/infinity.rb', 31]});
      
      $def(self, '$+@', function $Infinity_$plus$$4() {
        var self = this;

        return self.$class().$new(self.$d()['$+@']())
      }, {$$source_location: ['date/infinity.rb', 35]});
      
      $def(self, '$<=>', function $Infinity_$lt_eq_gt$5(other) {
        var $a, $b, self = this, $ret_or_1 = nil, l = nil, r = nil;

        if ($eqeqeq($$('Infinity'), ($ret_or_1 = other))) {
          return self.$d()['$<=>'](other.$d())
        } else if ($eqeqeq($$('Numeric'), $ret_or_1)) {
          return self.$d()
        } else {
          
          try {
            
            $b = other.$coerce(self), $a = $to_ary($b), (l = ($a[0] == null ? nil : $a[0])), (r = ($a[1] == null ? nil : $a[1])), $b;
            return l['$<=>'](r);
          } catch ($err) {
            if (Opal.rescue($err, [$$('NoMethodError')])) {
              try {
                return nil
              } finally { Opal.pop_exception($err); }
            } else { throw $err; }
          };
        }
      }, {$$source_location: ['date/infinity.rb', 39]});
      
      $def(self, '$coerce', function $$coerce(other) {
        var $yield = $$coerce.$$p || nil, self = this, $ret_or_1 = nil;

        $$coerce.$$p = null;
        if ($eqeqeq($$('Numeric'), ($ret_or_1 = other))) {
          return [self.$d()['$-@'](), self.$d()]
        } else {
          return $send2(self, $find_super(self, 'coerce', $$coerce, false, true), 'coerce', [other], $yield)
        }
      }, {$$source_location: ['date/infinity.rb', 55]});
      return $def(self, '$to_f', function $$to_f() {
        var self = this;

        
        if ($eqeq(self.d, 0)) {
          return 0
        };
        if ($truthy($rb_gt(self.d, 0))) {
          return $$$($$('Float'), 'INFINITY')
        } else {
          return $$$($$('Float'), 'INFINITY')['$-@']()
        };
      }, {$$source_location: ['date/infinity.rb', 64]});
    })($nesting[0], $$('Numeric'), $nesting)
  })($nesting[0], null, $nesting)
};

Opal.modules["date/date_time"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $def = Opal.def, $alias = Opal.alias, $rb_divide = Opal.rb_divide, $rb_times = Opal.rb_times, $rb_plus = Opal.rb_plus, $rb_minus = Opal.rb_minus, $truthy = Opal.truthy, $return_self = Opal.return_self, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('wrap,now,parse,new,def_delegators,min,sec,/,usec,sec_fraction,gmt_offset,*,+,-,is_a?,clone,_parse_offset,dup,year,month,day');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'DateTime');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.date = nil;
    
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      
      $def(self, '$now', function $$now() {
        var self = this;

        return self.$wrap($$('Time').$now())
      }, {$$source_location: ['date/date_time.rb', 5]});
      return $def(self, '$parse', function $$parse(str) {
        var self = this;

        return self.$wrap($$('Time').$parse(str))
      }, {$$source_location: ['date/date_time.rb', 9]});
    })(Opal.get_singleton_class(self), $nesting);
    
    $def(self, '$initialize', function $$initialize(year, month, day, hours, minutes, seconds, offset, start) {
      var self = this;

      
      if (year == null) year = -4712;
      if (month == null) month = 1;
      if (day == null) day = 1;
      if (hours == null) hours = 0;
      if (minutes == null) minutes = 0;
      if (seconds == null) seconds = 0;
      if (offset == null) offset = 0;
      if (start == null) start = $$('ITALY');
      
      // Because of Gregorian reform calendar goes from 1582-10-04 to 1582-10-15.
      // All days in between end up as 4 october.
      if (year === 1582 && month === 10 && day > 4 && day < 15) {
        day = 4;
      }
    ;
      self.date = $$('Time').$new(year, month, day, hours, minutes, seconds, offset);
      return (self.start = start);
    }, {$$arity: -1, $$source_location: ['date/date_time.rb', 14]});
    self.$def_delegators("@date", "min", "hour", "sec");
    $alias(self, "minute", "min");
    $alias(self, "second", "sec");
    
    $def(self, '$sec_fraction', function $$sec_fraction() {
      var self = this;

      return $rb_divide(self.date.$usec(), $$$('Rational').$new(1000000, 1))
    }, {$$source_location: ['date/date_time.rb', 31]});
    $alias(self, "second_fraction", "sec_fraction");
    
    $def(self, '$offset', function $$offset() {
      var self = this;

      return $rb_divide(self.date.$gmt_offset(), $rb_times(24, $$$('Rational').$new(3600, 1)))
    }, {$$source_location: ['date/date_time.rb', 37]});
    
    $def(self, '$+', function $DateTime_$plus$1(other) {
      var self = this;

      return $$$('DateTime').$wrap($rb_plus(self.date, other))
    }, {$$source_location: ['date/date_time.rb', 41]});
    
    $def(self, '$-', function $DateTime_$minus$2(other) {
      var self = this, result = nil;

      
      if (Opal.is_a(other, $$$('Date'))) other = other.date;
      result = $rb_minus(self.date, other);
      if ($truthy(result['$is_a?']($$$('Time')))) {
        return $$$('DateTime').$wrap(result)
      } else {
        return result
      };
    }, {$$source_location: ['date/date_time.rb', 45]});
    
    $def(self, '$new_offset', function $$new_offset(offset) {
      var self = this, new_date = nil;

      
      new_date = self.$clone();
      offset = $$('Time').$_parse_offset(offset);
      new_date.date.timezone = offset;
      return new_date;
    }, {$$source_location: ['date/date_time.rb', 55]});
    
    $def(self, '$to_datetime', $return_self, {$$source_location: ['date/date_time.rb', 62]});
    
    $def(self, '$to_time', function $$to_time() {
      var self = this;

      return self.date.$dup()
    }, {$$source_location: ['date/date_time.rb', 66]});
    return $def(self, '$to_date', function $$to_date() {
      var self = this;

      return $$('Date').$new(self.$year(), self.$month(), self.$day())
    }, {$$source_location: ['date/date_time.rb', 70]});
  })($nesting[0], $$('Date'), $nesting)
};

Opal.modules["date/formatters"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $slice = Opal.slice, $extract_kwargs = Opal.extract_kwargs, $ensure_kwargs = Opal.ensure_kwargs, $kwrestargs = Opal.kwrestargs, $send = Opal.send, $to_a = Opal.to_a, $defs = Opal.defs, $alias = Opal.alias, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('def_formatter,asctime,iso8601,rfc2822,xmlschema');
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Date');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    $defs(self, '$def_formatter', function $$def_formatter($a, $b) {
      var $post_args, $kwargs, args, kwargs, self = this;

      
      $post_args = $slice(arguments);
      $kwargs = $extract_kwargs($post_args);
      $kwargs = $ensure_kwargs($kwargs);
      args = $post_args;
      kwargs = $kwrestargs($kwargs, {});
      return $send($$('Time'), 'def_formatter', $to_a(args).concat([Opal.to_hash(kwargs).$merge((new Map([["on", self]])))]));
    }, {$$arity: -1, $$source_location: ['date/formatters.rb', 2]});
    self.$def_formatter("asctime", "%c");
    $alias(self, "ctime", "asctime");
    self.$def_formatter("iso8601", "%F");
    $alias(self, "xmlschema", "iso8601");
    self.$def_formatter("rfc3339", "%FT%T%:z");
    self.$def_formatter("rfc2822", "%a, %-d %b %Y %T %z");
    $alias(self, "rfc822", "rfc2822");
    self.$def_formatter("httpdate", "%a, %d %b %Y %T GMT", (new Map([["utc", true]])));
    self.$def_formatter("jisx0301", "%J");
    return $alias(self, "to_s", "iso8601");
  })($nesting[0], null, $nesting);
  return (function($base, $super) {
    var self = $klass($base, $super, 'DateTime');

    
    
    self.$def_formatter("xmlschema", "%FT%T", (new Map([["fractions", true], ["tz_format", "%:z"]])));
    $alias(self, "iso8601", "xmlschema");
    $alias(self, "rfc3339", "xmlschema");
    self.$def_formatter("jisx0301", "%JT%T", (new Map([["fractions", true], ["tz_format", "%:z"]])));
    $alias(self, "to_s", "xmlschema");
    return self.$def_formatter("zone", "%:z");
  })($nesting[0], $$('Date'));
};

Opal.modules["date"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $const_set = Opal.const_set, $rb_plus = Opal.rb_plus, $def = Opal.def, $send = Opal.send, $alias = Opal.alias, $rb_minus = Opal.rb_minus, $return_self = Opal.return_self, $return_ivar = Opal.return_ivar, $truthy = Opal.truthy, $rb_lt = Opal.rb_lt, $rb_times = Opal.rb_times, $defs = Opal.defs, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('require,include,extend,new,-@,+,allocate,join,compact,map,to_proc,downcase,wrap,raise,attr_reader,<=>,jd,===,<<,prev_month,dup,def_delegators,day,month,clone,prev_day,next_day,_days_in_month,class,-,year,prev_year,to_s,strftime,to_i,<,*,reverse,step,abs,each,==,next');
  
  self.$require("forwardable");
  self.$require("date/infinity");
  self.$require("time");
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Date');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.date = $proto.start = nil;
    
    self.$include($$('Comparable'));
    self.$extend($$('Forwardable'));
    $const_set($nesting[0], 'JULIAN', $$('Infinity').$new());
    $const_set($nesting[0], 'GREGORIAN', $$('Infinity').$new()['$-@']());
    $const_set($nesting[0], 'ITALY', 2299161);
    $const_set($nesting[0], 'ENGLAND', 2361222);
    $const_set($nesting[0], 'MONTHNAMES', $rb_plus([nil], ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]));
    $const_set($nesting[0], 'ABBR_MONTHNAMES', ["jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec"]);
    $const_set($nesting[0], 'DAYNAMES', ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
    $const_set($nesting[0], 'ABBR_DAYNAMES', ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]);
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      
      $def(self, '$wrap', function $$wrap(native$) {
        var self = this, instance = nil;

        
        instance = self.$allocate();
        instance.start = $$('ITALY');
        instance.date = native$;
        return instance;
      }, {$$source_location: ['./date.rb', 21]});
      
      $def(self, '$parse', function $$parse(string, comp) {
        var self = this;

        
        if (comp == null) comp = true;
        
        var current_date = new Date();

        var current_day = current_date.getDate(),
            current_month = current_date.getMonth(),
            current_year = current_date.getFullYear(),
            current_wday = current_date.getDay(),
            full_month_name_regexp = $$('MONTHNAMES').$compact().$join("|");

        function match1(match) { return match[1]; }
        function match2(match) { return match[2]; }
        function match3(match) { return match[3]; }
        function match4(match) { return match[4]; }

        // Converts passed short year (0..99)
        // to a 4-digits year in the range (1969..2068)
        function fromShortYear(fn) {
          return function(match) {
            var short_year = fn(match);

            if (short_year >= 69) {
              short_year += 1900;
            } else {
              short_year += 2000;
            }
            return short_year;
          }
        }

        // Converts month abbr (nov) to a month number
        function fromMonthAbbr(fn) {
          return function(match) {
            var abbr = fn(match).toLowerCase();
            return $$('ABBR_MONTHNAMES').indexOf(abbr) + 1;
          }
        }

        function toInt(fn) {
          return function(match) {
            var value = fn(match);
            return parseInt(value, 10);
          }
        }

        // Depending on the 'comp' value appends 20xx to a passed year
        function to2000(fn) {
          return function(match) {
            var value = fn(match);
            if (comp) {
              return value + 2000;
            } else {
              return value;
            }
          }
        }

        // Converts passed week day name to a day number
        function fromDayName(fn) {
          return function(match) {
            var dayname = fn(match),
                wday = $send($$('DAYNAMES'), 'map', [], "downcase".$to_proc()).indexOf((dayname).$downcase());

            return current_day - current_wday + wday;
          }
        }

        // Converts passed month name to a month number
        function fromFullMonthName(fn) {
          return function(match) {
            var month_name = fn(match);
            return $send($$('MONTHNAMES').$compact(), 'map', [], "downcase".$to_proc()).indexOf((month_name).$downcase()) + 1;
          }
        }

        var rules = [
          {
            // DD as month day number
            regexp: /^(\d{2})$/,
            year: current_year,
            month: current_month,
            day: toInt(match1)
          },
          {
            // DDD as year day number
            regexp: /^(\d{3})$/,
            year: current_year,
            month: 0,
            day: toInt(match1)
          },
          {
            // MMDD as month and day
            regexp: /^(\d{2})(\d{2})$/,
            year: current_year,
            month: toInt(match1),
            day: toInt(match2)
          },
          {
            // YYDDD as year and day number in 1969--2068
            regexp: /^(\d{2})(\d{3})$/,
            year: fromShortYear(toInt(match1)),
            month: 0,
            day: toInt(match2)
          },
          {
            // YYMMDD as year, month and day in 1969--2068
            regexp: /^(\d{2})(\d{2})(\d{2})$/,
            year: fromShortYear(toInt(match1)),
            month: toInt(match2),
            day: toInt(match3)
          },
          {
            // YYYYDDD as year and day number
            regexp: /^(\d{4})(\d{3})$/,
            year: toInt(match1),
            month: 0,
            day: toInt(match2)
          },
          {
            // YYYYMMDD as year, month and day number
            regexp: /^(\d{4})(\d{2})(\d{2})$/,
            year: toInt(match1),
            month: toInt(match2),
            day: toInt(match3)
          },
          {
            // mmm YYYY
            regexp: /^([a-z]{3})[\s\.\/\-](\d{3,4})$/,
            year: toInt(match2),
            month: fromMonthAbbr(match1),
            day: 1
          },
          {
            // DD mmm YYYY
            regexp: /^(\d{1,2})[\s\.\/\-]([a-z]{3})[\s\.\/\-](\d{3,4})$/i,
            year: toInt(match3),
            month: fromMonthAbbr(match2),
            day: toInt(match1)
          },
          {
            // mmm DD YYYY
            regexp: /^([a-z]{3})[\s\.\/\-](\d{1,2})[\s\.\/\-](\d{3,4})$/i,
            year: toInt(match3),
            month: fromMonthAbbr(match1),
            day: toInt(match2)
          },
          {
            // YYYY mmm DD
            regexp: /^(\d{3,4})[\s\.\/\-]([a-z]{3})[\s\.\/\-](\d{1,2})$/i,
            year: toInt(match1),
            month: fromMonthAbbr(match2),
            day: toInt(match3)
          },
          {
            // YYYY-MM-DD YYYY/MM/DD YYYY.MM.DD
            regexp: /^(\-?\d{3,4})[\s\.\/\-](\d{1,2})[\s\.\/\-](\d{1,2})$/,
            year: toInt(match1),
            month: toInt(match2),
            day: toInt(match3)
          },
          {
            // YY-MM-DD
            regexp: /^(\d{2})[\s\.\/\-](\d{1,2})[\s\.\/\-](\d{1,2})$/,
            year: to2000(toInt(match1)),
            month: toInt(match2),
            day: toInt(match3)
          },
          {
            // DD-MM-YYYY
            regexp: /^(\d{1,2})[\s\.\/\-](\d{1,2})[\s\.\/\-](\-?\d{3,4})$/,
            year: toInt(match3),
            month: toInt(match2),
            day: toInt(match1)
          },
          {
            // ddd
            regexp: new RegExp("^(" + $$('DAYNAMES').$join("|") + ")$", 'i'),
            year: current_year,
            month: current_month,
            day: fromDayName(match1)
          },
          {
            // monthname daynumber YYYY
            regexp: new RegExp("^(" + full_month_name_regexp + ")[\\s\\.\\/\\-](\\d{1,2})(th|nd|rd)[\\s\\.\\/\\-](\\-?\\d{3,4})$", "i"),
            year: toInt(match4),
            month: fromFullMonthName(match1),
            day: toInt(match2)
          },
          {
            // monthname daynumber
            regexp: new RegExp("^(" + full_month_name_regexp + ")[\\s\\.\\/\\-](\\d{1,2})(th|nd|rd)", "i"),
            year: current_year,
            month: fromFullMonthName(match1),
            day: toInt(match2)
          },
          {
            // daynumber monthname YYYY
            regexp: new RegExp("^(\\d{1,2})(th|nd|rd)[\\s\\.\\/\\-](" + full_month_name_regexp + ")[\\s\\.\\/\\-](\\-?\\d{3,4})$", "i"),
            year: toInt(match4),
            month: fromFullMonthName(match3),
            day: toInt(match1)
          },
          {
            // YYYY monthname daynumber
            regexp: new RegExp("^(\\-?\\d{3,4})[\\s\\.\\/\\-](" + full_month_name_regexp + ")[\\s\\.\\/\\-](\\d{1,2})(th|nd|rd)$", "i"),
            year: toInt(match1),
            month: fromFullMonthName(match2),
            day: toInt(match3)
          }
        ]

        var rule, i, match;

        for (i = 0; i < rules.length; i++) {
          rule = rules[i];
          match = rule.regexp.exec(string);
          if (match) {
            var year = rule.year;
            if (typeof(year) === 'function') {
              year = year(match);
            }

            var month = rule.month;
            if (typeof(month) === 'function') {
              month = month(match) - 1
            }

            var day = rule.day;
            if (typeof(day) === 'function') {
              day = day(match);
            }

            var result = new Date(year, month, day);

            // an edge case, JS can't handle 'new Date(1)', minimal year is 1970
            if (year >= 0 && year <= 1970) {
              result.setFullYear(year);
            }

            return self.$wrap(result);
          }
        }
      ;
        return self.$raise($$('ArgumentError'), "invalid date");
      }, {$$arity: -2, $$source_location: ['./date.rb', 28]});
      
      $def(self, '$today', function $$today() {
        var self = this;

        return self.$wrap(new Date())
      }, {$$source_location: ['./date.rb', 274]});
      
      $def(self, '$gregorian_leap?', function $gregorian_leap$ques$1(year) {
        
        return (new Date(year, 1, 29).getMonth()-1) === 0
      }, {$$source_location: ['./date.rb', 278]});
      return $alias(self, "civil", "new");
    })(Opal.get_singleton_class(self), $nesting);
    
    $def(self, '$initialize', function $$initialize(year, month, day, start) {
      var self = this;

      
      if (year == null) year = -4712;
      if (month == null) month = 1;
      if (day == null) day = 1;
      if (start == null) start = $$('ITALY');
      
      // Because of Gregorian reform calendar goes from 1582-10-04 to 1582-10-15.
      // All days in between end up as 4 october.
      if (year === 1582 && month === 10 && day > 4 && day < 15) {
        day = 4;
      }
    ;
      self.date = new Date(year, month - 1, day);
      return (self.start = start);
    }, {$$arity: -1, $$source_location: ['./date.rb', 285]});
    self.$attr_reader("start");
    
    $def(self, '$<=>', function $Date_$lt_eq_gt$2(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self.$jd()['$<=>'](other)
      }

      if ($$$('Date')['$==='](other)) {
        var a = self.date, b = other.date;
        if (!Opal.is_a(self, $$$('DateTime'))) a.setHours(0, 0, 0, 0);
        if (!Opal.is_a(other, $$$('DateTime'))) b.setHours(0, 0, 0, 0);

        if (a < b) {
          return -1;
        }
        else if (a > b) {
          return 1;
        }
        else {
          return 0;
        }
      } else {
        return nil;
      }
    
    }, {$$source_location: ['./date.rb', 300]});
    
    $def(self, '$>>', function $Date_$gt$gt$3(n) {
      var self = this;

      
      if (!n.$$is_number) self.$raise($$$('TypeError'));
      return self['$<<'](n['$-@']());
    }, {$$source_location: ['./date.rb', 326]});
    
    $def(self, '$<<', function $Date_$lt$lt$4(n) {
      var self = this;

      
      if (!n.$$is_number) self.$raise($$$('TypeError'));
      return self.$prev_month(n);
    }, {$$source_location: ['./date.rb', 332]});
    
    $def(self, '$clone', function $$clone() {
      var self = this, date = nil;

      
      date = $$('Date').$wrap(self.date.$dup());
      date.start = self.start;
      return date;
    }, {$$source_location: ['./date.rb', 338]});
    self.$def_delegators("@date", "sunday?", "monday?", "tuesday?", "wednesday?", "thursday?", "friday?", "saturday?", "day", "month", "year", "wday", "yday");
    $alias(self, "mday", "day");
    $alias(self, "mon", "month");
    
    $def(self, '$jd', function $$jd() {
      var self = this;

      
    //Adapted from http://www.physics.sfasu.edu/astro/javascript/julianday.html

    var mm = self.date.getMonth() + 1,
        dd = self.date.getDate(),
        yy = self.date.getFullYear(),
        hr = 12, mn = 0, sc = 0,
        ggg, s, a, j1, jd;

    hr = hr + (mn / 60) + (sc/3600);

    ggg = 1;
    if (yy <= 1585) {
      ggg = 0;
    }

    jd = -1 * Math.floor(7 * (Math.floor((mm + 9) / 12) + yy) / 4);

    s = 1;
    if ((mm - 9) < 0) {
      s =- 1;
    }

    a = Math.abs(mm - 9);
    j1 = Math.floor(yy + s * Math.floor(a / 7));
    j1 = -1 * Math.floor((Math.floor(j1 / 100) + 1) * 3 / 4);

    jd = jd + Math.floor(275 * mm / 9) + dd + (ggg * j1);
    jd = jd + 1721027 + 2 * ggg + 367 * yy - 0.5;
    jd = jd + (hr / 24);

    return jd;
    
    }, {$$source_location: ['./date.rb', 350]});
    
    $def(self, '$julian?', function $Date_julian$ques$5() {
      var self = this;

      return self.date < new Date(1582, 10 - 1, 15, 12)
    }, {$$source_location: ['./date.rb', 386]});
    
    $def(self, '$new_start', function $$new_start(start) {
      var self = this, new_date = nil;

      
      new_date = self.$clone();
      new_date.start = start;
      return new_date;
    }, {$$source_location: ['./date.rb', 390]});
    
    $def(self, '$next', function $$next() {
      var self = this;

      return $rb_plus(self, 1)
    }, {$$source_location: ['./date.rb', 396]});
    
    $def(self, '$-', function $Date_$minus$6(date) {
      var self = this;

      
      
      if (date.date) {
        return Math.round((self.date - date.date) / (1000 * 60 * 60 * 24));
      }
    ;
      return self.$prev_day(date);
    }, {$$source_location: ['./date.rb', 400]});
    
    $def(self, '$+', function $Date_$plus$7(date) {
      var self = this;

      return self.$next_day(date)
    }, {$$source_location: ['./date.rb', 409]});
    
    $def(self, '$prev_day', function $$prev_day(n) {
      var self = this;

      
      if (n == null) n = 1;
      
      if (n.$$is_number) {
        var result = self.$clone();
        result.date.setDate(self.date.getDate() - n);
        return result;
      }
      else {
        self.$raise($$$('TypeError'));
      }
    ;
    }, {$$arity: -1, $$source_location: ['./date.rb', 413]});
    
    $def(self, '$next_day', function $$next_day(n) {
      var self = this;

      
      if (n == null) n = 1;
      if (!n.$$is_number) self.$raise($$$('TypeError'));
      return self.$prev_day(n['$-@']());
    }, {$$arity: -1, $$source_location: ['./date.rb', 426]});
    
    $def(self, '$prev_month', function $$prev_month(n) {
      var self = this;

      
      if (n == null) n = 1;
      
      if (!n.$$is_number) self.$raise($$$('TypeError'))
      var result = self.$clone(), date = result.date, cur = date.getDate();
      date.setDate(1);
      date.setMonth(date.getMonth() - n);
      date.setDate(Math.min(cur, $$('Date').$_days_in_month(date.getFullYear(), date.getMonth())));
      return result;
    ;
    }, {$$arity: -1, $$source_location: ['./date.rb', 431]});
    
    $def(self, '$next_month', function $$next_month(n) {
      var self = this;

      
      if (n == null) n = 1;
      if (!n.$$is_number) self.$raise($$$('TypeError'));
      return self.$prev_month(n['$-@']());
    }, {$$arity: -1, $$source_location: ['./date.rb', 442]});
    
    $def(self, '$prev_year', function $$prev_year(years) {
      var self = this;

      
      if (years == null) years = 1;
      if (!years.$$is_number) self.$raise($$$('TypeError'));
      return self.$class().$new($rb_minus(self.$year(), years), self.$month(), self.$day());
    }, {$$arity: -1, $$source_location: ['./date.rb', 447]});
    
    $def(self, '$next_year', function $$next_year(years) {
      var self = this;

      
      if (years == null) years = 1;
      if (!years.$$is_number) self.$raise($$$('TypeError'));
      return self.$prev_year(years['$-@']());
    }, {$$arity: -1, $$source_location: ['./date.rb', 452]});
    
    $def(self, '$strftime', function $$strftime(format) {
      var self = this;

      
      if (format == null) format = "";
      
      if (format == '') {
        return self.$to_s();
      }

      return self.date.$strftime(format)
    ;
    }, {$$arity: -1, $$source_location: ['./date.rb', 457]});
    
    $def(self, '$to_s', function $$to_s() {
      var self = this;

      
      var d = self.date, year = d.getFullYear(), month = d.getMonth() + 1, day = d.getDate();
      if (month < 10) { month = '0' + month; }
      if (day < 10) { day = '0' + day; }
      return year + '-' + month + '-' + day;
    
    }, {$$source_location: ['./date.rb', 467]});
    
    $def(self, '$to_time', function $$to_time() {
      var self = this;

      return $$('Time').$new(self.$year(), self.$month(), self.$day())
    }, {$$source_location: ['./date.rb', 476]});
    
    $def(self, '$to_date', $return_self, {$$source_location: ['./date.rb', 480]});
    
    $def(self, '$to_datetime', function $$to_datetime() {
      var self = this;

      return $$('DateTime').$new(self.$year(), self.$month(), self.$day())
    }, {$$source_location: ['./date.rb', 484]});
    
    $def(self, '$to_n', $return_ivar("date"), {$$source_location: ['./date.rb', 488]});
    
    $def(self, '$step', function $$step(limit, step) {
      var block = $$step.$$p || nil, self = this, steps_count = nil, steps = nil, result = nil;

      $$step.$$p = null;
      
      ;
      if (step == null) step = 1;
      steps_count = $rb_minus(limit, self).$to_i();
      steps = ($truthy($rb_lt($rb_times(steps_count, step), 0)) ? ([]) : ($truthy($rb_lt(steps_count, 0)) ? ($send(Opal.Range.$new(0, steps_count['$-@'](), false).$step(step.$abs()), 'map', [], "-@".$to_proc()).$reverse()) : (Opal.Range.$new(0, steps_count, false).$step(step.$abs()))));
      result = $send(steps, 'map', [], function $$8(i){var self = $$8.$$s == null ? this : $$8.$$s;

        
        if (i == null) i = nil;
        return $rb_plus(self, i);}, {$$s: self, $$source_location: ['./date.rb', 503]});
      if ((block !== nil)) {
        
        $send(result, 'each', [], function $$9(i){
          
          if (i == null) i = nil;
          return Opal.yield1(block, i);;}, {$$source_location: ['./date.rb', 507]});
        return self;
      } else {
        return result
      };
    }, {$$arity: -2, $$source_location: ['./date.rb', 492]});
    
    $def(self, '$upto', function $$upto(max) {
      var block = $$upto.$$p || nil, self = this;

      $$upto.$$p = null;
      
      ;
      return $send(self, 'step', [max, 1], block.$to_proc());
    }, {$$source_location: ['./date.rb', 514]});
    
    $def(self, '$downto', function $$downto(min) {
      var block = $$downto.$$p || nil, self = this;

      $$downto.$$p = null;
      
      ;
      return $send(self, 'step', [min, -1], block.$to_proc());
    }, {$$source_location: ['./date.rb', 518]});
    
    $def(self, '$cwday', function $$cwday() {
      var self = this;

      return self.date.getDay() || 7
    }, {$$source_location: ['./date.rb', 522]});
    
    $def(self, '$cweek', function $$cweek() {
      var self = this;

      
      var d = new Date(self.date);
      d.setHours(0,0,0);
      d.setDate(d.getDate()+4-(d.getDay()||7));
      return Math.ceil((((d-new Date(d.getFullYear(),0,1))/8.64e7)+1)/7);
    
    }, {$$source_location: ['./date.rb', 526]});
    $defs(self, '$_days_in_month', function $$_days_in_month(year, month) {
      
      
      var leap = ((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0);
      return [31, (leap ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];
    
    }, {$$source_location: ['./date.rb', 535]});
    $alias(self, "eql?", "==");
    return $alias(self, "succ", "next");
  })($nesting[0], null, $nesting);
  self.$require("date/date_time");
  return self.$require("date/formatters");
};

Opal.modules["time"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $defs = Opal.defs, $ensure_kwargs = Opal.ensure_kwargs, $hash_get = Opal.hash_get, $send = Opal.send, $eqeqeq = Opal.eqeqeq, $truthy = Opal.truthy, $rb_gt = Opal.rb_gt, $rb_plus = Opal.rb_plus, $alias = Opal.alias, $def = Opal.def, $return_self = Opal.return_self, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('define_method,===,new_offset,utc,year,month,day,getutc,strftime,>,+,def_formatter,rfc2822,xmlschema,wrap,require');
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Time');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    $defs(self, '$parse', function $$parse(str) {
      
      
      var d = Date.parse(str);
      if (d !== d) {
        // parsing failed, d is a NaN
        // probably str is not in ISO 8601 format, which is the only format, required to be supported by Javascript
        // try to make the format more like ISO or more like Chrome and parse again
        str = str.replace(/^(\d+)([\./])(\d+)([\./])?(\d+)?/, function(matched_sub, c1, c2, c3, c4, c5, offset, orig_string) {
          if ((c2 === c4) && c5) {
            // 2007.10.1 or 2007/10/1 are ok, but 2007/10.1 is not, convert to 2007-10-1
            return c1 + '-' + c3 + '-' + c5;
          } else if (c3 && !c4) {
            // 2007.10 or 2007/10
            // Chrome and Ruby can parse "2007/10", assuming its "2007-10-01", do the same
            return c1 + '-' + c3 + '-01';
          };
          return matched_sub;
        });
        d = Date.parse(str);
      }
      return new Date(d);
    
    }, {$$source_location: ['./time.rb', 4]});
    $defs(self, '$def_formatter', function $$def_formatter(name, format, $kwargs) {
      var on_utc, utc_tz, tz_format, fractions, on, self = this;

      
      $kwargs = $ensure_kwargs($kwargs);
      
      on_utc = $hash_get($kwargs, "on_utc");if (on_utc == null) on_utc = false;
      
      utc_tz = $hash_get($kwargs, "utc_tz");if (utc_tz == null) utc_tz = nil;
      
      tz_format = $hash_get($kwargs, "tz_format");if (tz_format == null) tz_format = nil;
      
      fractions = $hash_get($kwargs, "fractions");if (fractions == null) fractions = false;
      
      on = $hash_get($kwargs, "on");if (on == null) on = self;
      return $send(on, 'define_method', [name], function $$1(fdigits){var $a, $b, self = $$1.$$s == null ? this : $$1.$$s, $ret_or_2 = nil, $ret_or_1 = nil, date = nil, str = nil;

        
        if (fdigits == null) fdigits = 0;
        if ($eqeqeq(($truthy(($ret_or_2 = (($a = $$$('::', 'DateTime', 'skip_raise')) ? 'constant' : nil))) ? ($$$('DateTime')) : ($ret_or_2)), ($ret_or_1 = self))) {
          date = ($truthy(on_utc) ? (self.$new_offset(0)) : (self))
        } else if ($eqeqeq(($truthy(($ret_or_2 = (($b = $$$('::', 'Date', 'skip_raise')) ? 'constant' : nil))) ? ($$$('Date')) : ($ret_or_2)), $ret_or_1)) {
          date = $$$('Time').$utc(self.$year(), self.$month(), self.$day())
        } else if ($eqeqeq($$$('Time'), $ret_or_1)) {
          date = ($truthy(on_utc) ? (self.$getutc()) : (self))
        } else {
          nil
        };
        str = date.$strftime(format);
        if (($truthy(fractions) && ($truthy($rb_gt(fdigits, 0))))) {
          str = $rb_plus(str, date.$strftime(".%" + (fdigits) + "N"))
        };
        if ($truthy(utc_tz)) {
          str = $rb_plus(str, ($truthy(self.$utc()) ? (utc_tz) : (date.$strftime(tz_format))))
        } else if ($truthy(tz_format)) {
          str = $rb_plus(str, date.$strftime(tz_format))
        };
        return str;}, {$$arity: -1, $$s: self, $$source_location: ['./time.rb', 29]});
    }, {$$arity: -3, $$source_location: ['./time.rb', 28]});
    self.$def_formatter("rfc2822", "%a, %d %b %Y %T ", (new Map([["utc_tz", "-00:00"], ["tz_format", "%z"]])));
    $alias(self, "rfc822", "rfc2822");
    self.$def_formatter("httpdate", "%a, %d %b %Y %T GMT", (new Map([["on_utc", true]])));
    self.$def_formatter("xmlschema", "%FT%T", (new Map([["utc_tz", "Z"], ["tz_format", "%:z"], ["fractions", true]])));
    $alias(self, "iso8601", "xmlschema");
    
    $def(self, '$to_date', function $$to_date() {
      var self = this;

      return $$('Date').$wrap(self)
    }, {$$source_location: ['./time.rb', 55]});
    
    $def(self, '$to_datetime', function $$to_datetime() {
      var self = this;

      return $$('DateTime').$wrap(self)
    }, {$$source_location: ['./time.rb', 59]});
    return $def(self, '$to_time', $return_self, {$$source_location: ['./time.rb', 63]});
  })($nesting[0], null, $nesting);
  return self.$require("date");
};

Opal.modules["atome/extensions/atome"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send, $find_super = Opal.find_super, $send2 = Opal.send2, $def = Opal.def, $klass = Opal.klass, $slice = Opal.slice, $eqeqeq = Opal.eqeqeq, $thrower = Opal.thrower, $rb_gt = Opal.rb_gt, $rb_plus = Opal.rb_plus, $to_ary = Opal.to_ary, $eqeq = Opal.eqeq, $rb_minus = Opal.rb_minus, $rb_divide = Opal.rb_divide, $rb_times = Opal.rb_times, $gvars = Opal.gvars, $ensure_kwargs = Opal.ensure_kwargs, $get_kwarg = Opal.get_kwarg, $hash_get = Opal.hash_get, $rb_lt = Opal.rb_lt, $rb_le = Opal.rb_le, $neqeq = Opal.neqeq, $hash_rehash = Opal.hash_rehash, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('require,key?,add_atomes_specificities,[],build_atome,to_proc,particle_list,puts,instance_variable_set,build_particle,build_sanitizer,[]=,initialized,set_atomes_specificities,build_render,build_molecule,add_to_molecule_list,is_a?,instance_exec,tools,build_template,build_code,build_test,preset_builder,include,join,map,===,to_s,raise,class,eval,retrieve,grab,refresh,>,length,+,slice,reject,delete_if,dup,even?,!,include?,select,each_with_object,==,deep_copy,to_px,-,/,box,text,touch,delete,to_h,merge,to_sym,app_identity,counter,each_value,atomes,aid,atomes_ids,instance_of?,define_method,default_params,send,new,object_id,*,global,call,<<,each,tag,uniq,Array,querySelector,addEventListener,Native,downcase,nil?,preventDefault,to_i,readAsText,user_atomes,getElementById,stopPropagation,importer_all,exception_import,lambda,id,fasten,dig,found_area_used,left,top,width,height,wait,all?,to_f,compute,min,max,resize_object,display,setItem,to_json,getItem,parse,host,times,now,<,schedule_recurrence,store_task,<=,>>,wday,year,month,hour,sec,!=,retrieve_task,stop,removeItem,retrieve_all_tasks,transform_keys,schedule_task,day,simulate,bottom,shadow,drag,circle,data,clear,display=,instance_variable_get,update_style');
  
  self.$require("time");
  (function($base, $parent_nesting) {
    var self = $module($base, 'ObjectExtension');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    return $def(self, '$new', function $ObjectExtension_new$1(params) {
      var bloc = $ObjectExtension_new$1.$$p || nil, self = this, renderer_found = nil, render_method = nil, molecule = nil, tool_content = nil;

      $ObjectExtension_new$1.$$p = null;
      
      ;
      if ($truthy(params['$key?']("atome"))) {
        
        $$('Universe').$add_atomes_specificities(params['$[]']("atome"));
        $send($$('Genesis'), 'build_atome', [params['$[]']("atome")], bloc.$to_proc());
      } else if ($truthy(params['$key?']("particle"))) {
        if ($truthy($$('Universe').$particle_list()['$[]'](params['$[]']("particle")))) {
          self.$puts("particle " + (params['$[]']("particle")) + " already exist you can't create it")
        } else {
          
          $$('Atome').$instance_variable_set("@main_" + (params['$[]']("particle")), bloc);
          $send($$('Genesis'), 'build_particle', [params['$[]']("particle"), (new Map([["render", params['$[]']("render")], ["return", params['$[]']("return")], ["store", params['$[]']("store")], ["type", params['$[]']("type")], ["category", params['$[]']("category")]]))], bloc.$to_proc());
        }
      } else if ($truthy(params['$key?']("sanitizer"))) {
        $send($$('Genesis'), 'build_sanitizer', [params['$[]']("sanitizer")], bloc.$to_proc())
      } else if ($truthy(params['$key?']("pre"))) {
        $$('Atome').$instance_variable_set("@pre_" + (params['$[]']("pre")), bloc)
      } else if ($truthy(params['$key?']("post"))) {
        $$('Atome').$instance_variable_set("@post_" + (params['$[]']("post")), bloc)
      } else if ($truthy(params['$key?']("after"))) {
        $$('Atome').$instance_variable_set("@after_" + (params['$[]']("after")), bloc)
      } else if ($truthy(params['$key?']("initialized"))) {
        $$('Atome').$initialized()['$[]='](params['$[]']("initialized"), bloc)
      } else if ($truthy(params['$key?']("read"))) {
        $$('Atome').$instance_variable_set("@read_" + (params['$[]']("read")), bloc)
      } else if ($truthy(params['$[]']("renderer"))) {
        
        renderer_found = params['$[]']("renderer");
        if ($truthy(params['$[]']("specific"))) {
          
          $$('Universe').$set_atomes_specificities(params);
          params['$[]=']("specific", "" + (params['$[]']("specific")) + "_");
        };
        render_method = "" + (renderer_found) + "_" + (params['$[]']("specific")) + (params['$[]']("method"));
        $send($$('Genesis'), 'build_render', [render_method], bloc.$to_proc());
      } else if ($truthy(params['$key?']("molecule"))) {
        
        molecule = params['$[]']("molecule");
        $send($$('Genesis'), 'build_molecule', [molecule], bloc.$to_proc());
        $$('Universe').$add_to_molecule_list(molecule);
      } else if ($truthy(params['$key?']("tool"))) {
        
        if ($truthy(bloc['$is_a?']($$('Proc')))) {
          tool_content = $send($$('Atome'), 'instance_exec', [], bloc.$to_proc())
        };
        $$('Universe').$tools()['$[]='](params['$[]']("tool"), tool_content);
      } else if ($truthy(params['$key?']("template"))) {
        $send($$('A'), 'build_template', [], bloc.$to_proc())
      } else if ($truthy(params['$key?']("code"))) {
        $send($$('A'), 'build_code', [], bloc.$to_proc())
      } else if ($truthy(params['$key?']("test"))) {
        $send($$('A'), 'build_test', [], bloc.$to_proc())
      } else if ($truthy(params['$key?']("preset"))) {
        $send($$('Atome'), 'preset_builder', [params['$[]']("preset")], bloc.$to_proc())
      };
      if ($truthy(((self, $find_super(self, 'new', $ObjectExtension_new$1, true, false)) != null ? "super" : nil))) {
        return $send2(self, $find_super(self, 'new', $ObjectExtension_new$1, false, true), 'new', [params], bloc)
      } else {
        return nil
      };
    }, {$$source_location: ['atome/extensions/atome.rb', 7]})
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Object');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.repeat = nil;
    
    self.$include($$('ObjectExtension'));
    
    $def(self, '$js_func', function $$js_func(function_name, $a) {try { 
      var $post_args, params, self = this, args = nil;

      
      $post_args = $slice(arguments, 1);
      params = $post_args;
      args = $send(params, 'map', [], function $$2(param){var self = $$2.$$s == null ? this : $$2.$$s, $ret_or_1 = nil;

        
        if (param == null) param = nil;
        if ($eqeqeq($$('String'), ($ret_or_1 = param))) {
          return "'" + (param) + "'"
        } else if (($eqeqeq($$('TrueClass'), $ret_or_1) || (($eqeqeq($$('FalseClass'), $ret_or_1) || ($eqeqeq($$('Numeric'), $ret_or_1)))))) {
          return param.$to_s()
        } else {
          return self.$raise($$('ArgumentError'), "Unsupported parameter type: " + (param.$class()))
        };}, {$$s: self, $$source_location: ['atome/extensions/atome.rb', 73]}).$join(", ");
      return $$('JS').$eval("" + (function_name) + "(" + (args) + ")");} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$arity: -2, $$source_location: ['atome/extensions/atome.rb', 72]});
    
    $def(self, '$js_class', function $$js_class(class_name) {try { 
      
      return $$('JS').$eval("return new " + (class_name) + "()")} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$source_location: ['atome/extensions/atome.rb', 86]});
    
    $def(self, '$refresh', function $$refresh() {
      var self = this;

      return $send(self.$grab("view"), 'retrieve', [], function $$3(child){
        
        if (child == null) child = nil;
        return child.$refresh();}, {$$source_location: ['atome/extensions/atome.rb', 91]})
    }, {$$source_location: ['atome/extensions/atome.rb', 90]});
    
    $def(self, '$truncate_string', function $$truncate_string(string, max_length) {
      
      if ($truthy($rb_gt(string.$length(), max_length))) {
        return $rb_plus(string.$slice(0, max_length), ".")
      } else {
        return string
      }
    }, {$$source_location: ['atome/extensions/atome.rb', 100]});
    
    $def(self, '$remove_key_pair_but', function $$remove_key_pair_but(hash, keys_to_keep) {
      
      return $send($send(hash.$dup(), 'delete_if', [], function $$4(key, value){var $ret_or_1 = nil, $ret_or_2 = nil;

        
        if (key == null) key = nil;
        if (value == null) value = nil;
        if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = key['$is_a?']($$('Integer')))) ? (key['$even?']()) : ($ret_or_2))))) {
          return keys_to_keep['$include?'](key)['$!']()
        } else {
          return $ret_or_1
        };}, {$$source_location: ['atome/extensions/atome.rb', 105]}), 'reject', [], function $$5(key, value){
        
        if (key == null) key = nil;
        if (value == null) value = nil;
        return keys_to_keep['$include?'](key);}, {$$source_location: ['atome/extensions/atome.rb', 105]})
    }, {$$source_location: ['atome/extensions/atome.rb', 104]});
    
    $def(self, '$filter_keys_to_keep', function $$filter_keys_to_keep(hash, keys_to_keep) {
      
      return $send(hash, 'select', [], function $$6(key, value){
        
        if (key == null) key = nil;
        if (value == null) value = nil;
        return keys_to_keep['$include?'](key);}, {$$source_location: ['atome/extensions/atome.rb', 111]})
    }, {$$source_location: ['atome/extensions/atome.rb', 110]});
    
    $def(self, '$deep_copy', function $$deep_copy(obj) {
      var self = this, $ret_or_1 = nil;

      if ($eqeqeq($$('Hash'), ($ret_or_1 = obj))) {
        return $send(obj, 'each_with_object', [(new Map())], function $$7($mlhs_tmp1, h){var $a, $b, self = $$7.$$s == null ? this : $$7.$$s, k = nil, v = nil;

          
          if ($mlhs_tmp1 == null) $mlhs_tmp1 = nil;
          if (h == null) h = nil;
          $b = $mlhs_tmp1, $a = $to_ary($b), (k = ($a[0] == null ? nil : $a[0])), (v = ($a[1] == null ? nil : $a[1])), $b;
          if ($eqeq(k, "code")) {
            return nil
          } else {
            return ($a = [self.$deep_copy(k), self.$deep_copy(v)], $send(h, '[]=', $a), $a[$a.length - 1])
          };}, {$$s: self, $$source_location: ['atome/extensions/atome.rb', 118], $$has_top_level_mlhs_arg: true})
      } else if ($eqeqeq($$('Array'), $ret_or_1)) {
        return $send(obj, 'map', [], function $$8(e){var self = $$8.$$s == null ? this : $$8.$$s;

          
          if (e == null) e = nil;
          return self.$deep_copy(e);}, {$$s: self, $$source_location: ['atome/extensions/atome.rb', 122]})
      } else {
        try {
          return obj.$dup()
        } catch ($err) {
          if (Opal.rescue($err, [$$('StandardError')])) {
            try {
              return obj
            } finally { Opal.pop_exception($err); }
          } else { throw $err; }
        }
      }
    }, {$$source_location: ['atome/extensions/atome.rb', 114]});
    
    $def(self, '$flash', function $$flash(msg) {
      var self = this, view_found = nil, width_f = nil, height_f = nil, flash_box_width = nil, flash_box_height = nil, flash_box_left = nil, flash_box_left_top = nil, flash_box = nil;

      
      view_found = self.$grab("view");
      width_f = view_found.$to_px("width");
      height_f = view_found.$to_px("height");
      flash_box_width = 235;
      flash_box_height = 112;
      flash_box_left = $rb_minus($rb_divide(width_f, 2), $rb_divide(flash_box_width, 2));
      flash_box_left_top = $rb_minus($rb_divide(height_f, 2), $rb_divide(flash_box_height, 2));
      flash_box = self.$box((new Map([["left", flash_box_left], ["top", flash_box_left_top], ["width", flash_box_width], ["height", flash_box_height], ["drag", true]])));
      flash_box.$text((new Map([["data", msg], ["left", 6], ["top", 6], ["overflow", "auto"]])));
      return $send(flash_box, 'touch', [true], function $$9(){
        return flash_box.$delete(true)}, {$$source_location: ['atome/extensions/atome.rb', 140]});
    }, {$$source_location: ['atome/extensions/atome.rb', 128]});
    
    $def(self, '$reorder_particles', function $$reorder_particles(hash_to_reorder) {
      var ordered_keys = nil, ordered_part = nil, other_part = nil;

      
      ordered_keys = ["renderers", "id", "alien", "type", "attach", "int8", "unit"];
      ordered_part = $send(ordered_keys, 'map', [], function $$10(k){
        
        if (k == null) k = nil;
        return [k, hash_to_reorder['$[]'](k)];}, {$$source_location: ['atome/extensions/atome.rb', 150]}).$to_h();
      other_part = $send(hash_to_reorder, 'reject', [], function $$11(k, _){
        
        if (k == null) k = nil;
        if (_ == null) _ = nil;
        return ordered_keys['$include?'](k);}, {$$source_location: ['atome/extensions/atome.rb', 151]});
      return ordered_part.$merge(other_part);
    }, {$$source_location: ['atome/extensions/atome.rb', 146]});
    
    $def(self, '$delete', function $Object_delete$12(atomes) {
      var self = this;

      return self.$grab("view").$delete(atomes)
    }, {$$source_location: ['atome/extensions/atome.rb', 156]});
    
    $def(self, '$identity_generator', function $$identity_generator() {
      
      return (((("a_") + ($$('Universe').$app_identity())) + "_") + ($$('Universe').$counter())).$to_sym()
    }, {$$source_location: ['atome/extensions/atome.rb', 160]});
    
    $def(self, '$hook', function $$hook(a_id) {
      var atome_get = nil;

      
      a_id = a_id.$to_sym();
      atome_get = "";
      $send($$('Universe').$atomes(), 'each_value', [], function $$13(atome){
        
        if (atome == null) atome = nil;
        if ($eqeq(atome.$aid(), a_id)) {
          return (atome_get = atome)
        } else {
          return nil
        };}, {$$source_location: ['atome/extensions/atome.rb', 167]});
      return atome_get;
    }, {$$source_location: ['atome/extensions/atome.rb', 164]});
    
    $def(self, '$grab', function $$grab(id_to_get) {
      var aid_to_get = nil;

      
      id_to_get = id_to_get.$to_sym();
      if ($eqeq(id_to_get, false)) {
        return nil
      };
      aid_to_get = $$('Universe').$atomes_ids()['$[]'](id_to_get);
      if ($truthy(aid_to_get['$instance_of?']($$('Array')))) {
        aid_to_get = ""
      };
      return $$('Universe').$atomes()['$[]'](aid_to_get);
    }, {$$source_location: ['atome/extensions/atome.rb', 173]});
    
    $def(self, '$atome_method_for_object', function $$atome_method_for_object(element) {
      var $yield = $$atome_method_for_object.$$p || nil, self = this;

      $$atome_method_for_object.$$p = null;
      return $send($$('Object'), 'define_method', [element], function $$14(params){var user_proc = $$14.$$p || nil, self = $$14.$$s == null ? this : $$14.$$s, default_parent = nil, $ret_or_1 = nil;

        $$14.$$p = null;
        
        ;
        if (params == null) params = nil;
        default_parent = ($truthy(($ret_or_1 = $$('Essentials').$default_params()['$[]'](element)['$[]']("attach"))) ? ($ret_or_1) : ("view"));
        return $send(self.$grab(default_parent), 'send', [element, params], user_proc.$to_proc());}, {$$arity: -1, $$s: self, $$source_location: ['atome/extensions/atome.rb', 184]})
    }, {$$source_location: ['atome/extensions/atome.rb', 182]});
    
    $def(self, '$wait', function $$wait(time, id) {try { 
      var proc = $$wait.$$p || nil, obj = nil, unique_id = nil, $ret_or_1 = nil, callback_id = nil;

      $$wait.$$p = null;
      
      ;
      if (id == null) id = nil;
      if ($truthy(["kill", "kill"]['$include?'](time))) {
        $$('JS').$eval("clearTimeout(window.timeoutIds['" + (id) + "']);")
      } else {
        
        obj = $$('Object').$new();
        unique_id = obj.$object_id();
        id = ($truthy(($ret_or_1 = id)) ? ($ret_or_1) : (unique_id));
        time = $rb_times(time, 1000);
        callback_id = "myRubyCallback_" + (id);
        $$('JS').$global()['$[]='](callback_id.$to_sym(), proc);
        $$('JS').$eval("if (!window.timeoutIds) { window.timeoutIds = {}; } window.timeoutIds['" + (id) + "'] = setTimeout(function() { " + (callback_id) + "(); }, " + (time) + ");");
      };
      return id;} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$arity: -2, $$source_location: ['atome/extensions/atome.rb', 190]});
    
    $def(self, '$repeat_callback', function $$repeat_callback(params, counter) {
      var self = this;

      return self.repeat['$[]'](params).$call(counter)
    }, {$$source_location: ['atome/extensions/atome.rb', 207]});
    
    $def(self, '$repeat', function $$repeat(delay, repeat) {try { 
      var proc = $$repeat.$$p || nil, self = this, $ret_or_1 = nil, repeat_id = nil;

      $$repeat.$$p = null;
      
      ;
      if (delay == null) delay = 1;
      if (repeat == null) repeat = 0;
      self.repeat = ($truthy(($ret_or_1 = self.repeat)) ? ($ret_or_1) : ([]));
      self.repeat['$<<'](proc);
      repeat_id = $rb_minus(self.repeat.$length(), 1);
      $$('JS').$eval("          function repeat(action, interval, repetitions) {\n" + "         let count = 0;\n" + "         let intervalId = null;\n" + "\n" + "         function executeAction() {\n" + "             if (count < repetitions) {\n" + "                 action(count);\n" + "                 count++;\n" + "             } else {\n" + "                 clearInterval(intervalId);\n" + "             }\n" + "         }\n" + "\n" + "         executeAction(); // execute immediatly\n" + "         intervalId = setInterval(executeAction, interval);\n" + "         return intervalId;\n" + "     }\n" + "\n" + "     function myAction(counter) {\n" + "         atomeJsToRuby(\"repeat_callback(" + (repeat_id) + ", \"+counter+\")\")\n" + "     }\n" + "\n" + "     const intervalId = repeat(myAction, " + (delay) + " * 1000, " + (repeat) + "); \n" + "\n" + "return intervalId;\n");
      return $rb_plus(repeat_id, 1);} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$arity: -1, $$source_location: ['atome/extensions/atome.rb', 211]});
    
    $def(self, '$stop', function $$stop(params) {try { 
      var self = this, $ret_or_1 = nil, repeater_to_stop = nil, waiter_to_stop = nil;

      if ($eqeqeq($$('Hash'), ($ret_or_1 = params))) {
        if ($truthy(params['$key?']("repeat"))) {
          
          repeater_to_stop = params['$[]']("repeat");
          return $$('JS').$eval("clearInterval(" + (repeater_to_stop) + ");\n");
        } else if ($truthy(params['$key?']("wait"))) {
          
          waiter_to_stop = params['$[]']("wait");
          return $$('JS').$eval("clearTimeout(window.timeoutIds['" + (waiter_to_stop) + "'])\n");
        } else {
          return self.$puts("msg from stop method: the :repeat key doesn't exist")
        }
      } else {
        return self.$puts("msg from stop method, this params is not a Hash")
      }} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$source_location: ['atome/extensions/atome.rb', 245]});
    
    $def(self, '$tagged', function $$tagged(params) {
      var atome_get = nil;

      
      atome_get = [];
      if ($truthy(params['$instance_of?']($$('Hash')))) {
        $send(params, 'each', [], function $$15(tag_name, tag_value){
          
          if (tag_name == null) tag_name = nil;
          if (tag_value == null) tag_value = nil;
          return $send($$('Universe').$atomes(), 'each', [], function $$16(atomes_id_found, atomes_found){var $a;

            
            if (atomes_id_found == null) atomes_id_found = nil;
            if (atomes_found == null) atomes_found = nil;
            if (($truthy(($a = atomes_found.$tag(), ($a === nil || $a == null) ? nil : $a['$instance_of?']($$('Hash')))) && ($eqeq(atomes_found.$tag()['$[]'](tag_name), tag_value)))) {
              return atome_get['$<<'](atomes_id_found)
            } else {
              return nil
            };}, {$$source_location: ['atome/extensions/atome.rb', 270]});}, {$$source_location: ['atome/extensions/atome.rb', 269]})
      } else {
        $send($$('Universe').$atomes(), 'each', [], function $$17(atomes_id_found, atomes_found){var $a;

          
          if (atomes_id_found == null) atomes_id_found = nil;
          if (atomes_found == null) atomes_found = nil;
          if (($truthy(($a = atomes_found.$tag(), ($a === nil || $a == null) ? nil : $a['$instance_of?']($$('Hash')))) && ($truthy(atomes_found.$tag()['$[]'](params))))) {
            return atome_get['$<<'](atomes_id_found)
          } else {
            return nil
          };}, {$$source_location: ['atome/extensions/atome.rb', 277]})
      };
      return atome_get;
    }, {$$source_location: ['atome/extensions/atome.rb', 266]});
    $gvars.current_hovered_element = nil;
    
    $def(self, '$shortcut', function $$shortcut($kwargs) {
      var block = $$shortcut.$$p || nil, key, option, affect, exclude, self = this, element_ids = nil;

      $$shortcut.$$p = null;
      
      ;
      $kwargs = $ensure_kwargs($kwargs);
      key = $get_kwarg($kwargs, "key");
      
      option = $hash_get($kwargs, "option");if (option == null) option = nil;
      
      affect = $hash_get($kwargs, "affect");if (affect == null) affect = "all";
      
      exclude = $hash_get($kwargs, "exclude");if (exclude == null) exclude = [];
      element_ids = $rb_plus(self.$Array(affect), self.$Array(exclude)).$uniq();
      $send(element_ids, 'each', [], function $$18(element_id){var element = nil;

        
        if (element_id == null) element_id = nil;
        element = $$('JS').$global()['$[]']("document").$querySelector("#" + (element_id));
        if ($eqeq(element_id.$to_sym(), "all")) {
          return nil
        } else {
          
          $send(element, 'addEventListener', ["mouseenter"], function $$19(){
            return ($gvars.current_hovered_element = element_id)}, {$$source_location: ['atome/extensions/atome.rb', 295]});
          return $send(element, 'addEventListener', ["mouseleave"], function $$20(){
            return ($gvars.current_hovered_element = nil)}, {$$source_location: ['atome/extensions/atome.rb', 296]});
        };}, {$$source_location: ['atome/extensions/atome.rb', 292]});
      return $send($$('JS').$global()['$[]']("document"), 'addEventListener', ["keydown"], function $$21(native_event){var self = $$21.$$s == null ? this : $$21.$$s, event = nil, key_pressed = nil, ctrl_pressed = nil, alt_pressed = nil, meta_pressed = nil, modifier_matched = nil, $ret_or_1 = nil, affect_condition = nil, exclude_condition = nil;
        if ($gvars.current_hovered_element == null) $gvars.current_hovered_element = nil;

        
        if (native_event == null) native_event = nil;
        event = self.$Native(native_event);
        key_pressed = event['$[]']("key").$to_s().$downcase();
        ctrl_pressed = event['$[]']("ctrlKey").$to_s();
        alt_pressed = event['$[]']("altKey").$to_s();
        meta_pressed = event['$[]']("metaKey").$to_s();
        modifier_matched = ($eqeqeq("ctrl", ($ret_or_1 = option)) ? (ctrl_pressed) : ($eqeqeq("alt", $ret_or_1) ? (alt_pressed) : ($eqeqeq("meta", $ret_or_1) ? (meta_pressed) : (true))));
        affect_condition = ($truthy(($ret_or_1 = affect['$==']("all"))) ? ($ret_or_1) : (self.$Array(affect)['$include?']($gvars.current_hovered_element)));
        exclude_condition = self.$Array(exclude)['$include?']($gvars.current_hovered_element)['$!']();
        if ($truthy($gvars.current_hovered_element['$nil?']())) {
          $gvars.current_hovered_element = "view"
        };
        if (((($eqeq(key_pressed, key.$to_s().$downcase()) && ($truthy(modifier_matched))) && ($truthy(affect_condition))) && ($truthy(exclude_condition)))) {
          return block.$call(key_pressed, $gvars.current_hovered_element)
        } else {
          return nil
        };}, {$$s: self, $$source_location: ['atome/extensions/atome.rb', 300]});
    }, {$$source_location: ['atome/extensions/atome.rb', 289]});
    
    $def(self, '$importer_all', function $$importer_all() {try { 
      var proc = $$importer_all.$$p || nil, self = this;

      $$importer_all.$$p = null;
      
      ;
      $send($$('JS').$global()['$[]']("document")['$[]']("body"), 'addEventListener', ["dragover"], function $$22(native_event){var self = $$22.$$s == null ? this : $$22.$$s, event = nil;

        
        if (native_event == null) native_event = nil;
        event = self.$Native(native_event);
        return event.$preventDefault();}, {$$s: self, $$source_location: ['atome/extensions/atome.rb', 327]});
      return $send($$('JS').$global()['$[]']("document")['$[]']("body"), 'addEventListener', ["drop"], function $$23(native_event){var self = $$23.$$s == null ? this : $$23.$$s, event = nil, files = nil;

        
        if (native_event == null) native_event = nil;
        event = self.$Native(native_event);
        event.$preventDefault();
        files = event['$[]']("dataTransfer")['$[]']("files");
        if ($truthy($rb_gt(files['$[]']("length").$to_i(), 0))) {
          return $send(Opal.Range.$new(0,files['$[]']("length").$to_i(), true), 'each', [], function $$24(i){var self = $$24.$$s == null ? this : $$24.$$s, file = nil, reader = nil;

            
            if (i == null) i = nil;
            file = files['$[]'](i);
            reader = $$('JS').$eval("let a= new FileReader(); return a");
            reader.$readAsText(file);
            $send(reader, 'addEventListener', ["load"], function $$25(){
              return proc.$call((new Map([["content", reader['$[]']("result").$to_s()], ["name", file['$[]']("name").$to_s()], ["type", file['$[]']("type").$to_s()], ["size", file['$[]']("size").$to_s()]])))}, {$$source_location: ['atome/extensions/atome.rb', 342]});
            return $send(reader, 'addEventListener', ["error"], function $$26(){var self = $$26.$$s == null ? this : $$26.$$s;

              return self.$puts($rb_plus("Error: ", file['$[]']("name").$to_s()))}, {$$s: self, $$source_location: ['atome/extensions/atome.rb', 345]});}, {$$s: self, $$source_location: ['atome/extensions/atome.rb', 338]})
        } else {
          return nil
        };}, {$$s: self, $$source_location: ['atome/extensions/atome.rb', 332]});} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$source_location: ['atome/extensions/atome.rb', 326]});
    
    $def(self, '$exception_import', function $$exception_import(atome_id) {try { 
      var proc = $$exception_import.$$p || nil, self = this, special_div = nil;

      $$exception_import.$$p = null;
      
      ;
      if ($truthy($$('Universe').$user_atomes()['$include?'](atome_id.$to_sym()))) {
        
        special_div = $$('JS').$global()['$[]']("document").$getElementById(atome_id);
        $send(special_div, 'addEventListener', ["dragover"], function $$27(native_event){var self = $$27.$$s == null ? this : $$27.$$s, event = nil;

          
          if (native_event == null) native_event = nil;
          event = self.$Native(native_event);
          special_div['$[]']("style")['$[]=']("backgroundColor", "red");
          event.$preventDefault();
          return event.$stopPropagation();}, {$$s: self, $$source_location: ['atome/extensions/atome.rb', 356]});
        $send(special_div, 'addEventListener', ["dragleave"], function $$28(native_event){var self = $$28.$$s == null ? this : $$28.$$s, event = nil;

          
          if (native_event == null) native_event = nil;
          event = self.$Native(native_event);
          special_div['$[]']("style")['$[]=']("backgroundColor", "yellow");
          return event.$stopPropagation();}, {$$s: self, $$source_location: ['atome/extensions/atome.rb', 363]});
        $send(special_div, 'addEventListener', ["drop"], function $$29(native_event){var self = $$29.$$s == null ? this : $$29.$$s, event = nil, files = nil;

          
          if (native_event == null) native_event = nil;
          event = self.$Native(native_event);
          event.$preventDefault();
          event.$stopPropagation();
          files = event['$[]']("dataTransfer")['$[]']("files");
          if ($truthy($rb_gt(files['$[]']("length").$to_i(), 0))) {
            return $send(Opal.Range.$new(0,files['$[]']("length").$to_i(), true), 'each', [], function $$30(i){var self = $$30.$$s == null ? this : $$30.$$s, file = nil, reader = nil;

              
              if (i == null) i = nil;
              file = files['$[]'](i);
              reader = $$('JS').$eval("let a= new FileReader(); return a");
              reader.$readAsText(file);
              $send(reader, 'addEventListener', ["load"], function $$31(){
                return proc.$call((new Map([["content", reader['$[]']("result").$to_s()], ["name", file['$[]']("name").$to_s()], ["type", file['$[]']("type").$to_s()], ["size", file['$[]']("size").$to_s()]])))}, {$$source_location: ['atome/extensions/atome.rb', 381]});
              return $send(reader, 'addEventListener', ["error"], function $$32(){var self = $$32.$$s == null ? this : $$32.$$s;

                return self.$puts($rb_plus("Error: ", file['$[]']("name").$to_s()))}, {$$s: self, $$source_location: ['atome/extensions/atome.rb', 384]});}, {$$s: self, $$source_location: ['atome/extensions/atome.rb', 377]})
          } else {
            return nil
          };}, {$$s: self, $$source_location: ['atome/extensions/atome.rb', 369]});
        return $send($$('JS').$global()['$[]']("document")['$[]']("body"), 'addEventListener', ["drop"], function $$33(native_event){var self = $$33.$$s == null ? this : $$33.$$s, event = nil;

          
          if (native_event == null) native_event = nil;
          event = self.$Native(native_event);
          event.$preventDefault();
          return event.$stopPropagation();}, {$$s: self, $$source_location: ['atome/extensions/atome.rb', 390]});
      } else {
        return nil
      };} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$source_location: ['atome/extensions/atome.rb', 353]});
    
    $def(self, '$importer', function $$importer(target) {
      var proc = $$importer.$$p || nil, self = this;

      $$importer.$$p = null;
      
      ;
      if (target == null) target = "all";
      if ($eqeq(target, "all")) {
        return $send(self, 'importer_all', [], proc.$to_proc())
      } else {
        return $send(self, 'exception_import', [target], proc.$to_proc())
      };
    }, {$$arity: -1, $$source_location: ['atome/extensions/atome.rb', 398]});
    
    $def(self, '$infos', function $$infos() {try { 
      var $a, self = this, particle_list = nil, infos = nil;

      
      particle_list = $$('Universe').$particle_list().$dup();
      particle_list.$delete("password");
      particle_list.$delete("selection");
      infos = (new Map());
      particle_list['$[]=']("css", "poil");
      $send(particle_list, 'each', [], function $$34(particle_found){var $a, self = $$34.$$s == null ? this : $$34.$$s;

        
        if (particle_found == null) particle_found = nil;
        if ($truthy(self.$send(particle_found['$[]'](0))['$nil?']())) {
          return nil
        } else {
          return ($a = [particle_found['$[]'](0), self.$send(particle_found['$[]'](0))], $send(infos, '[]=', $a), $a[$a.length - 1])
        };}, {$$s: self, $$source_location: ['atome/extensions/atome.rb', 412]});
      infos['$[]=']("css", ($a = infos['$[]']("css").$to_s(), typeof Opal.compile === 'function' ? eval(Opal.compile($a, {scope_variables: ["particle_list", "infos"], arity_check: false, file: '(eval)', eval: true})) : self.$eval($a)));
      return infos;} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$source_location: ['atome/extensions/atome.rb', 406]});
    
    $def(self, '$dig', function $$dig() {
      var self = this, ids = nil, dig_recursive = nil;

      
      ids = [];
      dig_recursive = $send(self, 'lambda', [], function $$35(atome){var self = $$35.$$s == null ? this : $$35.$$s;

        
        if (atome == null) atome = nil;
        ids['$<<'](atome.$id());
        return $send(atome.$fasten(), 'each', [], function $$36(fasten_atome){var self = $$36.$$s == null ? this : $$36.$$s;

          
          if (fasten_atome == null) fasten_atome = nil;
          return dig_recursive.$call(self.$grab(fasten_atome));}, {$$s: self, $$source_location: ['atome/extensions/atome.rb', 424]});}, {$$s: self, $$source_location: ['atome/extensions/atome.rb', 422]});
      dig_recursive.$call(self);
      return ids;
    }, {$$source_location: ['atome/extensions/atome.rb', 420]});
    
    $def(self, '$fit', function $$fit(params) {
      var self = this, target_size = nil, axis = nil, objet_atome = nil, atomes_found = nil;

      
      if (!$truthy(params['$instance_of?']($$('Hash')))) {
        params = (new Map([["value", params]]))
      };
      target_size = params['$[]']("value");
      axis = params['$[]']("axis");
      objet_atome = self;
      atomes_found = objet_atome.$dig();
      return $send(self, 'found_area_used', [atomes_found], function $$37(result){var self = $$37.$$s == null ? this : $$37.$$s, total_width = nil, total_height = nil, ratio = nil;

        
        if (result == null) result = nil;
        total_width = $rb_minus(result['$[]']("max")['$[]']("x"), result['$[]']("min")['$[]']("x"));
        total_height = $rb_minus(result['$[]']("max")['$[]']("y"), result['$[]']("min")['$[]']("y"));
        ratio = ($eqeq(axis, "x") ? ($rb_divide(target_size, total_width)) : ($rb_divide(target_size, total_height)));
        return $send(atomes_found, 'each', [], function $$38(atome_id){var self = $$38.$$s == null ? this : $$38.$$s, current_atome = nil, left = nil, $ret_or_1 = nil, top = nil, new_width = nil, new_height = nil;

          
          if (atome_id == null) atome_id = nil;
          current_atome = self.$grab(atome_id);
          left = ($truthy(($ret_or_1 = current_atome.$left())) ? ($ret_or_1) : (0));
          top = ($truthy(($ret_or_1 = current_atome.$top())) ? ($ret_or_1) : (0));
          current_atome.$left($rb_times(left, ratio));
          current_atome.$top($rb_times(top, ratio));
          new_width = $rb_times(current_atome.$to_px("width"), ratio);
          new_height = $rb_times(current_atome.$to_px("height"), ratio);
          current_atome.$width(new_width);
          return current_atome.$height(new_height);}, {$$s: self, $$source_location: ['atome/extensions/atome.rb', 486]});}, {$$s: self, $$source_location: ['atome/extensions/atome.rb', 476]});
    }, {$$source_location: ['atome/extensions/atome.rb', 468]});
    
    $def(self, '$found_area_used', function $$found_area_used(ids) {
      var block = $$found_area_used.$$p || nil, self = this, check_interval = nil;

      $$found_area_used.$$p = null;
      
      ;
      check_interval = 0.1;
      return $send(self, 'wait', [check_interval], function $$39(){var $a, self = $$39.$$s == null ? this : $$39.$$s, all_ready = nil, min_x = nil, min_y = nil, max_x = nil, max_y = nil, result = nil;

        
        all_ready = $send(ids, 'all?', [], function $$40(id){var self = $$40.$$s == null ? this : $$40.$$s, atome = nil, width = nil, height = nil, $ret_or_1 = nil;

          
          if (id == null) id = nil;
          atome = self.$grab(id);
          width = (function() { try {
            return atome.$to_px("width").$to_f()
          } catch ($err) {
            if (Opal.rescue($err, [$$('StandardError')])) {
              try {
                return 0
              } finally { Opal.pop_exception($err); }
            } else { throw $err; }
          }})();
          height = (function() { try {
            return atome.$to_px("height").$to_f()
          } catch ($err) {
            if (Opal.rescue($err, [$$('StandardError')])) {
              try {
                return 0
              } finally { Opal.pop_exception($err); }
            } else { throw $err; }
          }})();
          if ($truthy(($ret_or_1 = $rb_gt(width, 0)))) {
            return $rb_gt(height, 0)
          } else {
            return $ret_or_1
          };}, {$$s: self, $$source_location: ['atome/extensions/atome.rb', 524]});
        if ($truthy(all_ready)) {
          
          $a = [$$$($$('Float'), 'INFINITY'), $$$($$('Float'), 'INFINITY')], (min_x = $a[0]), (min_y = $a[1]), $a;
          $a = [0, 0], (max_x = $a[0]), (max_y = $a[1]), $a;
          $send(ids, 'each', [], function $$41(id){var self = $$41.$$s == null ? this : $$41.$$s, atome = nil, x = nil, y = nil, width = nil, height = nil;

            
            if (id == null) id = nil;
            atome = self.$grab(id);
            x = (function() { try {
              return atome.$compute((new Map([["particle", "left"]])))['$[]']("value").$to_f()
            } catch ($err) {
              if (Opal.rescue($err, [$$('StandardError')])) {
                try {
                  return 0
                } finally { Opal.pop_exception($err); }
              } else { throw $err; }
            }})();
            y = (function() { try {
              return atome.$compute((new Map([["particle", "top"]])))['$[]']("value").$to_f()
            } catch ($err) {
              if (Opal.rescue($err, [$$('StandardError')])) {
                try {
                  return 0
                } finally { Opal.pop_exception($err); }
              } else { throw $err; }
            }})();
            width = (function() { try {
              return atome.$to_px("width").$to_f()
            } catch ($err) {
              if (Opal.rescue($err, [$$('StandardError')])) {
                try {
                  return 0
                } finally { Opal.pop_exception($err); }
              } else { throw $err; }
            }})();
            height = (function() { try {
              return atome.$to_px("height").$to_f()
            } catch ($err) {
              if (Opal.rescue($err, [$$('StandardError')])) {
                try {
                  return 0
                } finally { Opal.pop_exception($err); }
              } else { throw $err; }
            }})();
            min_x = [min_x, x].$min();
            min_y = [min_y, y].$min();
            max_x = [max_x, $rb_plus(x, width)].$max();
            return (max_y = [max_y, $rb_plus(y, height)].$max());}, {$$s: self, $$source_location: ['atome/extensions/atome.rb', 534]});
          result = (new Map([["min", (new Map([["x", min_x], ["y", min_y]]))], ["max", (new Map([["x", max_x], ["y", max_y]]))]]));
          if ((block !== nil)) {
            return block.$call(result)
          } else {
            return nil
          };
        } else {
          return $send(self, 'found_area_used', [ids], block.$to_proc())
        };}, {$$s: self, $$source_location: ['atome/extensions/atome.rb', 523]});
    }, {$$source_location: ['atome/extensions/atome.rb', 519]});
    
    $def(self, '$calculate_total_size', function $$calculate_total_size(objet_atome, axis) {
      var self = this, total_size = nil, max_other_axis_size = nil;

      
      total_size = ($eqeq(axis, "x") ? (objet_atome.$to_px("width")) : (objet_atome.$to_px("height")));
      max_other_axis_size = ($eqeq(axis, "x") ? (objet_atome.$to_px("height")) : (objet_atome.$to_px("width")));
      $send(objet_atome.$fasten(), 'each', [], function $$42(child_id){var self = $$42.$$s == null ? this : $$42.$$s, child = nil, child_size = nil, other_axis_size = nil;

        
        if (child_id == null) child_id = nil;
        child = self.$grab(child_id);
        child_size = ($eqeq(axis, "x") ? (child.$to_px("width")) : (child.$to_px("height")));
        other_axis_size = ($eqeq(axis, "x") ? (child.$to_px("height")) : (child.$to_px("width")));
        total_size = $rb_plus(total_size, child_size);
        return (max_other_axis_size = [max_other_axis_size, other_axis_size].$max());}, {$$s: self, $$source_location: ['atome/extensions/atome.rb', 561]});
      return [total_size, max_other_axis_size];
    }, {$$source_location: ['atome/extensions/atome.rb', 558]});
    
    $def(self, '$resize_and_reposition', function $$resize_and_reposition(objet_atome, scale_factor, axis, max_other_axis_size) {
      var self = this, current_position = nil;

      
      current_position = 0;
      self.$resize_object(objet_atome, scale_factor, axis, max_other_axis_size);
      current_position = $rb_plus(current_position, ($eqeq(axis, "x") ? (objet_atome.$to_px("width")) : (objet_atome.$to_px("height"))));
      return $send(objet_atome.$fasten(), 'each', [], function $$43(child_id){var self = $$43.$$s == null ? this : $$43.$$s, child = nil;

        
        if (child_id == null) child_id = nil;
        child = self.$grab(child_id);
        self.$resize_object(child, scale_factor, axis, max_other_axis_size);
        child.$top($rb_times(child.$top(), scale_factor));
        child.$left($rb_times(child.$left(), scale_factor));
        return (current_position = $rb_plus(current_position, child.$to_px("height")));}, {$$s: self, $$source_location: ['atome/extensions/atome.rb', 575]});
    }, {$$source_location: ['atome/extensions/atome.rb', 571]});
    
    $def(self, '$resize_object', function $$resize_object(objet, scale_factor, axis, max_other_axis_size) {
      var new_width = nil, new_height = nil;

      if ($eqeq(axis, "x")) {
        
        new_width = $rb_times(objet.$width(), scale_factor);
        new_height = $rb_divide(new_width, $rb_divide(objet.$width().$to_f(), objet.$height()));
        objet.$width(new_width);
        return objet.$height([new_height, max_other_axis_size].$min());
      } else {
        
        new_height = $rb_times(objet.$height(), scale_factor);
        new_width = $rb_divide(new_height, $rb_divide(objet.$height().$to_f(), objet.$width()));
        objet.$height(new_height);
        return objet.$width([new_width, max_other_axis_size].$min());
      }
    }, {$$source_location: ['atome/extensions/atome.rb', 584]});
    
    $def(self, '$atomizer', function $$atomizer(params) {
      var id = nil, id_wanted = nil, basis = nil, a = nil;

      
      if (!$truthy(params['$instance_of?']($$('Hash')))) {
        params = (new Map([["target", params]]))
      };
      id = params['$[]']("id");
      id_wanted = ($truthy(id) ? ((new Map([["id", id]]))) : ((new Map())));
      basis = (new Map([["alien", params['$[]']("target")], ["renderers", ["html"]], ["type", "atomized"]])).$merge(id_wanted);
      a = $$('Atome').$new(basis);
      return a;
    }, {$$source_location: ['atome/extensions/atome.rb', 598]});
    
    $def(self, '$allow_right_touch', function $$allow_right_touch(allow) {try { 
      var js_prevent = nil, js_allow = nil;

      
      js_prevent = "disableRightClick();\n";
      js_allow = "  enableRightClick();\n" + "\n";
      if ($eqeq(allow, true)) {
        return $$('JS').$eval(js_allow)
      } else {
        return $$('JS').$eval(js_prevent)
      };} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$source_location: ['atome/extensions/atome.rb', 612]});
    
    $def(self, '$allow_copy', function $$allow_copy(allow) {try { 
      
      if ($truthy(allow)) {
        return $$('JS').$eval("document.body.style.userSelect = 'auto';  // allow text slectiion \n" + "document.removeEventListener('copy', preventDefaultAction);  // allow copy\n")
      } else {
        return $$('JS').$eval("document.body.style.userSelect = 'none';  // prevent text selection\n" + "document.addEventListener('copy', preventDefaultAction);  // prevent copy\n")
      }} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$source_location: ['atome/extensions/atome.rb', 628]});
    
    $def(self, '$above', function $$above(parent, margin, ref) {
      var self = this, item = nil, item_height = nil, pos = nil;

      
      if (margin == null) margin = 6;
      if (ref == null) ref = self.$grab("view");
      item = self.$grab(parent);
      if (!$truthy(margin['$is_a?']($$('Numeric')))) {
        
        item_height = ref.$to_px("height");
        margin = $rb_divide($rb_times(margin.$to_f(), item_height), 100);
      };
      pos = $rb_plus($rb_plus(item.$to_px("bottom"), item.$height()), margin);
      item.$top("auto");
      if ($eqeq(item.$display(), "none")) {
        return 33
      } else {
        return pos
      };
    }, {$$arity: -2, $$source_location: ['atome/extensions/atome.rb', 644]});
    
    $def(self, '$below', function $$below(parent, margin, ref) {
      var self = this, item = nil, item_height = nil, pos = nil;

      
      if (margin == null) margin = 6;
      if (ref == null) ref = self.$grab("view");
      item = self.$grab(parent);
      if (!$truthy(margin['$is_a?']($$('Numeric')))) {
        
        item_height = ref.$to_px("height");
        margin = $rb_divide($rb_times(margin.$to_f(), item_height), 100);
      };
      pos = $rb_plus($rb_plus(item.$to_px("top"), item.$to_px("height")), margin);
      if ($eqeq(item.$display(), "none")) {
        return 0
      } else {
        return pos
      };
    }, {$$arity: -2, $$source_location: ['atome/extensions/atome.rb', 660]});
    
    $def(self, '$after', function $$after(parent, margin, ref) {
      var self = this, item = nil, item_width = nil, left_f = nil, width_f = nil, pos = nil;

      
      if (margin == null) margin = 6;
      if (ref == null) ref = self.$grab("view");
      item = self.$grab(parent);
      if (!$truthy(margin['$is_a?']($$('Numeric')))) {
        
        item_width = ref.$to_px("width");
        margin = $rb_divide($rb_times(margin.$to_f(), item_width), 100);
      };
      left_f = ($truthy(item.$left()['$instance_of?']($$('Integer'))) ? (item.$left()) : (item.$to_px("left")));
      width_f = ($truthy(item.$width()['$instance_of?']($$('Integer'))) ? (item.$width()) : (item.$to_px("width")));
      pos = $rb_plus($rb_plus(left_f, width_f), margin);
      if ($eqeq(item.$display(), "none")) {
        return 0
      } else {
        return pos
      };
    }, {$$arity: -2, $$source_location: ['atome/extensions/atome.rb', 675]});
    
    $def(self, '$before', function $$before(parent, margin, ref) {
      var self = this, item = nil, item_width = nil, pos = nil;

      
      if (margin == null) margin = 6;
      if (ref == null) ref = self.$grab("view");
      item = self.$grab(parent);
      if (!$truthy(margin['$is_a?']($$('Numeric')))) {
        
        item_width = ref.$to_px("width");
        margin = $rb_divide($rb_times(margin.$to_f(), item_width), 100);
      };
      pos = $rb_plus($rb_plus(item.$to_px("right"), item.$width()), margin);
      if ($eqeq(item.$display(), "none")) {
        return 0
      } else {
        return pos
      };
    }, {$$arity: -2, $$source_location: ['atome/extensions/atome.rb', 700]});
    
    $def(self, '$store_task', function $$store_task(name, config) {
      
      return $$('JS').$global()['$[]']("localStorage").$setItem(name, config.$to_json())
    }, {$$source_location: ['atome/extensions/atome.rb', 715]});
    
    $def(self, '$retrieve_task', function $$retrieve_task(name) {
      var config = nil;

      
      config = $$('JS').$global()['$[]']("localStorage").$getItem(name);
      if ($truthy(config['$nil?']())) {
        return nil
      } else {
        return $$('JSON').$parse(config)
      };
    }, {$$source_location: ['atome/extensions/atome.rb', 720]});
    
    $def(self, '$retrieve_all_tasks', function $$retrieve_all_tasks() {
      var tasks = nil, local_storage = nil, length = nil;

      
      tasks = [];
      local_storage = $$('JS').$global()['$[]']("localStorage");
      if ($eqeq($$('Atome').$host(), "web-opal")) {
        $send(local_storage, 'each', [], function $$44(key){var value = nil;

          
          if (key == null) key = nil;
          value = local_storage.$getItem(key);
          if ($truthy(value)) {
            
            value = $$('JSON').$parse(value);
            return tasks['$<<']((new Map([["name", key], ["config", value]])));
          } else {
            return nil
          };}, {$$source_location: ['atome/extensions/atome.rb', 730]})
      } else {
        
        length = local_storage['$[]']("length").$to_i();
        $send(length, 'times', [], function $$45(i){var key = nil, value = nil;

          
          if (i == null) i = nil;
          key = local_storage.$call("key", i);
          value = local_storage.$call("getItem", key);
          if ($truthy(value)) {
            return tasks['$<<']((new Map([["name", key], ["config", $$('JSON').$parse(value.$to_s())]])))
          } else {
            return nil
          };}, {$$source_location: ['atome/extensions/atome.rb', 739]});
      };
      return tasks;
    }, {$$source_location: ['atome/extensions/atome.rb', 726]});
    
    $def(self, '$schedule_task', function $$schedule_task(name, years, month, day, hours, minutes, seconds, $kwargs) {
      var block = $$schedule_task.$$p || nil, recurrence, self = this, target_time = nil, now = nil, seconds_until_target = nil, wait_task = nil;

      $$schedule_task.$$p = null;
      
      ;
      $kwargs = $ensure_kwargs($kwargs);
      
      recurrence = $hash_get($kwargs, "recurrence");if (recurrence == null) recurrence = nil;
      target_time = $$('Time').$new(years, month, day, hours, minutes, seconds);
      now = $$('Time').$now();
      if ($truthy($rb_lt(target_time, now))) {
        return $send(self, 'schedule_recurrence', [name, target_time, recurrence], block.$to_proc())
      } else {
        
        seconds_until_target = $rb_minus(target_time, now);
        wait_task = $send(self, 'wait', [seconds_until_target], function $$46(){var self = $$46.$$s == null ? this : $$46.$$s;

          
          block.$call();
          if ($truthy(recurrence)) {
            return $send(self, 'schedule_recurrence', [name, target_time, recurrence], block.$to_proc())
          } else {
            return nil
          };}, {$$s: self, $$source_location: ['atome/extensions/atome.rb', 757]});
        return self.$store_task(name, (new Map([["wait", wait_task], ["target_time", target_time], ["recurrence", recurrence]])));
      };
    }, {$$arity: -8, $$source_location: ['atome/extensions/atome.rb', 749]});
    
    $def(self, '$schedule_recurrence', function $$schedule_recurrence(name, target_time, recurrence) {
      var block = $$schedule_recurrence.$$p || nil, self = this, now = nil, next_time = nil, $ret_or_1 = nil, wday = nil, week_of_month = nil, next_month = nil, seconds_until_next = nil, wait_task = nil;

      $$schedule_recurrence.$$p = null;
      
      ;
      now = $$('Time').$now();
      next_time = target_time;
      if ($eqeqeq("yearly", ($ret_or_1 = recurrence))) {
        while ($truthy($rb_le(next_time, now))) {
        next_time = $rb_plus(next_time, $rb_times($rb_times($rb_times(365, 24), 60), 60))
        }
      } else if ($eqeqeq("monthly", $ret_or_1)) {
        while ($truthy($rb_le(next_time, now))) {
        next_time = next_time['$>>'](1)
        }
      } else if ($eqeqeq("weekly", $ret_or_1)) {
        while ($truthy($rb_le(next_time, now))) {
        next_time = $rb_plus(next_time, $rb_times($rb_times($rb_times(7, 24), 60), 60))
        }
      } else if ($eqeqeq("daily", $ret_or_1)) {
        while ($truthy($rb_le(next_time, now))) {
        next_time = $rb_plus(next_time, $rb_times($rb_times(24, 60), 60))
        }
      } else if ($eqeqeq("hourly", $ret_or_1)) {
        while ($truthy($rb_le(next_time, now))) {
        next_time = $rb_plus(next_time, $rb_times(60, 60))
        }
      } else if ($eqeqeq("minutely", $ret_or_1)) {
        while ($truthy($rb_le(next_time, now))) {
        next_time = $rb_plus(next_time, 60)
        }
      } else if ($eqeqeq("secondly", $ret_or_1)) {
        while ($truthy($rb_le(next_time, now))) {
        next_time = $rb_plus(next_time, 1)
        }
      } else if ($eqeqeq($$('Hash'), $ret_or_1)) {
        if ($truthy(recurrence['$[]']("weekly"))) {
          
          wday = recurrence['$[]']("weekly");
          while ($truthy($rb_le(next_time, now))) {
          next_time = $rb_plus(next_time, $rb_times($rb_times($rb_times(7, 24), 60), 60))
          };
          while (!($eqeq(next_time.$wday(), wday))) {
          next_time = $rb_plus(next_time, $rb_times($rb_times(24, 60), 60))
          };
        } else if ($truthy(recurrence['$[]']("monthly"))) {
          
          week_of_month = recurrence['$[]']("monthly")['$[]']("week");
          wday = recurrence['$[]']("monthly")['$[]']("wday");
          while ($truthy($rb_le(next_time, now))) {
          
            next_month = next_time['$>>'](1);
            next_time = $$('Time').$new(next_month.$year(), next_month.$month(), 1, target_time.$hour(), target_time.$min(), target_time.$sec());
            while ($neqeq(next_time.$wday(), wday)) {
            next_time = $rb_plus(next_time, $rb_times($rb_times(24, 60), 60))
            };
            next_time = $rb_plus(next_time, $rb_times($rb_times($rb_times($rb_times($rb_minus(week_of_month, 1), 7), 24), 60), 60));
          };
        }
      } else {
        
        self.$puts("Invalid recurrence option");
        return nil;
      };
      seconds_until_next = $rb_minus(next_time, $$('Time').$now());
      wait_task = $send(self, 'wait', [seconds_until_next], function $$47(){var self = $$47.$$s == null ? this : $$47.$$s;

        
        block.$call();
        return $send(self, 'schedule_recurrence', [name, next_time, recurrence], block.$to_proc());}, {$$s: self, $$source_location: ['atome/extensions/atome.rb', 805]});
      return self.$store_task(name, (new Map([["wait", wait_task], ["target_time", next_time], ["recurrence", recurrence]])));
    }, {$$source_location: ['atome/extensions/atome.rb', 765]});
    
    $def(self, '$stop_task', function $$stop_task(name) {
      var self = this, task_config = nil;

      
      task_config = self.$retrieve_task(name);
      if (!$truthy(task_config)) {
        return nil
      };
      self.$stop((new Map([["wait", task_config['$[]']("wait")]])));
      return $$('JS').$global()['$[]']("localStorage").$removeItem(name);
    }, {$$source_location: ['atome/extensions/atome.rb', 813]});
    
    $def(self, '$relaunch_all_tasks', function $$relaunch_all_tasks() {
      var self = this, tasks = nil;

      
      tasks = self.$retrieve_all_tasks();
      return $send(tasks, 'each', [], function $$48(task){var self = $$48.$$s == null ? this : $$48.$$s, name = nil, config = nil, target_time_found = nil, target_time = nil, recurrence_found = nil, recurrence = nil;

        
        if (task == null) task = nil;
        name = task['$[]']("name");
        config = task['$[]']("config");
        target_time_found = config['$[]']("target_time");
        target_time = $$('Time').$parse(target_time_found);
        recurrence_found = config['$[]']("recurrence");
        if (!$truthy(recurrence_found)) {
          return nil
        };
        recurrence = ($truthy(config['$[]']("recurrence")['$is_a?']($$('Hash'))) ? ($send(config['$[]']("recurrence"), 'transform_keys', [], "to_sym".$to_proc())) : (config['$[]']("recurrence").$to_sym()));
        return $send(self, 'schedule_task', [name, target_time.$year(), target_time.$month(), target_time.$day(), target_time.$hour(), target_time.$min(), target_time.$sec(), (new Map([["recurrence", recurrence]]))], function $$49(){var self = $$49.$$s == null ? this : $$49.$$s;

          return self.$puts("Relaunched task  " + (name) + "(add proc here)")}, {$$s: self, $$source_location: ['atome/extensions/atome.rb', 833]});}, {$$s: self, $$source_location: ['atome/extensions/atome.rb', 825]});
    }, {$$source_location: ['atome/extensions/atome.rb', 822]});
    
    $def(self, '$reenact', function $$reenact(id, action) {
      var self = this, atome_wanted = nil;

      
      atome_wanted = self.$grab(id);
      if ($truthy(atome_wanted)) {
        return atome_wanted.$simulate(action)
      } else {
        return nil
      };
    }, {$$source_location: ['atome/extensions/atome.rb', 839]});
    
    $def(self, '$console', function $$console(debug) {try { 
      var self = this, console = nil, console_back = nil, console_top = nil, console_output = nil, console_clear = nil;

      if ($truthy(debug)) {
        
        console = self.$box((new Map([["id", "console"], ["width", "auto"], ["height", 225], ["bottom", 0], ["top", "auto"], ["left", 0], ["right", 0], ["depth", 30], ["color", (new Map([["alpha", 0], ["red", 0], ["green", 0], ["blue", 0]]))]])));
        console_back = console.$box((new Map([["id", "console_back"], ["blur", (new Map([["value", 5], ["affect", "back"]]))], ["overflow", "auto"], ["width", "auto"], ["height", "auto"], ["top", 25], ["bottom", 0], ["left", 0], ["right", 0], ["depth", 30], ["color", (new Map([["alpha", 0.5], ["red", 0], ["green", 0], ["blue", 0]]))]])));
        console_top = console.$box((new Map([["id", "console_top"], ["overflow", "auto"], ["width", "auto"], ["height", 25], ["top", 0], ["bottom", 0], ["left", 0], ["right", 0], ["depth", 30], ["color", (new Map([["alpha", 1], ["red", 0.3], ["green", 0.3], ["blue", 0.3]]))]])));
        $send(console_top, 'touch', ["double"], function $$50(){
          
          console.$height(25);
          console.$bottom(0);
          return console.$top("auto");}, {$$source_location: ['atome/extensions/atome.rb', 850]});
        console_top.$shadow((new Map([["id", "s1"], ["left", 0], ["top", 3], ["blur", 9], ["invert", false], ["red", 0], ["green", 0], ["blue", 0], ["alpha", 1]])));
        $send(console, 'drag', ["locked"], function $$51(event){var dy = nil, y = nil;

          
          if (event == null) event = nil;
          dy = event['$[]']("dy");
          y = $rb_plus(console.$to_px("top"), dy.$to_f());
          console.$top(y);
          return console.$height("auto");}, {$$source_location: ['atome/extensions/atome.rb', 861]});
        console_output = console_back.$text((new Map([["data", ""], ["id", "console_output"], ["component", (new Map([["size", 12]]))]])));
        $$('JS').$eval("(function() {\n" + "  var oldLog = console.log;\n" + "  var consoleDiv = document.getElementById(\"console_output\");\n" + "  console.log = function(message) {\n" + "    if (consoleDiv) {\n" + "      consoleDiv.innerHTML += '<p>' + message + '</p>';\n" + "    }\n" + "    oldLog.apply(console, arguments);\n" + "  };\n" + "}());\n");
        console_clear = console_top.$circle((new Map([["id", "console_clear"], ["color", "red"], ["top", 3], ["left", 3], ["width", 19], ["height", 19]])));
        $send(console_clear, 'touch', [true], function $$52(){
          return console_output.$data("")}, {$$source_location: ['atome/extensions/atome.rb', 882]});
        return $send($$('JS').$global()['$[]']("document"), 'addEventListener', ["contextmenu"], function $$53(event){
          
          if (event == null) event = nil;
          return nil;}, {$$source_location: ['atome/extensions/atome.rb', 885]});
      } else {
        
        self.$grab("console_back").$delete(true);
        return $send($$('JS').$global()['$[]']("document"), 'addEventListener', ["contextmenu"], function $$54(native_event){var self = $$54.$$s == null ? this : $$54.$$s, event = nil;

          
          if (native_event == null) native_event = nil;
          event = self.$Native(native_event);
          return event.$preventDefault();}, {$$s: self, $$source_location: ['atome/extensions/atome.rb', 889]});
      }} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$source_location: ['atome/extensions/atome.rb', 844]});
    return $def(self, '$a_console', function $$a_console() {
      var self = this, terminal = nil, top_bar = nil, close_icon = nil, clear_icon = nil, console = nil;

      
      terminal = self.$grab("view").$box((new Map([["top", 69], ["left", 69], ["width", 700], ["height", 30], ["id", "atome_console"], ["color", (new Map([["alpha", 1]]))], ["overflow", "visible"], ["drag", true]])));
      top_bar = terminal.$box((new Map([["top", 0], ["left", 0], ["width", 700], ["height", 30], ["id", "atome_console_top"]])));
      close_icon = top_bar.$box((new Map([["id", "console_close"], ["width", 12], ["height", 12], ["top", 3], ["left", 3], ["color", "red"]])));
      clear_icon = top_bar.$box((new Map([["id", "console_clear"], ["width", 12], ["height", 12], ["top", 3], ["left", 19], ["color", "green"]])));
      $send(close_icon, 'touch', [true], function $$55(){
        return terminal.$delete((new Map([["recursive", true]])))}, {$$source_location: ['atome/extensions/atome.rb', 903]});
      console = terminal.$box((new Map([["top", 30], ["left", 0], ["width", 700], ["height", 396], ["id", "atome_console_content"], ["overflow", "scroll"], ["resize", true], ["color", (new Map([["alpha", 0.39]]))], ["display", "block"]])));
      $send(clear_icon, 'touch', [true], function $$56(){
        return console.$clear(true)}, {$$source_location: ['atome/extensions/atome.rb', 910]});
      $send(top_bar, 'touch', ["double"], function $$57(){var $a;

        if ($eqeq(console.$display(), "block")) {
          return ($a = ["none"], $send(console, 'display=', $a), $a[$a.length - 1])
        } else {
          return ($a = ["block"], $send(console, 'display=', $a), $a[$a.length - 1])
        }}, {$$source_location: ['atome/extensions/atome.rb', 914]});
      return $send(self, 'wait', [2], function $$58(){var self = $$58.$$s == null ? this : $$58.$$s;

        
        terminal.$drag(false);
        return $send(self, 'wait', [2], function $$59(){
          return terminal.$drag(true)}, {$$source_location: ['atome/extensions/atome.rb', 923]});}, {$$s: self, $$source_location: ['atome/extensions/atome.rb', 921]});
    }, {$$source_location: ['atome/extensions/atome.rb', 896]});
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'CssProxy');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.parent_key = $proto.current_atome = $proto.js = $proto.css = $proto.style = nil;
    
    
    $def(self, '$initialize', function $$initialize(js, $a, $b) {
      var $post_args, parent_key, current_atome, self = this;

      
      $post_args = $slice(arguments, 1);
      
      if ($post_args.length > 1) parent_key = $post_args.shift();if (parent_key == null) parent_key = nil;
      
      current_atome = $post_args.shift();if (current_atome == null) current_atome = nil;
      self.js = js;
      self.css = (new Map());
      self.parent_key = parent_key;
      self.style = (new Map());
      return (self.current_atome = current_atome);
    }, {$$arity: -3, $$source_location: ['atome/extensions/atome.rb', 941]});
    
    $def(self, '$[]', function $CssProxy_$$$60(key) {
      var $a, self = this;

      if ($truthy(self.parent_key)) {
        return ($a = self.current_atome.$instance_variable_get("@css")['$[]'](self.parent_key), ($a === nil || $a == null) ? nil : $a['$[]'](key))
      } else {
        return $$('CssProxy').$new(self.js, key, self.current_atome)
      }
    }, {$$source_location: ['atome/extensions/atome.rb', 949]});
    
    $def(self, '$[]=', function $CssProxy_$$$eq$61(key, value) {
      var self = this;

      
      if ($truthy(self.parent_key)) {
        
        self.js['$[]'](self.parent_key)['$[]='](key, value);
        self.current_atome.$instance_variable_set("@css", $hash_rehash(new Map([[self.parent_key, $hash_rehash(new Map([[key, value]]))]])));
        self.css['$[]='](self.parent_key, $hash_rehash(new Map([[key, value]])));
        self.$puts("==> parent key: " + (self.parent_key) + ", Clé: " + (key) + ", value: " + (value));
      } else {
        
        self.style['$[]='](key, value);
        self.js['$[]='](key, value);
      };
      if ($truthy(self.parent_key['$nil?']())) {
        return self.js.$update_style(self.style)
      } else {
        return nil
      };
    }, {$$source_location: ['atome/extensions/atome.rb', 957]});
    
    $def(self, '$to_s', function $$to_s() {
      var self = this;

      return self.current_atome.$instance_variable_get("@css").$to_s()
    }, {$$source_location: ['atome/extensions/atome.rb', 971]});
    return $def(self, '$receptor', function $$receptor(msg) {
      var bloc = $$receptor.$$p || nil, parsed = nil;

      $$receptor.$$p = null;
      
      ;
      parsed = $$('JSON').$parse(msg);
      return bloc.$call(parsed);
    }, {$$source_location: ['atome/extensions/atome.rb', 975]});
  })($nesting[0], null, $nesting);
  
  $def(self, '$timer_callback', function $$timer_callback(val, id) {
    var self = this, proc_found = nil;

    
    proc_found = self.$grab(id).$instance_variable_get("@timer_callback");
    if ($truthy(proc_found['$is_a?']($$('Proc')))) {
      return proc_found.$call(val)
    } else {
      return nil
    };
  }, {$$source_location: ['atome/extensions/atome.rb', 982]});
  return $def(self, '$js_timer', function $$js_timer(start, stop, id) {try { 
    var $ret_or_1 = nil, kill_timer_js = nil, js_timer = nil;

    
    if (stop == null) stop = nil;
    if (id == null) id = nil;
    id = ($truthy(($ret_or_1 = id)) ? ($ret_or_1) : ("default_timer"));
    if ($eqeq(start, "kill")) {
      
      kill_timer_js = "if (window['" + (id) + "_raf_id']) {\n" + "  cancelAnimationFrame(window['" + (id) + "_raf_id']);\n" + "  window['" + (id) + "_raf_id'] = null;\n" + "}\n" + "window['" + (id) + "_stop'] = true;\n";
      $$('JS').$eval(kill_timer_js);
      return nil;
    };
    js_timer = "let start = " + (start) + ";\n" + "let stop = " + (stop) + ";\n" + "let startTime = performance.now();\n" + "window['" + (id) + "_stop'] = false;\n" + "\n" + "const advance = () => {\n" + "  if (window['" + (id) + "_stop']) return;\n" + "\n" + "  let now = performance.now();\n" + "  let elapsed = now - startTime;\n" + "  let position = start + elapsed;\n" + "\n" + "  if (stop === null || position <= stop) {\n" + "    atomeJsToRuby(\"timer_callback(\" + position + \",'" + (id) + "')\");\n" + "    window['" + (id) + "_raf_id'] = requestAnimationFrame(advance);\n" + "  }\n" + "};\n" + "advance();\n";
    return $$('JS').$eval(js_timer);} catch($e) {
      if ($e === Opal.t_eval_return) return $e.$v;
      throw $e;
    }
  }, {$$arity: -2, $$source_location: ['atome/extensions/atome.rb', 1055]});
};

Opal.modules["atome/extensions/mathematics"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $rb_divide = Opal.rb_divide, $def = Opal.def, $rb_times = Opal.rb_times, $rb_minus = Opal.rb_minus, $rb_plus = Opal.rb_plus, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('/,value,*,-,+');
  return (function($base, $super) {
    var self = $klass($base, $super, 'Atome');

    
    
    
    $def(self, '$/', function $Atome_$slash$1(other) {
      var self = this;

      return $rb_divide(self.$value(), other)
    }, {$$source_location: ['atome/extensions/mathematics.rb', 5]});
    
    $def(self, '$*', function $Atome_$$2(other) {
      var self = this;

      return $rb_times(self.$value(), other)
    }, {$$source_location: ['atome/extensions/mathematics.rb', 9]});
    
    $def(self, '$-', function $Atome_$minus$3(other) {
      var self = this;

      return $rb_minus(self.$value(), other)
    }, {$$source_location: ['atome/extensions/mathematics.rb', 13]});
    return $def(self, '$+', function $Atome_$plus$4(other) {
      var self = this;

      return $rb_plus(self.$value(), other)
    }, {$$source_location: ['atome/extensions/mathematics.rb', 17]});
  })($nesting[0], null)
};

Opal.modules["atome/atome"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $def = Opal.def, $truthy = Opal.truthy, $send = Opal.send, $eqeq = Opal.eqeq, $thrower = Opal.thrower, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('include,attr_accessor,[],identity_generator,each_value,atomes,==,id,each,apply,grab,add_to_atomes,id_to_aid,new,current_user,[]=,reorder_particles,collapse,object,html,particle_main,to_proc,instance_variable_set,particle_pre,particle_callback,store_proc,render,particle_post,historicize,particle_after,reject,instance_variables,join,map,inspect,instance_variable_get,class');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Atome');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.aid = $proto.id = nil;
    
    self.$include($$('Essentials'));
    self.$attr_accessor("controller_proc");
    
    $def(self, '$aid', function $$aid(_v) {
      var self = this;

      
      if (_v == null) _v = nil;
      return self.aid;
    }, {$$arity: -1, $$source_location: ['atome/atome.rb', 11]});
    
    $def(self, '$initialize', function $$initialize(new_atome) {try { var $t_return = $thrower('return'); 
      var atomes_proc = $$initialize.$$p || nil, self = this, $ret_or_1 = nil, reordered_atome = nil;

      $$initialize.$$p = null;
      
      ;
      if (new_atome == null) new_atome = (new Map());
      self.history = (new Map());
      self.tag = (new Map());
      self.tick = (new Map());
      self.storage = (new Map());
      self.behavior = (new Map());
      self.selected = false;
      self.unit = (new Map());
      self.apply = [];
      self.collect = (new Map());
      self.int8 = (new Map());
      self.css = (new Map());
      self.code = (new Map());
      self.aid = ($truthy(($ret_or_1 = new_atome['$[]']("aid"))) ? ($ret_or_1) : (self.$identity_generator()));
      self.controller_proc = [];
      self.id = ($truthy(($ret_or_1 = new_atome['$[]']("id"))) ? ($ret_or_1) : (self.aid));
      $send($$('Universe').$atomes(), 'each_value', [], function $$1(atome_f){var self = $$1.$$s == null ? this : $$1.$$s;
        if (self.id == null) self.id = nil;

        
        if (atome_f == null) atome_f = nil;
        if (!$eqeq(atome_f.$id(), self.id)) {
          return nil
        };
        if ($truthy(new_atome['$[]']("affect"))) {
          $send(new_atome['$[]']("affect"), 'each', [], function $$2(affected){var self = $$2.$$s == null ? this : $$2.$$s;
            if (self.id == null) self.id = nil;

            
            if (affected == null) affected = nil;
            return self.$grab(affected).$apply(self.id);}, {$$s: self, $$source_location: ['atome/atome.rb', 42]})
        };
        $t_return.$throw(false, $$1.$$is_lambda);}, {$$s: self, $$ret: $t_return, $$source_location: ['atome/atome.rb', 38]});
      $$('Universe').$add_to_atomes(self.aid, self);
      $$('Universe').$id_to_aid(self.id, self.aid);
      self.type = ($truthy(($ret_or_1 = new_atome['$[]']("type"))) ? ($ret_or_1) : ("element"));
      self.fasten = [];
      self.affect = [];
      self.category = [];
      self.html = $$('HTML').$new(self.id, self);
      self.headless = $$('Headless').$new(self.id, self);
      self.initialized = (new Map());
      self.creator = $$('Universe').$current_user();
      if ($truthy(atomes_proc)) {
        new_atome['$[]=']("code", atomes_proc)
      };
      reordered_atome = self.$reorder_particles(new_atome);
      return self.$collapse(reordered_atome);} catch($e) {
        if ($e === $t_return) return $e.$v;
        throw $e;
      } finally {$t_return.is_orphan = true;}
    }, {$$arity: -1, $$source_location: ['atome/atome.rb', 19]});
    
    $def(self, '$js', function $$js() {
      var self = this;

      return self.$html().$object()
    }, {$$source_location: ['atome/atome.rb', 65]});
    
    $def(self, '$particle_creation', function $$particle_creation(element, params, store, rendering) {
      var user_proc = $$particle_creation.$$p || nil, self = this;

      $$particle_creation.$$p = null;
      
      ;
      params = $send(self, 'particle_main', [element, params], user_proc.$to_proc());
      if ($truthy(store)) {
        self.$instance_variable_set("@" + (element), params)
      };
      params = $send(self, 'particle_pre', [element, params], user_proc.$to_proc());
      self.$particle_callback(element);
      if ($truthy(user_proc)) {
        $send(self, 'store_proc', [element, params], user_proc.$to_proc())
      };
      if ($truthy(rendering)) {
        $send(self, 'render', [element, params], user_proc.$to_proc())
      };
      params = $send(self, 'particle_post', [element, params], user_proc.$to_proc());
      if ($truthy(store)) {
        self.$instance_variable_set("@" + (element), params)
      };
      $$('Universe').$historicize(self.aid, "write", element, params);
      return $send(self, 'particle_after', [element, params], user_proc.$to_proc());
    }, {$$source_location: ['atome/atome.rb', 69]});
    return $def(self, '$inspect', function $$inspect() {
      var self = this, filtered_vars = nil, content = nil;

      
      filtered_vars = $send(self.$instance_variables(), 'reject', [], function $$3(var$){var $ret_or_1 = nil;

        
        if (var$ == null) var$ = nil;
        if ($truthy(($ret_or_1 = var$['$==']("@html_object")))) {
          return $ret_or_1
        } else {
          return var$['$==']("@history")
        };}, {$$source_location: ['atome/atome.rb', 89]});
      content = $send(filtered_vars, 'map', [], function $$4(var$){var self = $$4.$$s == null ? this : $$4.$$s;

        
        if (var$ == null) var$ = nil;
        return "" + (var$) + "=" + (self.$instance_variable_get(var$).$inspect());}, {$$s: self, $$source_location: ['atome/atome.rb', 90]}).$join(", ");
      return "#<" + (self.$class()) + ": " + (content) + ">";
    }, {$$source_location: ['atome/atome.rb', 88]});
  })($nesting[0], null, $nesting)
};

Opal.modules["atome/genesis/atomes"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $send = Opal.send, $truthy = Opal.truthy, $eqeq = Opal.eqeq, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('new,instance_of?,[],[]=,create_color_hash,sub,to_s,to_sym,==,length,split,instance_variable_set,compute,delete,color,merge!,add_user=');
  
  self.$new((new Map([["atome", "editor"], ["type", "hash"]])));
  $send(self, 'new', [(new Map([["sanitizer", "editor"]]))], function $$1(params){
    
    if (params == null) params = nil;
    if (!$truthy(params['$instance_of?']($$('Hash')))) {
      params = (new Map())
    };
    if (!$truthy(params['$[]']("data"))) {
      params['$[]=']("data", [])
    };
    return params;}, {$$source_location: ['atome/genesis/atomes.rb', 5]});
  self.$new((new Map([["atome", "color"], ["type", "hash"]])));
  $send(self, 'new', [(new Map([["sanitizer", "color"]]))], function $$2(params){var self = $$2.$$s == null ? this : $$2.$$s, uniq_value = nil;

    
    if (params == null) params = nil;
    if (!$truthy(params['$instance_of?']($$('Hash')))) {
      params = self.$create_color_hash(params)
    };
    if (!$truthy(params['$[]']("id"))) {
      
      uniq_value = "" + (params['$[]']("red").$to_s().$sub(".", "_")) + "_" + (params['$[]']("green").$to_s().$sub(".", "_")) + "_" + (params['$[]']("blue").$to_s().$sub(".", "_")) + "_" + (params['$[]']("alpha").$to_s().$sub(".", "_")) + "_" + (params['$[]']("left").$to_s().$sub(".", "_")) + "_" + (params['$[]']("top").$to_s().$sub(".", "_")) + "_" + (params['$[]']("diffusion").$to_s().$sub(".", "_"));
      params['$[]=']("id", (("color_") + (uniq_value)).$to_sym());
    };
    return params;}, {$$s: self, $$source_location: ['atome/genesis/atomes.rb', 13]});
  self.$new((new Map([["atome", "image"]])));
  $send(self, 'new', [(new Map([["sanitizer", "image"]]))], function $$3(params){
    
    if (params == null) params = nil;
    if (!$truthy(params['$instance_of?']($$('Hash')))) {
      
      if ($eqeq(params.$to_s().$split(".").$length(), 1)) {
        params = "" + (params) + ".png"
      };
      params = (new Map([["path", "./medias/images/" + (params)]]));
    };
    return params;}, {$$source_location: ['atome/genesis/atomes.rb', 23]});
  $send(self, 'new', [(new Map([["post", "image"]]))], function $$4(){var self = $$4.$$s == null ? this : $$4.$$s;

    
    self.$instance_variable_set("@width", self.$compute((new Map([["particle", "width"]])))['$[]']("value"));
    return self.$instance_variable_set("@height", self.$compute((new Map([["particle", "height"]])))['$[]']("value"));}, {$$s: self, $$source_location: ['atome/genesis/atomes.rb', 34]});
  self.$new((new Map([["atome", "video"]])));
  $send(self, 'new', [(new Map([["sanitizer", "video"]]))], function $$5(params){
    
    if (params == null) params = nil;
    if (!$truthy(params['$instance_of?']($$('Hash')))) {
      
      if ($eqeq(params.$to_s().$split(".").$length(), 1)) {
        params = "" + (params) + ".mp4"
      };
      params = (new Map([["path", "./medias/videos/" + (params)]]));
    };
    return params;}, {$$source_location: ['atome/genesis/atomes.rb', 40]});
  self.$new((new Map([["atome", "www"]])));
  $send(self, 'new', [(new Map([["atome", "shadow"]]))], function $$6(params){var attach_value = nil;

    
    if (params == null) params = nil;
    if ($truthy(params)) {
      
      attach_value = params.$delete("affect");
      params['$[]=']("affect", attach_value);
    };
    return params;}, {$$source_location: ['atome/genesis/atomes.rb', 52]});
  $send(self, 'new', [(new Map([["atome", "border"]]))], function $$7(params){var attach_value = nil;

    
    if (params == null) params = nil;
    if ($truthy(params)) {
      
      attach_value = params.$delete("affect");
      params['$[]=']("affect", attach_value);
    };
    return params;}, {$$source_location: ['atome/genesis/atomes.rb', 59]});
  $send(self, 'new', [(new Map([["post", "border"]]))], function $$8(params){var self = $$8.$$s == null ? this : $$8.$$s;

    
    if (params == null) params = nil;
    return self.$color(params['$[]']("color"));}, {$$s: self, $$source_location: ['atome/genesis/atomes.rb', 66]});
  self.$new((new Map([["atome", "raw"]])));
  self.$new((new Map([["atome", "shape"]])));
  self.$new((new Map([["atome", "code"]])));
  self.$new((new Map([["atome", "audio"]])));
  $send(self, 'new', [(new Map([["sanitizer", "audio"]]))], function $$9(params){
    
    if (params == null) params = nil;
    if (!$truthy(params['$instance_of?']($$('Hash')))) {
      
      if ($eqeq(params.$to_s().$split(".").$length(), 1)) {
        params = "" + (params) + ".mp4"
      };
      params = (new Map([["path", "./medias/audios/" + (params)]]));
    };
    return params;}, {$$source_location: ['atome/genesis/atomes.rb', 74]});
  self.$new((new Map([["atome", "element"]])));
  $send(self, 'new', [(new Map([["sanitizer", "element"]]))], function $$10(params){var default_params = nil;

    
    if (params == null) params = nil;
    default_params = (new Map([["data", ""]]));
    return default_params['$merge!'](params);}, {$$source_location: ['atome/genesis/atomes.rb', 86]});
  self.$new((new Map([["atome", "animation"]])));
  self.$new((new Map([["atome", "group"]])));
  self.$new((new Map([["atome", "text"], ["type", "hash"]])));
  $send(self, 'new', [(new Map([["pre", "text"]]))], function $$11(params){
    
    if (params == null) params = nil;
    return params;}, {$$source_location: ['atome/genesis/atomes.rb', 93]});
  $send(self, 'new', [(new Map([["sanitizer", "text"]]))], function $$12(params){
    
    if (params == null) params = nil;
    if (!$truthy(params['$instance_of?']($$('Hash')))) {
      params = (new Map([["data", params]]))
    };
    return params;}, {$$source_location: ['atome/genesis/atomes.rb', 113]});
  $send(self, 'new', [(new Map([["atome", "human"]]))], function $$13(params){var $a;

    
    if (params == null) params = nil;
    return ($a = [params['$[]']("id")], $send($$('Universe'), 'add_user=', $a), $a[$a.length - 1]);}, {$$source_location: ['atome/genesis/atomes.rb', 120]});
  self.$new((new Map([["atome", "machine"]])));
  self.$new((new Map([["atome", "paint"]])));
  self.$new((new Map([["atome", "vector"]])));
  self.$new((new Map([["atome", "table"]])));
  self.$new((new Map([["atome", "atomized"], ["type", "hash"]])));
  self.$new((new Map([["atome", "map"], ["type", "hash"]])));
  self.$new((new Map([["atome", "vr"], ["type", "hash"]])));
  return self.$new((new Map([["atome", "draw"], ["type", "hash"]])));
};

Opal.modules["atome/presets/atome"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $eqeq = Opal.eqeq, $def = Opal.def, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('[],default_params,[]=,identity_generator,merge,reject,has_key?,to_sym,include?,applicable_atomes,==,reorder_particles,new,to_proc');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Atome');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.renderers = $proto.id = nil;
    
    
    $def(self, '$atome_common', function $$atome_common(preset_list, params) {
      var self = this, basic_params = nil, preset_params = nil, $ret_or_1 = nil, essential_params = nil, reordered_params = nil, $ret_or_2 = nil;

      
      basic_params = (new Map([["renderers", []]]));
      preset_params = ($truthy(($ret_or_1 = $$('Essentials').$default_params()['$[]'](preset_list))) ? ($ret_or_1) : ((new Map())));
      basic_params['$[]=']("type", ($truthy(($ret_or_1 = preset_params['$[]']("type"))) ? ($ret_or_1) : ("element")));
      basic_params['$[]=']("id", ($truthy(($ret_or_1 = params['$[]']("id"))) ? ($ret_or_1) : (self.$identity_generator())));
      basic_params['$[]=']("renderers", ($truthy(($ret_or_1 = self.renderers)) ? ($ret_or_1) : (preset_params['$[]']("renderers"))));
      essential_params = basic_params.$merge(preset_params);
      reordered_params = $send(essential_params, 'reject', [], function $$1(key, _){
        
        if (key == null) key = nil;
        if (_ == null) _ = nil;
        return params['$has_key?'](key);}, {$$source_location: ['atome/presets/atome.rb', 20]});
      params = reordered_params.$merge(params);
      params['$[]=']("id", params['$[]']("id").$to_sym());
      if ($truthy($$('Universe').$applicable_atomes()['$include?'](preset_list))) {
        if (!$truthy(params['$[]']("affect"))) {
          params['$[]=']("affect", ($eqeq(self.id, "view") ? (["black_matter"]) : ([self.id])))
        }
      } else {
        params['$[]=']("attach", ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = params['$[]']("attach"))) ? ($ret_or_2) : (self.id)))) ? ($ret_or_1) : ("view")))
      };
      return self.$reorder_particles(params);
    }, {$$source_location: ['atome/presets/atome.rb', 10]});
    return $def(self, '$preset_common', function $$preset_common(params) {
      var bloc = $$preset_common.$$p || nil;

      $$preset_common.$$p = null;
      
      ;
      return $send($$('Atome'), 'new', [params], bloc.$to_proc());
    }, {$$source_location: ['atome/presets/atome.rb', 39]});
  })($nesting[0], null, $nesting)
};

Opal.modules["json"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $Object = Opal.Object, $eqeqeq = Opal.eqeqeq, $defs = Opal.defs, $truthy = Opal.truthy, $def = Opal.def, $return_val = Opal.return_val, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('raise,new,push,[]=,[],create_id,json_create,const_get,attr_accessor,create_id=,===,parse,generate,from_object,merge,to_json,responds_to?,to_io,write,to_s,to_a,strftime');
  
  (function($base, $parent_nesting) {
    var self = $module($base, 'JSON');

    var $a, $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    $klass($nesting[0], $$('StandardError'), 'JSONError');
    $klass($nesting[0], $$('JSONError'), 'ParserError');
    
    var $hasOwn = Opal.hasOwnProperty;

    function $parse(source) {
      try {
        return JSON.parse(source);
      } catch (e) {
        self.$raise($$$($$('JSON'), 'ParserError'), e.message);
      }
    };

    function to_opal(value, options) {
      var klass, arr, hash, i, ii, k;

      switch (typeof value) {
        case 'string':
          return value;

        case 'number':
          return value;

        case 'boolean':
          return !!value;

        case 'undefined':
          return nil;

        case 'object':
          if (!value) return nil;

          if (value.$$is_array) {
            arr = (Opal.hash_get(options, 'array_class')).$new();

            for (i = 0, ii = value.length; i < ii; i++) {
              (arr).$push(to_opal(value[i], options));
            }

            return arr;
          }
          else {
            hash = (Opal.hash_get(options, 'object_class')).$new();

            for (k in value) {
              if ($hasOwn.call(value, k)) {
                ($a = [k, to_opal(value[k], options)], $send((hash), '[]=', $a), $a[$a.length - 1]);
              }
            }

            if (!Opal.hash_get(options, 'parse') && (klass = (hash)['$[]']($$('JSON').$create_id())) != nil) {
              return $Object.$const_get(klass).$json_create(hash);
            }
            else {
              return hash;
            }
          }
        }
    };
  ;
    (function(self, $parent_nesting) {
      
      return self.$attr_accessor("create_id")
    })(Opal.get_singleton_class(self), $nesting);
    self['$create_id=']("json_class");
    $defs(self, '$[]', function $JSON_$$$1(value, options) {
      var self = this;

      
      if (options == null) options = (new Map());
      if ($eqeqeq($$('String'), value)) {
        return self.$parse(value, options)
      } else {
        return self.$generate(value, options)
      };
    }, {$$arity: -2, $$source_location: ['./json.rb', 75]});
    $defs(self, '$parse', function $$parse(source, options) {
      var self = this;

      
      if (options == null) options = (new Map());
      return self.$from_object($parse(source), options.$merge((new Map([["parse", true]]))));
    }, {$$arity: -2, $$source_location: ['./json.rb', 83]});
    $defs(self, '$parse!', function $JSON_parse$excl$2(source, options) {
      var self = this;

      
      if (options == null) options = (new Map());
      return self.$parse(source, options);
    }, {$$arity: -2, $$source_location: ['./json.rb', 87]});
    $defs(self, '$load', function $$load(source, options) {
      var self = this;

      
      if (options == null) options = (new Map());
      return self.$from_object($parse(source), options);
    }, {$$arity: -2, $$source_location: ['./json.rb', 91]});
    $defs(self, '$from_object', function $$from_object(js_object, options) {
      var $ret_or_1 = nil;

      
      if (options == null) options = (new Map());
      if ($truthy(($ret_or_1 = options['$[]']("object_class")))) {
        $ret_or_1
      } else {
        options['$[]=']("object_class", $$('Hash'))
      };
      if ($truthy(($ret_or_1 = options['$[]']("array_class")))) {
        $ret_or_1
      } else {
        options['$[]=']("array_class", $$('Array'))
      };
      return to_opal(js_object, options);;
    }, {$$arity: -2, $$source_location: ['./json.rb', 96]});
    $defs(self, '$generate', function $$generate(obj, options) {
      
      
      if (options == null) options = (new Map());
      return obj.$to_json(options);
    }, {$$arity: -2, $$source_location: ['./json.rb', 103]});
    return $defs(self, '$dump', function $$dump(obj, io, limit) {
      var self = this, string = nil;

      
      if (io == null) io = nil;
      if (limit == null) limit = nil;
      string = self.$generate(obj);
      if ($truthy(io)) {
        
        if ($truthy(io['$responds_to?']("to_io"))) {
          io = io.$to_io()
        };
        io.$write(string);
        return io;
      } else {
        return string
      };
    }, {$$arity: -2, $$source_location: ['./json.rb', 107]});
  })($nesting[0], $nesting);
  (function($base, $super) {
    var self = $klass($base, $super, 'Object');

    
    return $def(self, '$to_json', function $$to_json() {
      var self = this;

      return self.$to_s().$to_json()
    }, {$$source_location: ['./json.rb', 122]})
  })($nesting[0], null);
  (function($base) {
    var self = $module($base, 'Enumerable');

    
    return $def(self, '$to_json', function $$to_json() {
      var self = this;

      return self.$to_a().$to_json()
    }, {$$source_location: ['./json.rb', 130]})
  })($nesting[0]);
  (function($base, $super) {
    var self = $klass($base, $super, 'Array');

    
    return $def(self, '$to_json', function $$to_json() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        result.push((self[i]).$to_json());
      }

      return '[' + result.join(',') + ']';
    
    }, {$$source_location: ['./json.rb', 136]})
  })($nesting[0], null);
  (function($base, $super) {
    var self = $klass($base, $super, 'Boolean');

    
    return $def(self, '$to_json', function $$to_json() {
      var self = this;

      return (self == true) ? 'true' : 'false';
    }, {$$source_location: ['./json.rb', 150]})
  })($nesting[0], null);
  (function($base, $super) {
    var self = $klass($base, $super, 'Hash');

    
    return $def(self, '$to_json', function $$to_json() {
      var self = this;

      
      var result = [];

      Opal.hash_each(self, false, function(key, value) {
        result.push((key).$to_s().$to_json() + ':' + (value).$to_json());
        return [false, false];
      });

      return '{' + result.join(',') + '}';
    
    }, {$$source_location: ['./json.rb', 156]})
  })($nesting[0], null);
  (function($base, $super) {
    var self = $klass($base, $super, 'NilClass');

    
    return $def(self, '$to_json', $return_val("null"), {$$source_location: ['./json.rb', 171]})
  })($nesting[0], null);
  (function($base, $super) {
    var self = $klass($base, $super, 'Numeric');

    
    return $def(self, '$to_json', function $$to_json() {
      var self = this;

      return self.toString();
    }, {$$source_location: ['./json.rb', 177]})
  })($nesting[0], null);
  (function($base, $super) {
    var self = $klass($base, $super, 'String');

    
    return $def(self, '$to_json', function $$to_json() {
      var self = this;

      return JSON.stringify(self);
    }, {$$source_location: ['./json.rb', 183]})
  })($nesting[0], null);
  (function($base, $super) {
    var self = $klass($base, $super, 'Time');

    
    return $def(self, '$to_json', function $$to_json() {
      var self = this;

      return self.$strftime("%FT%T%z").$to_json()
    }, {$$source_location: ['./json.rb', 189]})
  })($nesting[0], null);
  return (function($base, $super) {
    var self = $klass($base, $super, 'Date');

    
    
    
    $def(self, '$to_json', function $$to_json() {
      var self = this;

      return self.$to_s().$to_json()
    }, {$$source_location: ['./json.rb', 195]});
    return $def(self, '$as_json', function $$as_json() {
      var self = this;

      return self.$to_s()
    }, {$$source_location: ['./json.rb', 199]});
  })($nesting[0], null);
};

Opal.modules["atome/utilities/utilities"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $def = Opal.def, $send = Opal.send, $truthy = Opal.truthy, $eqeq = Opal.eqeq, $gvars = Opal.gvars, $thrower = Opal.thrower, $slice = Opal.slice, $to_a = Opal.to_a, $return_val = Opal.return_val, $rb_plus = Opal.rb_plus, $neqeq = Opal.neqeq, $rb_times = Opal.rb_times, $rb_minus = Opal.rb_minus, $rb_divide = Opal.rb_divide, $hash_rehash = Opal.hash_rehash, $not = Opal.not, $range = Opal.range, $rb_lt = Opal.rb_lt, $regexp = Opal.regexp, $return_ivar = Opal.return_ivar, self = Opal.top, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('require,attr_accessor,alert,class,gsub,[],global,to_a,each_with_index,key,sanitize_data_for_json,getItem,messages,is_a?,call,instance_exec,grab,to_proc,==,to_json,inspect,eval,<<,preset_list,define_method,send,default_params,merge,[]=,atome_common,preset_common,each,method,define_singleton_method,instance_variable_get,empty?,instance_variable_set,atome_js,vectoriser,data,fasten,include?,role,lambda,any?,+,!=,sort_by,-@,*,-,/,to_f,round,delete,last,grip,box,below,to_px,after,found_spacing_in_percent,length,block,size,sum,values,set,width,to_percent,left,set_help,get_help,set_example,get_example,initialized,add_font_to_css,html,!,instance_of?,get_sanitizer_method,particle_sanitizer,atome_pre_process,atome_post_process,story,first,puts,to_sym,proc,wait,atome,each_with_object,instance_variables,to_s,dup,id,duplicate,infos,new,retrieve,refresh_atome,collect,users,current_user=,debug,display,attach,remove,category,connection,store_messages,send_message,<,=~,scan,extract_attribute,identity_generator,polygon_def,convert_svg,image,object,path,getElementById,getAttribute,lines,to_h,map,split,each_line,strip,touch,text,clear,chomp,rindex,browser,terminal,read,determine_action,circle,end_with?,extract_and_sanitize_js,instance_eval,content,content=,js_func');
  
  self.$require("json");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Atome');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.duplicate = $proto.current_server = $proto.alternate = $proto.path = $proto.filer = nil;
    
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      self.$attr_accessor("initialized");
      
      $def(self, '$sanitize_data_for_json', function $$sanitize_data_for_json(data) {
        var self = this;

        
        self.$alert("====> " + (data) + "\n" + (data.$class()));
        return data.$gsub("\"", "\\\"");
      }, {$$source_location: ['atome/utilities/utilities.rb', 12]});
      
      $def(self, '$send_localstorage_content', function $$send_localstorage_content() {
        var self = this, storage = nil, storage_array = nil;

        
        storage = $$('JS').$global()['$[]']("localStorage");
        storage_array = storage.$to_a();
        return $send(storage_array, 'each_with_index', [], function $$1(_i, index){var self = $$1.$$s == null ? this : $$1.$$s, key = nil;

          
          if (_i == null) _i = nil;
          if (index == null) index = nil;
          key = $$('JS').$global()['$[]']("localStorage").$key(index);
          return self.$sanitize_data_for_json(storage.$getItem(key));}, {$$s: self, $$source_location: ['atome/utilities/utilities.rb', 20]});
      }, {$$source_location: ['atome/utilities/utilities.rb', 17]});
      
      $def(self, '$server_receiver', function $$server_receiver(params) {
        var callback_found = nil;

        
        callback_found = $$('Universe').$messages()['$[]'](params['$[]']("message_id"));
        if ($truthy(callback_found['$is_a?']($$('Proc')))) {
          return callback_found.$call(params)
        } else {
          return nil
        };
      }, {$$source_location: ['atome/utilities/utilities.rb', 26]});
      
      $def(self, '$file_handler', function $$file_handler(parent, filename, content, bloc) {
        var self = this, hash_content = nil;

        
        hash_content = (new Map([["filename", filename], ["content", content]]));
        return $send(self.$grab(parent), 'instance_exec', [hash_content], bloc.$to_proc());
      }, {$$source_location: ['atome/utilities/utilities.rb', 31]});
      
      $def(self, '$controller_sender', function $$controller_sender(message) {try { 
        var json_msg = nil, js_json_msg = nil, js_command = nil;
        if ($gvars.host == null) $gvars.host = nil;

        
        if ($eqeq($gvars.host, "html")) {
          return nil
        };
        json_msg = message.$to_json();
        js_json_msg = json_msg.$inspect();
        js_command = "atomeJS.controller_sender(" + (js_json_msg) + ")";
        return $$('JS').$eval(js_command);} catch($e) {
          if ($e === Opal.t_eval_return) return $e.$v;
          throw $e;
        }
      }, {$$source_location: ['atome/utilities/utilities.rb', 36]});
      
      $def(self, '$preset_builder', function $$preset_builder(preset_name) {
        var bloc = $$preset_builder.$$p || nil, self = this;

        $$preset_builder.$$p = null;
        
        ;
        $$('Universe').$preset_list()['$<<'](preset_name);
        $send($$('Object'), 'define_method', [preset_name], function $$2(params){var proc = $$2.$$p || nil, self = $$2.$$s == null ? this : $$2.$$s;

          $$2.$$p = null;
          
          ;
          if (params == null) params = (new Map());
          return $send(self.$grab("view"), 'send', [preset_name, params], proc.$to_proc());}, {$$arity: -1, $$s: self, $$source_location: ['atome/utilities/utilities.rb', 53]});
        return $send(self, 'define_method', [preset_name], function $$3(params){var self = $$3.$$s == null ? this : $$3.$$s, preset_to_add = nil;

          
          if (params == null) params = nil;
          if ($truthy(bloc['$is_a?']($$('Proc')))) {
            preset_to_add = $send(self, 'instance_exec', [params], bloc.$to_proc())
          };
          if ($truthy($$('Essentials').$default_params()['$[]'](preset_name))) {
            if ($truthy(preset_to_add)) {
              $$('Essentials').$default_params()['$[]'](preset_name).$merge(preset_to_add)
            }
          } else if ($truthy(preset_to_add)) {
            $$('Essentials').$default_params()['$[]='](preset_name, preset_to_add)
          };
          params = self.$atome_common(preset_name, params);
          return $send(self, 'preset_common', [params], bloc.$to_proc());}, {$$s: self, $$source_location: ['atome/utilities/utilities.rb', 56]});
      }, {$$source_location: ['atome/utilities/utilities.rb', 50]});
      
      $def(self, '$monitoring', function $$monitoring(atomes_to_monitor, particles_to_monitor) {
        var bloc = $$monitoring.$$p || nil, self = this;

        $$monitoring.$$p = null;
        
        ;
        return $send(atomes_to_monitor, 'each', [], function $$4(atome_to_monitor){var self = $$4.$$s == null ? this : $$4.$$s;

          
          if (atome_to_monitor == null) atome_to_monitor = nil;
          return $send(particles_to_monitor, 'each', [], function $$5(monitored_particle){var self = $$5.$$s == null ? this : $$5.$$s, original_method = nil;

            
            if (monitored_particle == null) monitored_particle = nil;
            original_method = atome_to_monitor.$method(monitored_particle);
            return $send(atome_to_monitor, 'define_singleton_method', [monitored_particle], function $$6($a){var proc = $$6.$$p || nil, $post_args, args, self = $$6.$$s == null ? this : $$6.$$s, value_before = nil;

              $$6.$$p = null;
              
              ;
              $post_args = $slice(arguments);
              args = $post_args;
              value_before = atome_to_monitor.$instance_variable_get("@" + (monitored_particle));
              if ($truthy(args['$empty?']())) {
                args = nil
              } else {
                
                if ($eqeq(monitored_particle, "touch")) {
                  
                  self.$instance_variable_set("@" + (monitored_particle), (new Map([["tap", args['$[]'](0)]])));
                  self.$instance_variable_set("@" + (monitored_particle) + "_code", (new Map([["touch", proc]])));
                  args = (new Map([["tap", args['$[]'](0)]]));
                } else {
                  self.$instance_variable_set("@" + (monitored_particle), args['$[]'](0))
                };
                args = args['$[]'](0);
              };
              if ($truthy(bloc['$is_a?']($$('Proc')))) {
                $send(self, 'instance_exec', [(new Map([["original", value_before], ["altered", args], ["particle", monitored_particle]]))], bloc.$to_proc())
              };
              return $send(original_method, 'call', $to_a(args));}, {$$arity: -1, $$s: self, $$source_location: ['atome/utilities/utilities.rb', 77]});}, {$$s: self, $$source_location: ['atome/utilities/utilities.rb', 72]});}, {$$s: self, $$source_location: ['atome/utilities/utilities.rb', 71]});
      }, {$$source_location: ['atome/utilities/utilities.rb', 70]});
      
      $def(self, '$controller_listener', function $$controller_listener() {
        var self = this;
        if ($gvars.host == null) $gvars.host = nil;

        
        if ($eqeq($gvars.host, "html")) {
          return nil
        };
        return self.$atome_js().controller_listener();
      }, {$$source_location: ['atome/utilities/utilities.rb', 103]});
      return $def(self, '$handle_svg_content', function $$handle_svg_content(svg_content, target, id_passed) {
        var self = this, atome_content = nil, target_vector = nil;

        
        atome_content = $$('A').$vectoriser(svg_content);
        target_vector = self.$grab(target);
        target_vector.$data(atome_content);
        return self.$grab(id_passed).$instance_variable_get("@svg_to_vector").$call((new Map([["id", id_passed], ["target", target], ["content", svg_content]])));
      }, {$$source_location: ['atome/utilities/utilities.rb', 108]});
    })(Opal.get_singleton_class(self), $nesting);
    self.initialized = (new Map());
    
    $def(self, '$grip', function $$grip(role_wanted) {
      var self = this, gripped_atome = nil;

      
      gripped_atome = [];
      $send(self.$fasten(), 'each', [], function $$7(child_id){var self = $$7.$$s == null ? this : $$7.$$s, child_found = nil;

        
        if (child_id == null) child_id = nil;
        child_found = self.$grab(child_id);
        if (($truthy(child_found.$role()) && ($truthy(child_found.$role()['$include?'](role_wanted))))) {
          return gripped_atome['$<<'](child_id)
        } else {
          return nil
        };}, {$$s: self, $$source_location: ['atome/utilities/utilities.rb', 126]});
      return gripped_atome;
    }, {$$source_location: ['atome/utilities/utilities.rb', 123]});
    
    $def(self, '$recursive', $return_val(nil), {$$source_location: ['atome/utilities/utilities.rb', 133]});
    
    $def(self, '$retrieve', function $$retrieve(params) {
      var block = $$retrieve.$$p || nil, self = this, closest_first = nil, include_self = nil, all_children = nil, fetch_children_recursively = nil, sorted_children = nil;

      $$retrieve.$$p = null;
      
      ;
      if (params == null) params = (new Map());
      closest_first = [true, (include_self = false)];
      if ($eqeq(params['$[]']("ascending"), false)) {
        closest_first = "inverted"
      };
      if ($eqeq(params['$[]']("self"), true)) {
        include_self = true
      };
      all_children = [];
      fetch_children_recursively = $send(self, 'lambda', [], function $$8(parent, depth){var self = $$8.$$s == null ? this : $$8.$$s, children_ids = nil;

        
        if (parent == null) parent = nil;
        if (depth == null) depth = nil;
        children_ids = parent.$fasten();
        if ($truthy(children_ids['$any?']())) {
          $send(children_ids, 'each', [], function $$9(child_id){var self = $$9.$$s == null ? this : $$9.$$s, child = nil;

            
            if (child_id == null) child_id = nil;
            child = self.$grab(child_id);
            return fetch_children_recursively.$call(child, $rb_plus(depth, 1));}, {$$s: self, $$source_location: ['atome/utilities/utilities.rb', 152]})
        };
        if ($truthy(include_self)) {
          return all_children['$<<']((new Map([["depth", depth], ["child", parent]])))
        } else if ($eqeq(parent, self)) {
          return nil
        } else {
          return all_children['$<<']((new Map([["depth", depth], ["child", parent]])))
        };}, {$$s: self, $$source_location: ['atome/utilities/utilities.rb', 149]});
      fetch_children_recursively.$call(self, 0);
      sorted_children = ($neqeq(closest_first, "inverted") ? ($send(all_children, 'sort_by', [], function $$10(entry){
        
        if (entry == null) entry = nil;
        return entry['$[]']("depth");}, {$$source_location: ['atome/utilities/utilities.rb', 168]})) : ($send(all_children, 'sort_by', [], function $$11(entry){
        
        if (entry == null) entry = nil;
        return entry['$[]']("depth")['$-@']();}, {$$source_location: ['atome/utilities/utilities.rb', 170]})));
      return $send(sorted_children, 'each', [], function $$12(entry){
        
        if (entry == null) entry = nil;
        return block.$call(entry['$[]']("child"));}, {$$source_location: ['atome/utilities/utilities.rb', 173]});
    }, {$$arity: -1, $$source_location: ['atome/utilities/utilities.rb', 137]});
    
    $def(self, '$found_spacing_in_percent', function $$found_spacing_in_percent(parent_width, child_width, nb_of_children) {
      var total_child_width = nil, remaining_width = nil, spacing = nil, spacing_percentage = nil;

      
      total_child_width = $rb_times(child_width, nb_of_children);
      remaining_width = $rb_minus(parent_width, total_child_width);
      spacing = $rb_divide(remaining_width.$to_f(), $rb_plus(nb_of_children, 1));
      spacing_percentage = $rb_times($rb_divide(spacing, parent_width), 100);
      return spacing_percentage.$round(2);
    }, {$$source_location: ['atome/utilities/utilities.rb', 178]});
    
    $def(self, '$block', function $$block(params) {
      var self = this, direction = nil, $ret_or_1 = nil, spacing = nil, width_found = nil, height_found = nil, bloc_params = nil, last_id_found = nil, block_left = nil, left_in_percent = nil;

      
      direction = ($truthy(($ret_or_1 = params.$delete("direction"))) ? ($ret_or_1) : ("vertical"));
      spacing = ($truthy(($ret_or_1 = params.$delete("spacing"))) ? ($ret_or_1) : (3));
      width_found = ($truthy(($ret_or_1 = params.$delete("width"))) ? ($ret_or_1) : ("100%"));
      height_found = ($truthy(($ret_or_1 = params.$delete("height"))) ? ($ret_or_1) : ("100%"));
      bloc_params = ($truthy(($ret_or_1 = params.$delete("data"))) ? ($ret_or_1) : ((new Map())));
      last_id_found = self.$grip("block").$last();
      if ($truthy(last_id_found)) {
        
        switch (direction.valueOf()) {
          case "vertical":
            return self.$box((new Map([["top", self.$below(last_id_found, spacing)], ["role", "block"], ["width", width_found]])).$merge(params).$merge(bloc_params))
          case "horizontal":
            
            width_found = self.$to_px("width");
            block_left = self.$after(last_id_found, spacing);
            left_in_percent = $rb_times($rb_divide(block_left, width_found), 100);
            return self.$box((new Map([["left", "" + (left_in_percent) + "%"], ["role", "block"], ["height", height_found]])).$merge(params).$merge(bloc_params));
          default:
            return nil
        }
      } else 
      switch (direction.valueOf()) {
        case "vertical":
          return self.$box((new Map([["top", spacing], ["role", "block"], ["width", width_found]])).$merge(params).$merge(bloc_params))
        case "horizontal":
          return self.$box((new Map([["left", spacing], ["role", "block"], ["height", height_found]])).$merge(params).$merge(bloc_params))
        default:
          return nil
      };
    }, {$$source_location: ['atome/utilities/utilities.rb', 186]});
    
    $def(self, '$blocks', function $$blocks(params) {
      var self = this, blocks = nil, distribute = nil, width_found = nil, height_found = nil;

      
      blocks = params.$delete("blocks");
      distribute = params.$delete("distribute");
      if (($truthy(distribute) && ($eqeq(params['$[]']("direction"), "horizontal")))) {
        
        width_found = self.$to_px("width");
        params['$[]=']("spacing", "" + (self.$found_spacing_in_percent(width_found, params['$[]']("width"), blocks.$length())) + "%");
      } else if ($truthy(distribute)) {
        
        height_found = self.$to_px("height");
        params['$[]=']("spacing", self.$found_spacing_in_percent(height_found, params['$[]']("height"), blocks.$length()));
      };
      return $send(blocks, 'each', [], function $$13(bloc_id, block_to_create){var self = $$13.$$s == null ? this : $$13.$$s, sanitized_bloc_data = nil;

        
        if (bloc_id == null) bloc_id = nil;
        if (block_to_create == null) block_to_create = nil;
        sanitized_bloc_data = params.$merge(block_to_create);
        return self.$block((new Map([["data", sanitized_bloc_data]])).$merge((new Map([["id", bloc_id]]))).$merge(params));}, {$$s: self, $$source_location: ['atome/utilities/utilities.rb', 232]});
    }, {$$source_location: ['atome/utilities/utilities.rb', 221]});
    
    $def(self, '$sub_block', function $$sub_block(sub_params, spacing_found) {
      var self = this, num_blocks = nil, parent_width = nil, total_ratios = nil, total_spacing = nil, available_width = nil, left_offset = nil;

      
      if (spacing_found == null) spacing_found = 3;
      num_blocks = sub_params.$size();
      parent_width = self.$to_px("width");
      total_ratios = $send(sub_params.$values(), 'sum', [], function $$14(sub_content){
        
        if (sub_content == null) sub_content = nil;
        return sub_content['$[]']("width");}, {$$source_location: ['atome/utilities/utilities.rb', 241]});
      total_spacing = $rb_times($rb_plus(num_blocks, 1), spacing_found);
      available_width = $rb_minus(parent_width, total_spacing);
      left_offset = spacing_found;
      return $send(sub_params, 'each', [], function $$15(sub_id, sub_content){var self = $$15.$$s == null ? this : $$15.$$s, ratio = nil, block_width = nil, sub_created = nil;

        
        if (sub_id == null) sub_id = nil;
        if (sub_content == null) sub_content = nil;
        ratio = sub_content['$[]']("width");
        block_width = $rb_divide($rb_times(available_width, ratio), total_ratios);
        sub_created = self.$box((new Map([["id", sub_id], ["height", "100%"], ["left", left_offset], ["role", "sub"]])));
        sub_content['$[]=']("width", block_width);
        sub_created.$set(sub_content);
        sub_created.$width(block_width);
        left_offset = $rb_plus(left_offset, $rb_plus(block_width, spacing_found));
        sub_created.$width(sub_created.$to_percent("width"));
        return sub_created.$left(sub_created.$to_percent("left"));}, {$$s: self, $$source_location: ['atome/utilities/utilities.rb', 245]});
    }, {$$arity: -2, $$source_location: ['atome/utilities/utilities.rb', 238]});
    
    $def(self, '$help', function $$help(particle) {
      var doc = $$help.$$p || nil, self = this, doc_found = nil;

      $$help.$$p = null;
      
      ;
      if ($truthy(doc)) {
        return $send($$('Universe'), 'set_help', [particle], doc.$to_proc())
      } else {
        
        doc_found = $$('Universe').$get_help(particle);
        if ($truthy(doc_found['$is_a?']($$('Proc')))) {
          return $send(self, 'instance_exec', [], doc_found.$to_proc())
        } else {
          return nil
        };
      };
    }, {$$source_location: ['atome/utilities/utilities.rb', 258]});
    
    $def(self, '$example', function $$example(particle) {
      var example = $$example.$$p || nil, self = this, example_found = nil;

      $$example.$$p = null;
      
      ;
      if ($truthy(example)) {
        return $send($$('Universe'), 'set_example', [particle], example.$to_proc())
      } else {
        
        example_found = $$('Universe').$get_example(particle);
        if ($truthy(example_found['$is_a?']($$('Proc')))) {
          return $send(self, 'instance_exec', [], example_found.$to_proc())
        } else {
          return nil
        };
      };
    }, {$$source_location: ['atome/utilities/utilities.rb', 267]});
    
    $def(self, '$file_for_opal', function $$file_for_opal(parent, bloc) {try { 
      
      return $$('JS').$eval("fileForOpal('" + (parent) + "', " + (bloc) + ")")} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$source_location: ['atome/utilities/utilities.rb', 277]});
    
    $def(self, '$response_listener', function $$response_listener(hashed_msg) {
      var self = this, js_action = nil, js_body = nil;

      
      js_action = hashed_msg["action"];
      js_body = hashed_msg["body"];
      return self.$send(js_action, js_body);
    }, {$$source_location: ['atome/utilities/utilities.rb', 281]});
    
    $def(self, '$collapse', function $$collapse(new_atome) {
      var self = this, initialized_procs = nil, initialized = nil;

      
      initialized_procs = [];
      initialized = $$('Atome').$initialized();
      $send(new_atome, 'each', [], function $$16(element, value){var self = $$16.$$s == null ? this : $$16.$$s, initialized_proc = nil;

        
        if (element == null) element = nil;
        if (value == null) value = nil;
        self.$send(element, value);
        initialized_proc = initialized['$[]'](element);
        if ($truthy(initialized_proc['$is_a?']($$('Proc')))) {
          return initialized_procs['$<<']($hash_rehash(new Map([[value, initialized_proc]])))
        } else {
          return nil
        };}, {$$s: self, $$source_location: ['atome/utilities/utilities.rb', 290]});
      return $send(initialized_procs, 'each', [], function $$17(value){var self = $$17.$$s == null ? this : $$17.$$s;

        
        if (value == null) value = nil;
        return $send(value, 'each', [], function $$18(val, proc){var self = $$18.$$s == null ? this : $$18.$$s;

          
          if (val == null) val = nil;
          if (proc == null) proc = nil;
          return $send(self, 'instance_exec', [val], proc.$to_proc());}, {$$s: self, $$source_location: ['atome/utilities/utilities.rb', 297]});}, {$$s: self, $$source_location: ['atome/utilities/utilities.rb', 296]});
    }, {$$source_location: ['atome/utilities/utilities.rb', 287]});
    
    $def(self, '$add_text_visual', function $$add_text_visual(params) {
      var self = this;

      return self.$html().$add_font_to_css(params)
    }, {$$source_location: ['atome/utilities/utilities.rb', 304]});
    
    $def(self, '$particle_main', function $$particle_main(element, params) {
      var user_proc = $$particle_main.$$p || nil, self = this, result = nil;

      $$particle_main.$$p = null;
      
      ;
      if ($truthy($$('Atome').$instance_variable_get("@main_" + (element))['$is_a?']($$('Proc')))) {
        
        result = $send(self, 'instance_exec', [params, user_proc, self], $$('Atome').$instance_variable_get("@main_" + (element)).$to_proc());
        if (($truthy(result) && ($not(result['$instance_of?']($$('Atome')))))) {
          params = result
        };
      };
      return params;
    }, {$$source_location: ['atome/utilities/utilities.rb', 308]});
    
    $def(self, '$particle_read', function $$particle_read(element, params) {
      var user_proc = $$particle_read.$$p || nil, self = this;

      $$particle_read.$$p = null;
      
      ;
      if ($truthy($$('Atome').$instance_variable_get("@read_" + (element))['$is_a?']($$('Proc')))) {
        params = $send(self, 'instance_exec', [params, user_proc, self], $$('Atome').$instance_variable_get("@read_" + (element)).$to_proc())
      };
      return params;
    }, {$$source_location: ['atome/utilities/utilities.rb', 317]});
    
    $def(self, '$particle_sanitizer', function $$particle_sanitizer(element, params) {
      var user_proc = $$particle_sanitizer.$$p || nil, self = this, bloc_found = nil;

      $$particle_sanitizer.$$p = null;
      
      ;
      bloc_found = $$('Universe').$get_sanitizer_method(element);
      if ($truthy(bloc_found['$is_a?']($$('Proc')))) {
        params = $send(self, 'instance_exec', [params, user_proc], bloc_found.$to_proc())
      };
      return params;
    }, {$$source_location: ['atome/utilities/utilities.rb', 324]});
    
    $def(self, '$particle_pre', function $$particle_pre(element, params) {
      var user_proc = $$particle_pre.$$p || nil, self = this;

      $$particle_pre.$$p = null;
      
      ;
      if ($truthy($$('Atome').$instance_variable_get("@pre_" + (element))['$is_a?']($$('Proc')))) {
        params = $send(self, 'instance_exec', [params, user_proc, self], $$('Atome').$instance_variable_get("@pre_" + (element)).$to_proc())
      };
      return params;
    }, {$$source_location: ['atome/utilities/utilities.rb', 335]});
    
    $def(self, '$particle_post', function $$particle_post(element, params) {
      var user_proc = $$particle_post.$$p || nil, self = this;

      $$particle_post.$$p = null;
      
      ;
      if ($truthy($$('Atome').$instance_variable_get("@post_" + (element))['$is_a?']($$('Proc')))) {
        params = $send(self, 'instance_exec', [params, user_proc, self], $$('Atome').$instance_variable_get("@post_" + (element)).$to_proc())
      };
      return params;
    }, {$$source_location: ['atome/utilities/utilities.rb', 342]});
    
    $def(self, '$particle_after', function $$particle_after(element, params) {
      var user_proc = $$particle_after.$$p || nil, self = this;

      $$particle_after.$$p = null;
      
      ;
      if ($truthy($$('Atome').$instance_variable_get("@after_" + (element))['$is_a?']($$('Proc')))) {
        params = $send(self, 'instance_exec', [params, user_proc, self], $$('Atome').$instance_variable_get("@after_" + (element)).$to_proc())
      };
      return params;
    }, {$$source_location: ['atome/utilities/utilities.rb', 349]});
    
    $def(self, '$atome_pre_process', function $$atome_pre_process(element, params) {
      var user_proc = $$atome_pre_process.$$p || nil, self = this;

      $$atome_pre_process.$$p = null;
      
      ;
      if ($truthy($$('Atome').$instance_variable_get("@pre_" + (element))['$is_a?']($$('Proc')))) {
        params = $send(self, 'instance_exec', [params, self, user_proc], $$('Atome').$instance_variable_get("@pre_" + (element)).$to_proc())
      };
      return params;
    }, {$$source_location: ['atome/utilities/utilities.rb', 356]});
    
    $def(self, '$atome_sanitizer', function $$atome_sanitizer(element, params) {
      var user_proc = $$atome_sanitizer.$$p || nil, self = this;

      $$atome_sanitizer.$$p = null;
      
      ;
      return self.$particle_sanitizer(element, params);
    }, {$$source_location: ['atome/utilities/utilities.rb', 363]});
    
    $def(self, '$atome_post_process', function $$atome_post_process(element, params, new_atome) {
      var user_proc = $$atome_post_process.$$p || nil;

      $$atome_post_process.$$p = null;
      
      ;
      if (!$truthy($$('Atome').$instance_variable_get("@post_" + (element))['$is_a?']($$('Proc')))) {
        return nil
      };
      return $send(new_atome, 'instance_exec', [params, user_proc], $$('Atome').$instance_variable_get("@post_" + (element)).$to_proc());
    }, {$$source_location: ['atome/utilities/utilities.rb', 368]});
    
    $def(self, '$atome_processor', function $$atome_processor(element, params) {
      var user_proc = $$atome_processor.$$p || nil, self = this, new_atome = nil;

      $$atome_processor.$$p = null;
      
      ;
      params = self.$atome_common(element, params);
      $send(self, 'atome_pre_process', [element, params], user_proc.$to_proc());
      new_atome = $send(self, 'send', ["set_" + (element), params], user_proc.$to_proc());
      $send(self, 'atome_post_process', [element, params, new_atome], user_proc.$to_proc());
      return new_atome;
    }, {$$source_location: ['atome/utilities/utilities.rb', 376]});
    
    $def(self, '$history', function $$history() {
      
      return $$('Universe').$story()
    }, {$$source_location: ['atome/utilities/utilities.rb', 404]});
    
    $def(self, '$store_proc', function $$store_proc(element, params) {
      var user_proc = $$store_proc.$$p || nil, $a, self = this, elem_code = nil;

      $$store_proc.$$p = null;
      
      ;
      if (params == null) params = true;
      if (!$truthy(self.$instance_variable_get("@" + (element) + "_code"))) {
        self.$instance_variable_set("@" + (element) + "_code", (new Map()))
      };
      $$('Object').$attr_accessor("" + (element) + "_code");
      elem_code = "@" + (element) + "_code";
      return ($a = [element, user_proc], $send(self.$instance_variable_get(elem_code), '[]=', $a), $a[$a.length - 1]);
    }, {$$arity: -2, $$source_location: ['atome/utilities/utilities.rb', 418]});
    
    $def(self, '$particle_callback', function $$particle_callback(element) {
      var self = this;

      
      if (element == null) element = nil;
      if ($truthy(element)) {
        return $send($$('Atome'), 'define_method', ["" + (element) + "_callback"], function $$19(return_params){var self = $$19.$$s == null ? this : $$19.$$s, proc_found = nil;

          
          if (return_params == null) return_params = nil;
          if ($truthy(return_params)) {
            
            proc_found = ($truthy(self.$instance_variable_get("@" + (element) + "_code")['$instance_of?']($$('Hash'))) ? (self.$instance_variable_get("@" + (element) + "_code").$values().$first()) : (self.$instance_variable_get("@" + (element) + "_code")['$[]'](element)));
            if ($truthy(proc_found['$is_a?']($$('Proc')))) {
              return proc_found.$call(return_params)
            } else {
              return nil
            };
          } else {
            return self.$puts("Warning: " + (element) + "_callback called without return_params")
          };}, {$$arity: -1, $$s: self, $$source_location: ['atome/utilities/utilities.rb', 487]})
      } else {
        return self.$puts("Warning: particle_callback called without element")
      };
    }, {$$arity: -1, $$source_location: ['atome/utilities/utilities.rb', 485]});
    
    $def(self, '$store_ruby_callback', function $$store_ruby_callback(params) {
      var self = this;

      return $send(params, 'each', [], function $$20(element, value_v){var self = $$20.$$s == null ? this : $$20.$$s;

        
        if (element == null) element = nil;
        if (value_v == null) value_v = nil;
        return self.$send("" + (element) + "_code")['$[]'](element).$call(value_v);}, {$$s: self, $$source_location: ['atome/utilities/utilities.rb', 506]})
    }, {$$source_location: ['atome/utilities/utilities.rb', 504]});
    
    $def(self, '$read_ruby_callback', function $$read_ruby_callback(element) {
      var self = this;

      return self.$send("" + (element) + "_callback")
    }, {$$source_location: ['atome/utilities/utilities.rb', 511]});
    
    $def(self, '$callback', function $$callback(element, return_params) {
      var self = this;

      
      if (return_params == null) return_params = nil;
      return self.$send("" + (element) + "_callback", return_params);
    }, {$$arity: -2, $$source_location: ['atome/utilities/utilities.rb', 518]});
    
    $def(self, '$js_callback', function $$js_callback(id, particle, value, sub) {
      var self = this, current_atome = nil, proc_found = nil;

      
      if (sub == null) sub = nil;
      current_atome = self.$grab(id);
      proc_found = current_atome.$instance_variable_get("@" + (particle) + "_code")['$[]'](particle.$to_sym());
      if ($truthy(proc_found['$is_a?']($$('Proc')))) {
        return $send(self, 'instance_exec', [value], proc_found.$to_proc())
      } else {
        return nil
      };
    }, {$$arity: -4, $$source_location: ['atome/utilities/utilities.rb', 522]});
    
    $def(self, '$delete_with_callback', function $$delete_with_callback() {
      var callback = $$delete_with_callback.$$p || nil, self = this, check_interval = nil, check_completion = nil;

      $$delete_with_callback.$$p = null;
      
      ;
      check_interval = 0.05;
      check_completion = $send(self, 'proc', [], function $$21(){var self = $$21.$$s == null ? this : $$21.$$s, operations_completed = nil;
        if (self.aid == null) self.aid = nil;

        
        operations_completed = true;
        if ($truthy(operations_completed)) {
          return $$('Universe').$delete(self.aid)
        } else {
          return $send(self, 'wait', [check_interval], function $$22(){
            return check_completion.$call()}, {$$source_location: ['atome/utilities/utilities.rb', 544]})
        };}, {$$s: self, $$source_location: ['atome/utilities/utilities.rb', 534]});
      return check_completion.$call();
    }, {$$source_location: ['atome/utilities/utilities.rb', 531]});
    
    $def(self, '$particles', function $$particles(particles_found) {
      var self = this;

      
      if (particles_found == null) particles_found = nil;
      if ($truthy(particles_found)) {
        return $send(particles_found, 'each', [], function $$23(particle_found, value_found){var $a, self = $$23.$$s == null ? this : $$23.$$s;

          
          if (particle_found == null) particle_found = nil;
          if (value_found == null) value_found = nil;
          return ($a = [particle_found, value_found], $send(self.$atome(), '[]=', $a), $a[$a.length - 1]);}, {$$s: self, $$source_location: ['atome/utilities/utilities.rb', 554]})
      } else {
        return self.$atome()
      };
    }, {$$arity: -1, $$source_location: ['atome/utilities/utilities.rb', 552]});
    
    $def(self, '$atome', function $$atome() {
      var self = this;

      return $send(self.$instance_variables(), 'each_with_object', [(new Map())], function $$24(var$, hash){var $a, self = $$24.$$s == null ? this : $$24.$$s;

        
        if (var$ == null) var$ = nil;
        if (hash == null) hash = nil;
        return ($a = [var$['$[]']($range(1, -1, false)).$to_sym(), self.$instance_variable_get(var$)], $send(hash, '[]=', $a), $a[$a.length - 1]);}, {$$s: self, $$source_location: ['atome/utilities/utilities.rb', 564]})
    }, {$$source_location: ['atome/utilities/utilities.rb', 562]});
    
    $def(self, '$particles_to_hash', function $$particles_to_hash() {
      var self = this, hash = nil;

      
      hash = (new Map());
      $send(self.$instance_variables(), 'each', [], function $$25(var$){var $a, self = $$25.$$s == null ? this : $$25.$$s;

        
        if (var$ == null) var$ = nil;
        if ($truthy(["@selection_style", "@html_object", "@history", "@initialized", "@tick", "@controller_proc"]['$include?'](var$))) {
          return nil
        };
        return ($a = [var$.$to_s().$delete("@").$to_sym(), self.$instance_variable_get(var$)], $send(hash, '[]=', $a), $a[$a.length - 1]);}, {$$s: self, $$source_location: ['atome/utilities/utilities.rb', 571]});
      return hash;
    }, {$$source_location: ['atome/utilities/utilities.rb', 569]});
    
    $def(self, '$refresh_atome', function $$refresh_atome() {
      var self = this, id_found = nil, fasten_atomes = nil, fasten_found = nil, infos_found = nil, data_found = nil, keys_to_delete = nil, new_atome_id = nil, new_atome = nil, $ret_or_1 = nil;

      
      id_found = self.$id().$dup();
      self.$id("temporary");
      fasten_atomes = [];
      fasten_found = self.$fasten().$dup();
      $send(fasten_found, 'each', [], function $$26(child_id_found){var self = $$26.$$s == null ? this : $$26.$$s, child_found = nil, new_child = nil;

        
        if (child_id_found == null) child_id_found = nil;
        child_found = self.$grab(child_id_found);
        if ($truthy(child_found)) {
          
          new_child = child_found.$duplicate((new Map()));
          return fasten_atomes['$<<'](new_child.$id());
        } else {
          return nil
        };}, {$$s: self, $$source_location: ['atome/utilities/utilities.rb', 609]});
      infos_found = self.$infos().$dup();
      data_found = infos_found.$delete("data");
      keys_to_delete = ["history", "callback", "duplicate", "copy", "paste", "touch_code", "html", "fasten", "aid"];
      $send(keys_to_delete, 'each', [], function $$27(key){
        
        if (key == null) key = nil;
        return infos_found.$delete(key);}, {$$source_location: ['atome/utilities/utilities.rb', 620]});
      new_atome_id = id_found;
      infos_found['$[]=']("id", new_atome_id);
      new_atome = $$('Atome').$new(infos_found);
      self.duplicate = ($truthy(($ret_or_1 = self.duplicate)) ? ($ret_or_1) : ((new Map())));
      self.duplicate['$[]='](new_atome_id, new_atome);
      new_atome.$data(data_found);
      return new_atome;
    }, {$$source_location: ['atome/utilities/utilities.rb', 604]});
    
    $def(self, '$refresh', function $$refresh() {
      var bloc = $$refresh.$$p || nil, self = this;

      $$refresh.$$p = null;
      
      ;
      return $send(self, 'retrieve', [(new Map([["self", true]]))], function $$28(child){
        
        if (child == null) child = nil;
        return child.$refresh_atome();}, {$$source_location: ['atome/utilities/utilities.rb', 631]});
    }, {$$source_location: ['atome/utilities/utilities.rb', 630]});
    
    $def(self, '$<<', function $Atome_$lt$lt$29(item) {
      var self = this;

      return self.$collect()['$<<'](item)
    }, {$$source_location: ['atome/utilities/utilities.rb', 636]});
    
    $def(self, '$include?', function $Atome_include$ques$30(value) {
      var self = this;

      return self['$include?'](value)
    }, {$$source_location: ['atome/utilities/utilities.rb', 640]});
    
    $def(self, '$set', function $$set(params) {
      var self = this;

      return $send(params, 'each', [], function $$31(particle, value){var self = $$31.$$s == null ? this : $$31.$$s;

        
        if (particle == null) particle = nil;
        if (value == null) value = nil;
        return self.$send(particle, value);}, {$$s: self, $$source_location: ['atome/utilities/utilities.rb', 645]})
    }, {$$source_location: ['atome/utilities/utilities.rb', 644]});
    
    $def(self, '$debug', function $$debug(msg) {
      var self = this;

      return self.$puts(msg)
    }, {$$source_location: ['atome/utilities/utilities.rb', 656]});
    
    $def(self, '$set_current_user', function $$set_current_user(user_id) {
      var $a, self = this;

      if ($truthy($$('Universe').$users()['$[]'](user_id))) {
        return ($a = [user_id], $send($$('Universe'), 'current_user=', $a), $a[$a.length - 1])
      } else {
        return self.$debug("" + (user_id) + " not found")
      }
    }, {$$source_location: ['atome/utilities/utilities.rb', 660]});
    
    $def(self, '$remove_layout', function $$remove_layout() {
      var self = this, parent_found = nil, grand_parent = nil;

      
      self.$display("default");
      parent_found = self.$grab(self.$attach());
      grand_parent = parent_found.$attach();
      self.$remove((new Map([["category", self.$attach()]])));
      self.$category("atome");
      self.$attach(grand_parent);
      if ($eqeq(parent_found.$fasten().$length(), 0)) {
        return parent_found.$delete(true)
      } else {
        return nil
      };
    }, {$$source_location: ['atome/utilities/utilities.rb', 668]});
    
    $def(self, '$server', function $$server(server_params) {
      var self = this;

      
      if (server_params == null) server_params = nil;
      if ($truthy(server_params)) {
        return (self.current_server = server_params)
      } else {
        return self.current_server
      };
    }, {$$arity: -1, $$source_location: ['atome/utilities/utilities.rb', 683]});
    
    $def(self, '$init_websocket', function $$init_websocket() {
      var self = this;

      return self.$connection(self.current_server)
    }, {$$source_location: ['atome/utilities/utilities.rb', 691]});
    
    $def(self, '$encrypt', function $$encrypt(string) {try { 
      var js_code = nil;

      
      js_code = "sha256('" + (string) + "')";
      return $$('JS').$eval(js_code);} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$source_location: ['atome/utilities/utilities.rb', 695]});
    
    $def(self, '$get_localstorage_content', function $$get_localstorage_content() {
      var storage = nil, storage_array = nil, storage_items = nil;

      
      storage = $$('JS').$global()['$[]']("localStorage");
      storage_array = storage.$to_a();
      storage_items = (new Map());
      $send(storage_array, 'each_with_index', [], function $$32(_i, index){var $a, key = nil, value = nil;

        
        if (_i == null) _i = nil;
        if (index == null) index = nil;
        key = $$('JS').$global()['$[]']("localStorage").$key(index);
        value = $$('JS').$global()['$[]']("localStorage").$getItem(key);
        return ($a = [key, value], $send(storage_items, '[]=', $a), $a[$a.length - 1]);}, {$$source_location: ['atome/utilities/utilities.rb', 709]});
      return storage_items;
    }, {$$source_location: ['atome/utilities/utilities.rb', 705]});
    
    $def(self, '$sync', function $$sync(params) {
      var bloc = $$sync.$$p || nil, self = this, message_id = nil;

      $$sync.$$p = null;
      
      ;
      if (!$truthy(params['$instance_of?']($$('Hash')))) {
        params = (new Map([["data", params]]))
      };
      message_id = "msg_" + ($$('Universe').$messages().$length());
      params['$[]=']("message_id", message_id);
      $$('Universe').$store_messages((new Map([["msg_nb", message_id], ["proc", bloc]])));
      return self.$html().$send_message(params);
    }, {$$source_location: ['atome/utilities/utilities.rb', 731]});
    
    $def(self, '$alternate', function $$alternate($a) {
      var $post_args, states, self = this, $ret_or_1 = nil, current_state = nil;

      
      $post_args = $slice(arguments);
      states = $post_args;
      self.alternate = ($truthy(($ret_or_1 = self.alternate)) ? ($ret_or_1) : ((new Map([["state", 0]]))));
      self.alternate['$[]=']("data", states);
      if ($truthy($rb_lt(self.alternate['$[]']("state"), $rb_minus(states.$length(), 1)))) {
        self.alternate['$[]=']("state", $rb_plus(self.alternate['$[]']("state"), 1))
      } else {
        self.alternate['$[]=']("state", 0)
      };
      current_state = self.alternate['$[]']("data")['$[]']($rb_minus(self.alternate['$[]']("state"), 1));
      if ($truthy(current_state['$instance_of?']($$('Hash')))) {
        $send(current_state, 'each', [], function $$33(state, value){var self = $$33.$$s == null ? this : $$33.$$s;

          
          if (state == null) state = nil;
          if (value == null) value = nil;
          return self.$send(state, value);}, {$$s: self, $$source_location: ['atome/utilities/utilities.rb', 751]})
      };
      return current_state;
    }, {$$arity: -1, $$source_location: ['atome/utilities/utilities.rb', 740]});
    
    $def(self, '$extract_attribute', function $$extract_attribute(attributes_string, attr_name) {
      var $a;

      if ($truthy(attributes_string['$=~']($regexp(["\\b", attr_name, "\\s*=\\s*[\"']([^\"']*)[\"']"])))) {
        return (($a = $gvars['~']) === nil ? nil : $a['$[]'](1))
      } else {
        return nil
      }
    }, {$$source_location: ['atome/utilities/utilities.rb', 758]});
    
    $def(self, '$convert_svg', function $$convert_svg(svg_content) {
      var self = this, atome_content = nil;

      
      self.svg = svg_content;
      svg_content = svg_content.$gsub(/<!--.*?-->/m, "");
      atome_content = [];
      $send(svg_content, 'scan', [/<circle\b([^>]*)>/], function $$34(attributes_array){var self = $$34.$$s == null ? this : $$34.$$s, attributes = nil, stroke = nil, $ret_or_1 = nil, stroke_width = nil, fill = nil, cx = nil, cy = nil, r = nil, circle_def = nil;

        
        if (attributes_array == null) attributes_array = nil;
        attributes = attributes_array['$[]'](0);
        stroke = ($truthy(($ret_or_1 = self.$extract_attribute(attributes, "stroke"))) ? ($ret_or_1) : ("none"));
        stroke_width = ($truthy(($ret_or_1 = self.$extract_attribute(attributes, "stroke-width"))) ? ($ret_or_1) : ("0"));
        fill = ($truthy(($ret_or_1 = self.$extract_attribute(attributes, "fill"))) ? ($ret_or_1) : ("none"));
        cx = self.$extract_attribute(attributes, "cx");
        cy = self.$extract_attribute(attributes, "cy");
        r = self.$extract_attribute(attributes, "r");
        if ((($truthy(cx) && ($truthy(cy))) && ($truthy(r)))) {
          
          circle_def = (new Map([["circle", (new Map([["cx", cx], ["cy", cy], ["r", r], ["id", self.$identity_generator()], ["stroke", stroke], ["stroke-width", stroke_width], ["fill", fill]]))]]));
          return atome_content['$<<'](circle_def);
        } else {
          return nil
        };}, {$$s: self, $$source_location: ['atome/utilities/utilities.rb', 774]});
      $send(svg_content, 'scan', [/<path\b([^>]*)>/], function $$35(attributes_array){var self = $$35.$$s == null ? this : $$35.$$s, attributes = nil, stroke = nil, $ret_or_1 = nil, stroke_width = nil, fill = nil, d = nil, path_def = nil;

        
        if (attributes_array == null) attributes_array = nil;
        attributes = attributes_array['$[]'](0);
        stroke = ($truthy(($ret_or_1 = self.$extract_attribute(attributes, "stroke"))) ? ($ret_or_1) : ("none"));
        stroke_width = ($truthy(($ret_or_1 = self.$extract_attribute(attributes, "stroke-width"))) ? ($ret_or_1) : ("0"));
        fill = ($truthy(($ret_or_1 = self.$extract_attribute(attributes, "fill"))) ? ($ret_or_1) : ("none"));
        d = self.$extract_attribute(attributes, "d");
        if ($truthy(d)) {
          
          path_def = (new Map([["path", (new Map([["d", d], ["id", self.$identity_generator()], ["stroke", stroke], ["stroke-width", stroke_width], ["fill", fill]]))]]));
          return atome_content['$<<'](path_def);
        } else {
          return nil
        };}, {$$s: self, $$source_location: ['atome/utilities/utilities.rb', 800]});
      $send(svg_content, 'scan', [/<rect\b([^>]*)>/], function $$36(attributes_array){var self = $$36.$$s == null ? this : $$36.$$s, attributes = nil, stroke = nil, $ret_or_1 = nil, stroke_width = nil, fill = nil, x = nil, y = nil, width = nil, height = nil, rect_def = nil;

        
        if (attributes_array == null) attributes_array = nil;
        attributes = attributes_array['$[]'](0);
        stroke = ($truthy(($ret_or_1 = self.$extract_attribute(attributes, "stroke"))) ? ($ret_or_1) : ("none"));
        stroke_width = ($truthy(($ret_or_1 = self.$extract_attribute(attributes, "stroke-width"))) ? ($ret_or_1) : ("0"));
        fill = ($truthy(($ret_or_1 = self.$extract_attribute(attributes, "fill"))) ? ($ret_or_1) : ("none"));
        x = self.$extract_attribute(attributes, "x");
        y = self.$extract_attribute(attributes, "y");
        width = self.$extract_attribute(attributes, "width");
        height = self.$extract_attribute(attributes, "height");
        if (((($truthy(x) && ($truthy(y))) && ($truthy(width))) && ($truthy(height)))) {
          
          rect_def = (new Map([["rect", (new Map([["x", x], ["y", y], ["width", width], ["height", height], ["id", self.$identity_generator()], ["stroke", stroke], ["stroke-width", stroke_width], ["fill", fill]]))]]));
          return atome_content['$<<'](rect_def);
        } else {
          return nil
        };}, {$$s: self, $$source_location: ['atome/utilities/utilities.rb', 822]});
      $send(svg_content, 'scan', [/<line\b([^>]*)>/], function $$37(attributes_array){var self = $$37.$$s == null ? this : $$37.$$s, attributes = nil, stroke = nil, $ret_or_1 = nil, stroke_width = nil, x1 = nil, y1 = nil, x2 = nil, y2 = nil, line_def = nil;

        
        if (attributes_array == null) attributes_array = nil;
        attributes = attributes_array['$[]'](0);
        stroke = ($truthy(($ret_or_1 = self.$extract_attribute(attributes, "stroke"))) ? ($ret_or_1) : ("none"));
        stroke_width = ($truthy(($ret_or_1 = self.$extract_attribute(attributes, "stroke-width"))) ? ($ret_or_1) : ("0"));
        x1 = self.$extract_attribute(attributes, "x1");
        y1 = self.$extract_attribute(attributes, "y1");
        x2 = self.$extract_attribute(attributes, "x2");
        y2 = self.$extract_attribute(attributes, "y2");
        if (((($truthy(x1) && ($truthy(y1))) && ($truthy(x2))) && ($truthy(y2)))) {
          
          line_def = (new Map([["line", (new Map([["x1", x1], ["y1", y1], ["x2", x2], ["y2", y2], ["id", self.$identity_generator()], ["stroke", stroke], ["stroke-width", stroke_width]]))]]));
          return atome_content['$<<'](line_def);
        } else {
          return nil
        };}, {$$s: self, $$source_location: ['atome/utilities/utilities.rb', 850]});
      $send(svg_content, 'scan', [/<ellipse\b([^>]*)>/], function $$38(attributes_array){var self = $$38.$$s == null ? this : $$38.$$s, attributes = nil, stroke = nil, $ret_or_1 = nil, stroke_width = nil, fill = nil, cx = nil, cy = nil, rx = nil, ry = nil, ellipse_def = nil;

        
        if (attributes_array == null) attributes_array = nil;
        attributes = attributes_array['$[]'](0);
        stroke = ($truthy(($ret_or_1 = self.$extract_attribute(attributes, "stroke"))) ? ($ret_or_1) : ("none"));
        stroke_width = ($truthy(($ret_or_1 = self.$extract_attribute(attributes, "stroke-width"))) ? ($ret_or_1) : ("0"));
        fill = ($truthy(($ret_or_1 = self.$extract_attribute(attributes, "fill"))) ? ($ret_or_1) : ("none"));
        cx = self.$extract_attribute(attributes, "cx");
        cy = self.$extract_attribute(attributes, "cy");
        rx = self.$extract_attribute(attributes, "rx");
        ry = self.$extract_attribute(attributes, "ry");
        if (((($truthy(cx) && ($truthy(cy))) && ($truthy(rx))) && ($truthy(ry)))) {
          
          ellipse_def = (new Map([["ellipse", (new Map([["cx", cx], ["cy", cy], ["rx", rx], ["ry", ry], ["id", self.$identity_generator()], ["stroke", stroke], ["stroke-width", stroke_width], ["fill", fill]]))]]));
          return atome_content['$<<'](ellipse_def);
        } else {
          return nil
        };}, {$$s: self, $$source_location: ['atome/utilities/utilities.rb', 876]});
      $send(svg_content, 'scan', [/<polygon\b([^>]*)>/], function $$39(attributes_array){var self = $$39.$$s == null ? this : $$39.$$s, attributes = nil, stroke = nil, $ret_or_1 = nil, stroke_width = nil, fill = nil, points = nil, polygon_def = nil;

        
        if (attributes_array == null) attributes_array = nil;
        attributes = attributes_array['$[]'](0);
        stroke = ($truthy(($ret_or_1 = self.$extract_attribute(attributes, "stroke"))) ? ($ret_or_1) : ("none"));
        stroke_width = ($truthy(($ret_or_1 = self.$extract_attribute(attributes, "stroke-width"))) ? ($ret_or_1) : ("0"));
        fill = ($truthy(($ret_or_1 = self.$extract_attribute(attributes, "fill"))) ? ($ret_or_1) : ("none"));
        points = self.$extract_attribute(attributes, "points");
        if ($truthy(points)) {
          
          polygon_def = (new Map([["polygon", (new Map([["points", points], ["id", self.$identity_generator()], ["stroke", stroke], ["stroke-width", stroke_width], ["fill", fill]]))]]));
          return atome_content['$<<'](polygon_def);
        } else {
          return nil
        };}, {$$s: self, $$source_location: ['atome/utilities/utilities.rb', 904]});
      $send(svg_content, 'scan', [/<polyline\b([^>]*)>/], function $$40(attributes_array){var self = $$40.$$s == null ? this : $$40.$$s, attributes = nil, stroke = nil, $ret_or_1 = nil, stroke_width = nil, fill = nil, points = nil, polyline_def = nil;

        
        if (attributes_array == null) attributes_array = nil;
        attributes = attributes_array['$[]'](0);
        stroke = ($truthy(($ret_or_1 = self.$extract_attribute(attributes, "stroke"))) ? ($ret_or_1) : ("none"));
        stroke_width = ($truthy(($ret_or_1 = self.$extract_attribute(attributes, "stroke-width"))) ? ($ret_or_1) : ("0"));
        fill = ($truthy(($ret_or_1 = self.$extract_attribute(attributes, "fill"))) ? ($ret_or_1) : ("none"));
        points = self.$extract_attribute(attributes, "points");
        if ($truthy(points)) {
          
          polyline_def = (new Map([["polyline", (new Map([["points", points], ["id", self.$identity_generator()], ["stroke", stroke], ["stroke-width", stroke_width], ["fill", fill]]))]]));
          return atome_content['$<<'](self.$polygon_def());
        } else {
          return nil
        };}, {$$s: self, $$source_location: ['atome/utilities/utilities.rb', 926]});
      return atome_content;
    }, {$$source_location: ['atome/utilities/utilities.rb', 768]});
    
    $def(self, '$vectoriser', function $$vectoriser(svg_content) {
      var self = this;

      return self.$convert_svg(svg_content)
    }, {$$source_location: ['atome/utilities/utilities.rb', 1132]});
    
    $def(self, '$svg', $return_ivar("svg"), {$$source_location: ['atome/utilities/utilities.rb', 1136]});
    
    $def(self, '$b64_to_tag', function $$b64_to_tag(params) {try { 
      var self = this, new_img = nil, new_tag = nil, new_atome = nil, html_obj = nil, obj_src = nil;

      
      if (!$truthy(params['$[]']("target"))) {
        
        new_img = self.$image((new Map([["left", 0], ["top", 0]])));
        params['$[]=']("target", new_img.$id());
      };
      new_tag = "  var serializer = new XMLSerializer();\n" + "  var svg_string = serializer.serializeToString(document.getElementById('" + (params['$[]']("id")) + "'));\n" + "  var encoded_svg = btoa(unescape(encodeURIComponent(svg_string)));\n" + "  var img = document.getElementById('" + (params['$[]']("target")) + "');\n" + "  img.src = \"data:image/svg+xml;base64,\" + encoded_svg;\n" + "  var parent = document.getElementById('" + (self.$id()) + "');\n" + "  parent.appendChild(img);\n";
      $$('JS').$eval(new_tag);
      new_atome = self.$grab(params['$[]']("target"));
      html_obj = new_atome.$html().$object();
      obj_src = html_obj['$[]']("src");
      new_atome.$path(obj_src);
      return new_atome;} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$source_location: ['atome/utilities/utilities.rb', 1140]});
    
    $def(self, '$svg_to_vector', function $$svg_to_vector(params) {try { 
      var proc = $$svg_to_vector.$$p || nil, self = this, source = nil, img_element = nil, svg_path = nil, target = nil;

      $$svg_to_vector.$$p = null;
      
      ;
      self.svg_to_vector = proc;
      source = params['$[]']("source");
      img_element = $$('JS').$global()['$[]']("document").$getElementById(source.$to_s());
      svg_path = img_element.$getAttribute("src");
      target = params['$[]']("target");
      return $$('JS').$eval("replaceSVGContent('" + (svg_path) + "', '" + (target) + "', '" + (self.$id()) + "')");} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$source_location: ['atome/utilities/utilities.rb', 1162]});
    
    $def(self, '$determine_action', function $$determine_action(file_content) {
      var $a, default_action = nil, action = nil, content = nil;

      
      default_action = (new Map([["open", true], ["execute", false]]));
      action = default_action.$dup();
      if ($truthy(file_content.$lines().$first()['$=~'](/#\s*\{BROWSER:\s*\{(.*?)\}\}/))) {
        
        content = $send((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)).$split(","), 'map', [], function $$41(pair){
          
          if (pair == null) pair = nil;
          return $send(pair.$split(":"), 'map', [], "strip".$to_proc());}, {$$source_location: ['atome/utilities/utilities.rb', 1178]}).$to_h();
        $send(content, 'each', [], function $$42(key, value){var $b;

          
          if (key == null) key = nil;
          if (value == null) value = nil;
          return ($b = [key.$to_sym(), value['$==']("true")], $send(action, '[]=', $b), $b[$b.length - 1]);}, {$$source_location: ['atome/utilities/utilities.rb', 1179]});
      };
      return action;
    }, {$$source_location: ['atome/utilities/utilities.rb', 1172]});
    
    $def(self, '$extract_and_sanitize_js', function $$extract_and_sanitize_js(code) {
      var sanitized_code = nil, inside_js_block = nil, block_delimiter = nil;

      
      sanitized_code = "";
      inside_js_block = false;
      block_delimiter = "";
      $send(code, 'each_line', [], function $$43(line){var $a, clean_line = nil;

        
        if (line == null) line = nil;
        if ($truthy(line['$=~'](/(\w+)\s*=\s*<<~(\w+)/))) {
          
          inside_js_block = true;
          block_delimiter = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2));
          sanitized_code = $rb_plus(sanitized_code, "" + ((($a = $gvars['~']) === nil ? nil : $a['$[]'](1))) + " = %Q{");
          return nil;
        };
        if ($truthy(inside_js_block)) {
          if ($eqeq(line.$strip(), block_delimiter)) {
            
            inside_js_block = false;
            return (sanitized_code = $rb_plus(sanitized_code, "}\n"));
          } else {
            
            clean_line = line.$gsub("\\", "\\\\").$gsub("{", "\\{").$gsub("}", "\\}").$gsub("\"", "\\\"");
            return (sanitized_code = $rb_plus(sanitized_code, clean_line));
          }
        } else {
          return (sanitized_code = $rb_plus(sanitized_code, line))
        };}, {$$source_location: ['atome/utilities/utilities.rb', 1191]});
      return sanitized_code;
    }, {$$source_location: ['atome/utilities/utilities.rb', 1186]});
    
    $def(self, '$browser', function $$browser(base_path) {
      var self = this, offset = nil, v = nil;

      
      self.path['$!=']("");
      if (!$truthy(self.$grab("file_browser"))) {
        self.filer = self.$grab("intuition").$box((new Map([["id", "file_browser"], ["tag", (new Map([["system", true]]))], ["drag", true], ["top", 9], ["depth", 1], ["left", 600], ["width", 120], ["height", 600], ["smooth", 8], ["overflow", "auto"], ["apply", ["inactive_tool_col", "tool_box_border", "tool_shade"]]])))
      };
      offset = 0;
      self.path = base_path;
      $send(self.filer.$text((new Map([["data", "parent"], ["color", "white"], ["cursor", "pointer"], ["left", 20], ["top", 0], ["position", "absolute"]]))), 'touch', ["tap"], function $$44(){var self = $$44.$$s == null ? this : $$44.$$s;
        if (self.filer == null) self.filer = nil;
        if (self.path == null) self.path = nil;

        
        self.filer.$clear(true);
        self.path = self.path.$chomp("/");
        self.path = $rb_plus(self.path['$[]'](0, self.path.$rindex("/")), "/");
        return self.$browser(self.path);}, {$$s: self, $$source_location: ['atome/utilities/utilities.rb', 1240]});
      $send($$('A'), 'terminal', ["cd " + (base_path) + "  && ls -d */ 2>/dev/null"], function $$45(data){var self = $$45.$$s == null ? this : $$45.$$s;

        
        if (data == null) data = nil;
        return $send(data, 'each_line', [], function $$46(file){var self = $$46.$$s == null ? this : $$46.$$s, parts = nil;

          
          if (file == null) file = nil;
          file = file.$strip();
          if ($truthy(file['$empty?']())) {
            return nil
          };
          parts = file.$split("/");
          return $send(parts, 'each_with_index', [], function $$47(part, index){var self = $$47.$$s == null ? this : $$47.$$s;
            if (self.filer == null) self.filer = nil;

            
            if (part == null) part = nil;
            if (index == null) index = nil;
            if ($truthy(part['$empty?']())) {
              return nil
            };
            $send(self.filer.$text((new Map([["data", part], ["color", "white"], ["cursor", "pointer"], ["left", $rb_times(index, 20)], ["top", $rb_plus(33, offset)], ["position", "absolute"]]))), 'touch', ["tap"], function $$48(){var self = $$48.$$s == null ? this : $$48.$$s, new_path = nil;
              if (self.filer == null) self.filer = nil;
              if (self.path == null) self.path = nil;

              
              self.filer.$clear(true);
              new_path = $rb_plus(self.path, "/" + (part));
              return self.$browser(new_path);}, {$$s: self, $$source_location: ['atome/utilities/utilities.rb', 1265]});
            return (offset = $rb_plus(offset, 20));}, {$$s: self, $$source_location: ['atome/utilities/utilities.rb', 1263]});}, {$$s: self, $$source_location: ['atome/utilities/utilities.rb', 1257]});}, {$$s: self, $$source_location: ['atome/utilities/utilities.rb', 1256]});
      v = self.$grab("view");
      return $send(v, 'terminal', ["cd " + (base_path) + "  && ls -p | grep -v /"], function $$49(data){var self = $$49.$$s == null ? this : $$49.$$s;

        
        if (data == null) data = nil;
        return $send(data, 'each_line', [], function $$50(file){var self = $$50.$$s == null ? this : $$50.$$s, parts = nil;

          
          if (file == null) file = nil;
          file = file.$strip();
          if ($truthy(file['$empty?']())) {
            return nil
          };
          parts = file.$split("/");
          return $send(parts, 'each_with_index', [], function $$51(part, index){var self = $$51.$$s == null ? this : $$51.$$s, file_path = nil;
            if (self.filer == null) self.filer = nil;

            
            if (part == null) part = nil;
            if (index == null) index = nil;
            if ($truthy(part['$empty?']())) {
              return nil
            };
            file_path = "" + (base_path) + "/" + (file);
            file_path = file_path.$gsub("//", "/");
            $send(self.filer.$text((new Map([["data", part], ["color", "orange"], ["cursor", "pointer"], ["left", $rb_times(index, 20)], ["top", $rb_plus(33, offset)], ["position", "absolute"]]))), 'touch', ["tap"], function $$52(){var self = $$52.$$s == null ? this : $$52.$$s;

              return $send($$('A'), 'read', [file_path], function $$53(file_data){var self = $$53.$$s == null ? this : $$53.$$s, actions = nil, editor = nil, close = nil, save = nil, body = nil, exec = nil, sanitized_code = nil;
                if (self.path == null) self.path = nil;

                
                if (file_data == null) file_data = nil;
                actions = self.$determine_action(file_data);
                if ($eqeq(actions['$[]']("open"), true)) {
                  
                  editor = self.$grab("intuition").$box((new Map([["left", 150], ["depth", 0], ["top", 9], ["width", 399], ["height", 699], ["color", (new Map([["red", 0.07], ["green", 0.07], ["blue", 0.07], ["alpha", 1.0]]))], ["overflow", "auto"], ["drag", true], ["resize", true]])));
                  editor.$text((new Map([["data", $rb_plus($rb_plus(self.path, "/"), file)], ["top", 0], ["left", 6], ["color", "orange"]])));
                  close = editor.$circle((new Map([["color", "yellowgreen"], ["left", "auto"], ["right", 6], ["top", 9], ["width", 15], ["height", 15]])));
                  close.$text((new Map([["data", "x"], ["top", 0], ["left", 3], ["color", "black"], ["position", "absolute"]])));
                  $send(close, 'touch', ["tap"], function $$54(){
                    return editor.$delete(true)}, {$$source_location: ['atome/utilities/utilities.rb', 1329]});
                  save = editor.$circle((new Map([["color", "orange"], ["left", "auto"], ["right", 33], ["top", 9], ["width", 15], ["height", 15]])));
                  $send(save, 'touch', ["tap"], function $$55(){var self = $$55.$$s == null ? this : $$55.$$s;

                    return self.$alert("save_file")}, {$$s: self, $$source_location: ['atome/utilities/utilities.rb', 1334]});
                  body = editor.$text((new Map([["top", 39], ["left", 6], ["color", "lightgrey"], ["data", file_data], ["edit", true]])));
                };
                if ($truthy(file['$end_with?'](".rb"))) {
                  
                  exec = editor.$circle((new Map([["color", "red"], ["left", "auto"], ["right", 66], ["top", 9], ["width", 15], ["height", 15]])));
                  $send(exec, 'touch', ["tap"], function $$56(){var self = $$56.$$s == null ? this : $$56.$$s, code = nil, sanitized_code = nil;

                    
                    self.$grab("view").$clear(true);
                    code = body.$data();
                    sanitized_code = self.$extract_and_sanitize_js(code);
                    return self.$grab("view").$instance_eval(sanitized_code);}, {$$s: self, $$source_location: ['atome/utilities/utilities.rb', 1344]});
                };
                if ($eqeq(actions['$[]']("execute"), true)) {
                  
                  self.$grab("view").$clear(true);
                  sanitized_code = self.$extract_and_sanitize_js(file_data);
                  return self.$grab("view").$instance_eval(sanitized_code);
                } else {
                  return nil
                };}, {$$s: self, $$source_location: ['atome/utilities/utilities.rb', 1307]})}, {$$s: self, $$source_location: ['atome/utilities/utilities.rb', 1297]});
            return (offset = $rb_plus(offset, 20));}, {$$s: self, $$source_location: ['atome/utilities/utilities.rb', 1292]});}, {$$s: self, $$source_location: ['atome/utilities/utilities.rb', 1286]});}, {$$s: self, $$source_location: ['atome/utilities/utilities.rb', 1285]});
    }, {$$source_location: ['atome/utilities/utilities.rb', 1219]});
    
    $def(self, '$simulate', function $$simulate(type) {
      var self = this, current_obj = nil, codes_found = nil;

      
      current_obj = self.$grab(self.$id());
      codes_found = current_obj.$instance_variable_get("@" + (type) + "_code");
      if ($truthy(codes_found['$instance_of?']($$('Hash')))) {
        return $send(codes_found, 'each', [], function $$57(event, content){var self = $$57.$$s == null ? this : $$57.$$s;

          
          if (event == null) event = nil;
          if (content == null) content = nil;
          if ($truthy(content['$instance_of?']($$('Array')))) {
            return $send(content, 'each', [], function $$58(code){var self = $$58.$$s == null ? this : $$58.$$s;

              
              if (code == null) code = nil;
              return $send(self, 'instance_exec', [current_obj, event, code], code.$to_proc());}, {$$s: self, $$source_location: ['atome/utilities/utilities.rb', 1373]})
          } else {
            return nil
          };}, {$$s: self, $$source_location: ['atome/utilities/utilities.rb', 1371]})
      } else {
        return nil
      };
    }, {$$source_location: ['atome/utilities/utilities.rb', 1368]});
    
    $def(self, '$to_console', function $$to_console(msg) {
      var self = this;

      if ($truthy(self.$grab("atome_console"))) {
        return self.$grab("atome_console_content").$text((new Map([["data", msg], ["left", 6], ["top", 20]])))
      } else {
        return nil
      }
    }, {$$source_location: ['atome/utilities/utilities.rb', 1380]});
    
    $def(self, '$idb_load_callback', function $$idb_load_callback(operation, content) {
      var self = this, proc_f = nil;

      
      if (content == null) content = nil;
      
      switch (operation.valueOf()) {
        case "save":
          
          proc_f = $$('A').$content()['$[]']("idb_save_proc");
          if ($truthy(proc_f['$is_a?']($$('Proc')))) {
            return proc_f.$call(content)
          } else {
            return nil
          };
          break;
        case "load":
          
          proc_f = $$('A').$content()['$[]']("idb_load_proc");
          if ($truthy(proc_f['$is_a?']($$('Proc')))) {
            return proc_f.$call(content)
          } else {
            return nil
          };
          break;
        case "remove":
          
          proc_f = $$('A').$content()['$[]']("idb_remove_proc");
          if ($truthy(proc_f['$is_a?']($$('Proc')))) {
            return proc_f.$call(content)
          } else {
            return nil
          };
          break;
        case "reset":
          
          proc_f = $$('A').$content()['$[]']("idb_reset_proc");
          if ($truthy(proc_f['$is_a?']($$('Proc')))) {
            return proc_f.$call(content)
          } else {
            return nil
          };
          break;
        case "list":
          
          proc_f = $$('A').$content()['$[]']("idb_list_proc");
          if ($truthy(proc_f['$is_a?']($$('Proc')))) {
            return proc_f.$call(content)
          } else {
            return nil
          };
          break;
        default:
          return self.$puts("nothing happened")
      };
    }, {$$arity: -2, $$source_location: ['atome/utilities/utilities.rb', 1387]});
    
    $def(self, '$idb_save', function $$idb_save(idb, filename, content) {
      var proc = $$idb_save.$$p || nil, self = this;

      $$idb_save.$$p = null;
      
      ;
      if ($truthy($$('A').$data()['$instance_of?']($$('Hash')))) {
        $$('A').$content()['$[]=']("idb_save_proc", proc)
      } else {
        $$('A')['$content=']((new Map([["idb_save_proc", proc]])))
      };
      return self.$js_func("idb_save", idb, filename, content);
    }, {$$source_location: ['atome/utilities/utilities.rb', 1409]});
    
    $def(self, '$idb_load', function $$idb_load(idb, filename) {
      var proc = $$idb_load.$$p || nil, self = this;

      $$idb_load.$$p = null;
      
      ;
      if ($truthy($$('A').$data()['$instance_of?']($$('Hash')))) {
        $$('A').$content()['$[]=']("idb_load_proc", proc)
      } else {
        $$('A')['$content=']((new Map([["idb_load_proc", proc]])))
      };
      return self.$js_func("idb_load", idb, filename);
    }, {$$source_location: ['atome/utilities/utilities.rb', 1418]});
    
    $def(self, '$idb_list', function $$idb_list(idb) {
      var proc = $$idb_list.$$p || nil, self = this;

      $$idb_list.$$p = null;
      
      ;
      if ($truthy($$('A').$data()['$instance_of?']($$('Hash')))) {
        $$('A').$content()['$[]=']("idb_list_proc", proc)
      } else {
        $$('A')['$content=']((new Map([["idb_list_proc", proc]])))
      };
      return self.$js_func("idb_list", idb);
    }, {$$source_location: ['atome/utilities/utilities.rb', 1427]});
    
    $def(self, '$idb_remove', function $$idb_remove(idb, filename) {
      var proc = $$idb_remove.$$p || nil, self = this;

      $$idb_remove.$$p = null;
      
      ;
      if ($truthy($$('A').$data()['$instance_of?']($$('Hash')))) {
        $$('A').$content()['$[]=']("idb_remove_proc", proc)
      } else {
        $$('A')['$content=']((new Map([["idb_remove_proc", proc]])))
      };
      return self.$js_func("idb_remove", idb, filename);
    }, {$$source_location: ['atome/utilities/utilities.rb', 1436]});
    return $def(self, '$idb_reset', function $$idb_reset(idb) {
      var proc = $$idb_reset.$$p || nil, self = this;

      $$idb_reset.$$p = null;
      
      ;
      if ($truthy($$('A').$data()['$instance_of?']($$('Hash')))) {
        $$('A').$content()['$[]=']("idb_reset_proc", proc)
      } else {
        $$('A')['$content=']((new Map([["idb_reset_proc", proc]])))
      };
      return self.$js_func("idb_reset", idb);
    }, {$$source_location: ['atome/utilities/utilities.rb', 1445]});
  })($nesting[0], null, $nesting);
};

Opal.modules["atome/genesis/particles/atome"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('new');
  
  self.$new((new Map([["particle", "creator"], ["category", "atome"], ["type", "hash"]])));
  return self.$new((new Map([["particle", "aid"], ["category", "atome"], ["type", "string"], ["store", false]])));
};

Opal.modules["atome/genesis/particles/communication"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $send = Opal.send, $truthy = Opal.truthy, $def = Opal.def, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('new,database_ready,instance_of?,length,messages,[]=,store_messages,send_message,html,puts,[],int8,parse,call,controller_code,controller_sender,<<,to_json');
  
  self.$new((new Map([["particle", "connection"], ["category", "communication"], ["type", "hash"]])));
  $send(self, 'new', [(new Map([["particle", "message"], ["category", "communication"], ["type", "hash"]]))], function $$1(params, bloc){var self = $$1.$$s == null ? this : $$1.$$s, message_id = nil;

    
    if (params == null) params = nil;
    if (bloc == null) bloc = nil;
    if ($truthy($$('Universe').$database_ready())) {
      
      if (!$truthy(params['$instance_of?']($$('Hash')))) {
        params = (new Map([["data", params]]))
      };
      message_id = "msg_" + ($$('Universe').$messages().$length());
      params['$[]=']("message_id", message_id);
      $$('Universe').$store_messages((new Map([["msg_nb", message_id], ["proc", bloc]])));
      return self.$html().$send_message(params);
    } else {
      return self.$puts("server not ready ")
    };}, {$$s: self, $$source_location: ['atome/genesis/particles/communication.rb', 9]});
  self.$new((new Map([["particle", "int8"], ["category", "communication"], ["type", "int"]])));
  $send(self, 'new', [(new Map([["particle", "language"], ["category", "communication"], ["type", "string"]]))], function $$2(params){var self = $$2.$$s == null ? this : $$2.$$s;

    
    if (params == null) params = nil;
    self.data = self.$int8()['$[]'](params);
    return params;}, {$$s: self, $$source_location: ['atome/genesis/particles/communication.rb', 26]});
  
  $def(self, '$receptor', function $$receptor(msg) {
    var parsed = nil;

    
    parsed = $$('JSON').$parse(msg);
    return $$('A').$controller_code()['$[]']("controller").$call(parsed);
  }, {$$source_location: ['atome/genesis/particles/communication.rb', 33]});
  $send(self, 'new', [(new Map([["particle", "controller"], ["category", "communication"], ["type", "hash"]]))], function $$3(msg){
    
    if (msg == null) msg = nil;
    return $$('Atome').$controller_sender(msg);}, {$$source_location: ['atome/genesis/particles/communication.rb', 38]});
  $send(self, 'new', [(new Map([["post", "controller"]]))], function $$4(_p, bloc){var self = $$4.$$s == null ? this : $$4.$$s;
    if (self.controller_proc == null) self.controller_proc = nil;

    
    if (_p == null) _p = nil;
    if (bloc == null) bloc = nil;
    return self.controller_proc['$<<'](bloc);}, {$$s: self, $$source_location: ['atome/genesis/particles/communication.rb', 42]});
  $send(self, 'new', [(new Map([["particle", "webkittalk"]]))], function $$5(val){
    
    if (val == null) val = nil;
    return val.$to_json();}, {$$source_location: ['atome/genesis/particles/communication.rb', 47]});
  return $send(self, 'new', [(new Map([["particle", "chrometalk"]]))], function $$6(val){
    
    if (val == null) val = nil;
    return val.$to_json();}, {$$source_location: ['atome/genesis/particles/communication.rb', 51]});
};

Opal.modules["atome/genesis/particles/effect"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $send = Opal.send, $truthy = Opal.truthy, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('new,nil?,affect,instance_of?');
  
  self.$new((new Map([["particle", "smooth"], ["category", "effect"], ["type", "int"]])));
  return $send(self, 'new', [(new Map([["particle", "blur"], ["category", "effect"], ["type", "int"]]))], function $$1(params){var self = $$1.$$s == null ? this : $$1.$$s, affect_to = nil, val = nil;

    
    if (params == null) params = nil;
    affect_to = ($truthy(self.$affect()['$nil?']()) ? (self.$affect()) : (["self"]));
    if (!$truthy(params['$instance_of?']($$('Hash')))) {
      val = (new Map([["value", params], ["affect", affect_to]]))
    };
    return val;}, {$$s: self, $$source_location: ['atome/genesis/particles/effect.rb', 5]});
};

Opal.modules["atome/genesis/particles/event"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $def = Opal.def, $eqeqeq = Opal.eqeqeq, $eqeq = Opal.eqeq, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('[],is_a?,instance_exec,to_proc,new,include?,keys,touch_handle_non_hash_params,[]=,===,<<,instance_of?,delete,==,instance_variable_get,merge,animate,html,untouchable');
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Atome');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.animate_code = nil;
    return $def(self, '$animation_callback', function $$animation_callback(proc_sub_category, value) {
      var self = this, proc_found = nil;

      
      if (value == null) value = nil;
      proc_found = self.animate_code['$[]'](proc_sub_category);
      if ($truthy(proc_found['$is_a?']($$('Proc')))) {
        return $send(self, 'instance_exec', [value], proc_found.$to_proc())
      } else {
        return nil
      };
    }, {$$arity: -2, $$source_location: ['atome/genesis/particles/event.rb', 3]})
  })($nesting[0], null, $nesting);
  self.$new((new Map([["particle", "touch"], ["category", "event"], ["type", "hash"], ["store", false]])));
  $send(self, 'new', [(new Map([["sanitizer", "touch"]]))], function $$1(params, user_bloc){var self = $$1.$$s == null ? this : $$1.$$s, $ret_or_1 = nil, option = nil, key = nil;
    if (self.touch == null) self.touch = nil;
    if (self.touch_code == null) self.touch_code = nil;

    
    if (params == null) params = nil;
    if (user_bloc == null) user_bloc = nil;
    if ($truthy(params)) {
      
      self.touch = ($truthy(($ret_or_1 = self.touch)) ? ($ret_or_1) : ((new Map())));
      self.touch_code = ($truthy(($ret_or_1 = self.touch_code)) ? ($ret_or_1) : ((new Map())));
      option = true;
      key = ($truthy(params['$is_a?']($$('Hash'))) ? (($truthy(params.$keys()['$include?']("tap")) ? (self.$touch_handle_non_hash_params("tap", params['$[]']("code"))) : ($truthy(params.$keys()['$include?']("down")) ? (self.$touch_handle_non_hash_params("down", params['$[]']("code"))) : ($truthy(params.$keys()['$include?']("up")) ? (self.$touch_handle_non_hash_params("up", params['$[]']("code"))) : ($truthy(params.$keys()['$include?']("long")) ? (self.$touch_handle_non_hash_params("long", params['$[]']("code"))) : ($truthy(params.$keys()['$include?']("double")) ? (self.$touch_handle_non_hash_params("double", params['$[]']("code"))) : ($truthy(params.$keys()['$include?'](false)) ? (self.$touch_handle_non_hash_params(false, params['$[]']("code"))) : ($truthy(params.$keys()['$include?']("remove")) ? (self.$touch_handle_non_hash_params(false, params['$[]']("remove"))) : (self.$touch_handle_non_hash_params("touch", params['$[]']("code"))))))))))) : (self.$touch_handle_non_hash_params(params, user_bloc)));
      self.touch['$[]='](key, option);
      return key;
    } else {
      
      self.touch = false;
      return params;
    };}, {$$s: self, $$source_location: ['atome/genesis/particles/event.rb', 11]});
  
  $def(self, '$touch_handle_non_hash_params', function $$touch_handle_non_hash_params(params, user_bloc) {
    var $a, self = this, $ret_or_1 = nil, $ret_or_2 = nil;
    if (self.touch_code == null) self.touch_code = nil;

    if (($eqeqeq(true, ($ret_or_1 = params)) || (($eqeqeq("touch", $ret_or_1) || ($eqeqeq("tap", $ret_or_1)))))) {
      
      ($truthy(($ret_or_2 = self.touch_code['$[]']("tap"))) ? ($ret_or_2) : (($a = ["tap", []], $send(self.touch_code, '[]=', $a), $a[$a.length - 1])))['$<<'](user_bloc);
      return "tap";
    } else if ($eqeqeq("down", $ret_or_1)) {
      
      ($truthy(($ret_or_2 = self.touch_code['$[]']("down"))) ? ($ret_or_2) : (($a = ["down", []], $send(self.touch_code, '[]=', $a), $a[$a.length - 1])))['$<<'](user_bloc);
      return "down";
    } else if ($eqeqeq("up", $ret_or_1)) {
      
      ($truthy(($ret_or_2 = self.touch_code['$[]']("up"))) ? ($ret_or_2) : (($a = ["up", []], $send(self.touch_code, '[]=', $a), $a[$a.length - 1])))['$<<'](user_bloc);
      return "up";
    } else if ($eqeqeq("long", $ret_or_1)) {
      
      ($truthy(($ret_or_2 = self.touch_code['$[]']("hold"))) ? ($ret_or_2) : (($a = ["hold", []], $send(self.touch_code, '[]=', $a), $a[$a.length - 1])))['$<<'](user_bloc);
      return "long";
    } else if ($eqeqeq("double", $ret_or_1)) {
      
      ($truthy(($ret_or_2 = self.touch_code['$[]']("doubletap"))) ? ($ret_or_2) : (($a = ["doubletap", []], $send(self.touch_code, '[]=', $a), $a[$a.length - 1])))['$<<'](user_bloc);
      return "double";
    } else if ($eqeqeq(false, $ret_or_1)) {
      
      ($truthy(($ret_or_2 = self.touch_code['$[]']("remove"))) ? ($ret_or_2) : (($a = ["remove", []], $send(self.touch_code, '[]=', $a), $a[$a.length - 1])))['$<<'](user_bloc);
      return "remove";
    } else {
      
      ($truthy(($ret_or_2 = self.touch_code['$[]']("tap"))) ? ($ret_or_2) : (($a = ["tap", []], $send(self.touch_code, '[]=', $a), $a[$a.length - 1])))['$<<'](user_bloc);
      return "tap";
    }
  }, {$$source_location: ['atome/genesis/particles/event.rb', 50]});
  self.$new((new Map([["particle", "play"], ["category", "event"], ["type", "boolean"], ["store", false]])));
  $send(self, 'new', [(new Map([["sanitizer", "play"]]))], function $$2(params, user_bloc){var $a, self = $$2.$$s == null ? this : $$2.$$s, $ret_or_1 = nil, option = nil;
    if (self.play == null) self.play = nil;
    if (self.play_code == null) self.play_code = nil;

    
    if (params == null) params = nil;
    if (user_bloc == null) user_bloc = nil;
    self.play = ($truthy(($ret_or_1 = self.play)) ? ($ret_or_1) : ((new Map())));
    self.play_code = ($truthy(($ret_or_1 = self.play_code)) ? ($ret_or_1) : ((new Map())));
    option = true;
    params = ($truthy(params['$instance_of?']($$('Hash'))) ? ((($a = [params.$keys()['$[]'](0), user_bloc], $send(self.play_code, '[]=', $a), $a[$a.length - 1]), (option = params['$[]'](params.$keys()['$[]'](0))), params.$keys()['$[]'](0))) : ($eqeqeq(true, ($ret_or_1 = params)) ? ((($a = ["play", user_bloc], $send(self.play_code, '[]=', $a), $a[$a.length - 1]), "play")) : ($eqeqeq("stop", $ret_or_1) ? ((($a = ["stop", user_bloc], $send(self.play_code, '[]=', $a), $a[$a.length - 1]), "stop")) : ($eqeqeq("play", $ret_or_1) ? ((($a = ["play", user_bloc], $send(self.play_code, '[]=', $a), $a[$a.length - 1]), "play")) : ($eqeqeq("pause", $ret_or_1) ? ((($a = ["pause", user_bloc], $send(self.play_code, '[]=', $a), $a[$a.length - 1]), "pause")) : ((($a = ["play", user_bloc], $send(self.play_code, '[]=', $a), $a[$a.length - 1]), (option = params), "play")))))));
    self.play['$[]='](params, option);
    return params;}, {$$s: self, $$source_location: ['atome/genesis/particles/event.rb', 78]});
  self.$new((new Map([["particle", "pause"], ["category", "event"], ["type", "boolean"]])));
  self.$new((new Map([["particle", "time"], ["category", "event"], ["type", "int"]])));
  self.$new((new Map([["particle", "on"], ["category", "event"], ["type", "boolean"], ["store", false]])));
  $send(self, 'new', [(new Map([["sanitizer", "on"]]))], function $$3(params, user_bloc){var $a, self = $$3.$$s == null ? this : $$3.$$s, $ret_or_1 = nil, option = nil, $ret_or_2 = nil;
    if (self.on == null) self.on = nil;
    if (self.on_code == null) self.on_code = nil;

    
    if (params == null) params = nil;
    if (user_bloc == null) user_bloc = nil;
    self.on = ($truthy(($ret_or_1 = self.on)) ? ($ret_or_1) : ((new Map())));
    self.on_code = ($truthy(($ret_or_1 = self.on_code)) ? ($ret_or_1) : ((new Map())));
    option = (new Map());
    params = ($truthy(params['$instance_of?']($$('Hash'))) ? ((($a = ["view_resize", user_bloc], $send(self.on_code, '[]=', $a), $a[$a.length - 1]), (option = params['$[]'](params.$keys()['$[]'](0))), (self.resize = (new Map([["code", user_bloc]]))), "resize")) : ($eqeqeq(true, ($ret_or_1 = params)) ? ((($a = ["view_resize", user_bloc], $send(self.on_code, '[]=', $a), $a[$a.length - 1]), "resize")) : ($eqeqeq("remove", $ret_or_1) ? ("remove") : ((($truthy(($ret_or_2 = self.on_code['$[]']("view_resize"))) ? ($ret_or_2) : (($a = ["view_resize", []], $send(self.on_code, '[]=', $a), $a[$a.length - 1]))), self.on_code['$[]']("view_resize")['$<<'](user_bloc), (option = params), "resize")))));
    self.on['$[]='](params, option);
    return params;}, {$$s: self, $$source_location: ['atome/genesis/particles/event.rb', 114]});
  self.$new((new Map([["particle", "fullscreen"], ["category", "event"], ["type", "boolean"]])));
  self.$new((new Map([["particle", "mute"], ["category", "event"], ["type", "boolean"]])));
  self.$new((new Map([["particle", "drag"], ["category", "event"], ["type", "boolean"], ["store", false]])));
  $send(self, 'new', [(new Map([["sanitizer", "drag"]]))], function $$4(params, user_bloc){var $a, self = $$4.$$s == null ? this : $$4.$$s, $ret_or_1 = nil, option = nil, $ret_or_2 = nil;
    if (self.drag == null) self.drag = nil;
    if (self.drag_code == null) self.drag_code = nil;

    
    if (params == null) params = nil;
    if (user_bloc == null) user_bloc = nil;
    self.drag = ($truthy(($ret_or_1 = self.drag)) ? ($ret_or_1) : ((new Map())));
    self.drag_code = ($truthy(($ret_or_1 = self.drag_code)) ? ($ret_or_1) : ((new Map())));
    option = true;
    params = ($truthy(params['$instance_of?']($$('Hash'))) ? ((($truthy(params['$[]']("code")) ? ((user_bloc = params.$delete("code"))) : nil), ($truthy(user_bloc) ? (($a = [params.$keys()['$[]'](0), [user_bloc]], $send(self.drag_code, '[]=', $a), $a[$a.length - 1])) : (($a = [params.$keys()['$[]'](0), []], $send(self.drag_code, '[]=', $a), $a[$a.length - 1]))), (option = params['$[]'](params.$keys()['$[]'](0))), (self.drag = (new Map([["code", [user_bloc]]]))), params.$keys()['$[]'](0))) : ($eqeqeq(true, ($ret_or_1 = params)) ? ((($truthy(($ret_or_2 = self.drag_code['$[]']("move"))) ? ($ret_or_2) : (($a = ["move", []], $send(self.drag_code, '[]=', $a), $a[$a.length - 1]))), self.drag_code['$[]']("move")['$<<'](user_bloc), "move")) : ($eqeqeq("move", $ret_or_1) ? ((($truthy(($ret_or_2 = self.drag_code['$[]']("move"))) ? ($ret_or_2) : (($a = ["move", []], $send(self.drag_code, '[]=', $a), $a[$a.length - 1]))), self.drag_code['$[]']("move")['$<<'](user_bloc), "move")) : ($eqeqeq("drag", $ret_or_1) ? ((($truthy(($ret_or_2 = self.drag_code['$[]']("move"))) ? ($ret_or_2) : (($a = ["move", []], $send(self.drag_code, '[]=', $a), $a[$a.length - 1]))), self.drag_code['$[]']("move")['$<<'](user_bloc), "move")) : ($eqeqeq("clone", $ret_or_1) ? ((($truthy(($ret_or_2 = self.drag_code['$[]']("clone"))) ? ($ret_or_2) : (($a = ["clone", []], $send(self.drag_code, '[]=', $a), $a[$a.length - 1]))), self.drag_code['$[]']("clone")['$<<'](user_bloc), "clone")) : ($eqeqeq("start", $ret_or_1) ? ((($truthy(($ret_or_2 = self.drag_code['$[]']("start"))) ? ($ret_or_2) : (($a = ["start", []], $send(self.drag_code, '[]=', $a), $a[$a.length - 1]))), self.drag_code['$[]']("start")['$<<'](user_bloc), "start")) : ($eqeqeq("stop", $ret_or_1) ? ((($truthy(($ret_or_2 = self.drag_code['$[]']("end"))) ? ($ret_or_2) : (($a = ["end", []], $send(self.drag_code, '[]=', $a), $a[$a.length - 1]))), self.drag_code['$[]']("end")['$<<'](user_bloc), "end")) : ($eqeqeq("end", $ret_or_1) ? ((($truthy(($ret_or_2 = self.drag_code['$[]']("end"))) ? ($ret_or_2) : (($a = ["end", []], $send(self.drag_code, '[]=', $a), $a[$a.length - 1]))), self.drag_code['$[]']("end")['$<<'](user_bloc), "end")) : ($eqeqeq("locked", $ret_or_1) ? ((($truthy(($ret_or_2 = self.drag_code['$[]']("locked"))) ? ($ret_or_2) : (($a = ["locked", []], $send(self.drag_code, '[]=', $a), $a[$a.length - 1]))), self.drag_code['$[]']("locked")['$<<'](user_bloc), "locked")) : ($eqeqeq(false, $ret_or_1) ? ((($truthy(($ret_or_2 = self.drag_code['$[]']("remove"))) ? ($ret_or_2) : (($a = ["remove", []], $send(self.drag_code, '[]=', $a), $a[$a.length - 1]))), self.drag_code['$[]']("remove")['$<<'](option), "remove")) : ((($truthy(($ret_or_2 = self.drag_code['$[]']("move"))) ? ($ret_or_2) : (($a = ["move", []], $send(self.drag_code, '[]=', $a), $a[$a.length - 1]))), self.drag_code['$[]']("move")['$<<'](user_bloc)))))))))))));
    self.drag['$[]='](params, option);
    if ($eqeq(params, "remove")) {
      
      self.drag_code['$[]']("remove")['$<<'](option);
      params = false;
    } else {
      self.drag['$[]='](params, option)
    };
    return params;}, {$$s: self, $$source_location: ['atome/genesis/particles/event.rb', 144]});
  self.$new((new Map([["particle", "drop"], ["category", "event"], ["type", "boolean"], ["store", false]])));
  $send(self, 'new', [(new Map([["sanitizer", "drop"]]))], function $$5(params, user_bloc){var $a, self = $$5.$$s == null ? this : $$5.$$s, $ret_or_1 = nil, option = nil, $ret_or_2 = nil;
    if (self.drop == null) self.drop = nil;
    if (self.drop_code == null) self.drop_code = nil;

    
    if (params == null) params = nil;
    if (user_bloc == null) user_bloc = nil;
    self.drop = ($truthy(($ret_or_1 = self.drop)) ? ($ret_or_1) : ((new Map())));
    self.drop_code = ($truthy(($ret_or_1 = self.drop_code)) ? ($ret_or_1) : ((new Map())));
    option = true;
    params = ($truthy(params['$instance_of?']($$('Hash'))) ? ((($truthy(params['$[]']("code")) ? ((user_bloc = params.$delete("code"))) : nil), ($a = [params.$keys()['$[]'](0), [user_bloc]], $send(self.drop_code, '[]=', $a), $a[$a.length - 1]), (option = params['$[]'](params.$keys()['$[]'](0))), (self.drop = (new Map([["code", [user_bloc]]]))), params.$keys()['$[]'](0))) : ($eqeqeq(true, ($ret_or_1 = params)) ? ((($truthy(($ret_or_2 = self.drop_code['$[]']("dropped"))) ? ($ret_or_2) : (($a = ["dropped", []], $send(self.drop_code, '[]=', $a), $a[$a.length - 1]))), self.drop_code['$[]']("dropped")['$<<'](user_bloc), "dropped")) : ($eqeqeq("enter", $ret_or_1) ? ((($truthy(($ret_or_2 = self.drop_code['$[]']("enter"))) ? ($ret_or_2) : (($a = ["enter", []], $send(self.drop_code, '[]=', $a), $a[$a.length - 1]))), self.drop_code['$[]']("enter")['$<<'](user_bloc), "enter")) : ($eqeqeq("activate", $ret_or_1) ? ((($truthy(($ret_or_2 = self.drop_code['$[]']("activate"))) ? ($ret_or_2) : (($a = ["activate", []], $send(self.drop_code, '[]=', $a), $a[$a.length - 1]))), self.drop_code['$[]']("activate")['$<<'](user_bloc), "activate")) : ($eqeqeq("deactivate", $ret_or_1) ? ((($truthy(($ret_or_2 = self.drop_code['$[]']("deactivate"))) ? ($ret_or_2) : (($a = ["deactivate", []], $send(self.drop_code, '[]=', $a), $a[$a.length - 1]))), self.drop_code['$[]']("deactivate")['$<<'](user_bloc), "deactivate")) : ($eqeqeq("remove", $ret_or_1) ? ((($truthy(($ret_or_2 = self.drop_code['$[]']("remove"))) ? ($ret_or_2) : (($a = ["remove", []], $send(self.drop_code, '[]=', $a), $a[$a.length - 1]))), self.drop_code['$[]']("remove")['$<<'](user_bloc), "remove")) : ($eqeqeq(false, $ret_or_1) ? ((($truthy(($ret_or_2 = self.drop_code['$[]']("remove"))) ? ($ret_or_2) : (($a = ["remove", []], $send(self.drop_code, '[]=', $a), $a[$a.length - 1]))), self.drop_code['$[]']("remove")['$<<'](user_bloc), "remove")) : ($eqeqeq("leave", $ret_or_1) ? ((($truthy(($ret_or_2 = self.drop_code['$[]']("leave"))) ? ($ret_or_2) : (($a = ["leave", []], $send(self.drop_code, '[]=', $a), $a[$a.length - 1]))), self.drop_code['$[]']("leave")['$<<'](user_bloc), "leave")) : ((($truthy(($ret_or_2 = self.drop_code['$[]']("dropped"))) ? ($ret_or_2) : (($a = ["dropped", []], $send(self.drop_code, '[]=', $a), $a[$a.length - 1]))), self.drop_code['$[]']("dropped")['$<<'](user_bloc), "dropped"))))))))));
    self.drop['$[]='](params, option);
    return params;}, {$$s: self, $$source_location: ['atome/genesis/particles/event.rb', 215]});
  self.$new((new Map([["particle", "over"], ["category", "event"], ["type", "hash"], ["store", false]])));
  $send(self, 'new', [(new Map([["sanitizer", "over"]]))], function $$6(params, user_bloc){var $a, self = $$6.$$s == null ? this : $$6.$$s, $ret_or_1 = nil, option = nil, $ret_or_2 = nil;
    if (self.over == null) self.over = nil;
    if (self.over_code == null) self.over_code = nil;

    
    if (params == null) params = nil;
    if (user_bloc == null) user_bloc = nil;
    self.over = ($truthy(($ret_or_1 = self.over)) ? ($ret_or_1) : ((new Map())));
    self.over_code = ($truthy(($ret_or_1 = self.over_code)) ? ($ret_or_1) : ((new Map())));
    option = true;
    params = ($truthy(params['$instance_of?']($$('Hash'))) ? ((($truthy(params['$[]']("code")) ? ((user_bloc = params.$delete("code"))) : nil), ($a = [params.$keys()['$[]'](0), [user_bloc]], $send(self.over_code, '[]=', $a), $a[$a.length - 1]), (option = params['$[]'](params.$keys()['$[]'](0))), (self.over = (new Map([["code", [user_bloc]]]))), params.$keys()['$[]'](0))) : ($eqeqeq(true, ($ret_or_1 = params)) ? ((($truthy(($ret_or_2 = self.over_code['$[]']("flyover"))) ? ($ret_or_2) : (($a = ["flyover", []], $send(self.over_code, '[]=', $a), $a[$a.length - 1]))), self.over_code['$[]']("flyover")['$<<'](user_bloc), "over")) : ($eqeqeq("over", $ret_or_1) ? ((($truthy(($ret_or_2 = self.over_code['$[]']("flyover"))) ? ($ret_or_2) : (($a = ["flyover", []], $send(self.over_code, '[]=', $a), $a[$a.length - 1]))), self.over_code['$[]']("flyover")['$<<'](user_bloc), "over")) : ($eqeqeq("enter", $ret_or_1) ? ((($truthy(($ret_or_2 = self.over_code['$[]']("enter"))) ? ($ret_or_2) : (($a = ["enter", []], $send(self.over_code, '[]=', $a), $a[$a.length - 1]))), self.over_code['$[]']("enter")['$<<'](user_bloc), "enter")) : ($eqeqeq("leave", $ret_or_1) ? ((($truthy(($ret_or_2 = self.over_code['$[]']("leave"))) ? ($ret_or_2) : (($a = ["leave", []], $send(self.over_code, '[]=', $a), $a[$a.length - 1]))), self.over_code['$[]']("leave")['$<<'](user_bloc), "leave")) : ((($truthy(($ret_or_2 = self.over_code['$[]']("flyover"))) ? ($ret_or_2) : (($a = ["flyover", []], $send(self.over_code, '[]=', $a), $a[$a.length - 1]))), self.over_code['$[]']("flyover")['$<<'](user_bloc), "over")))))));
    self.over['$[]='](params, option);
    return params;}, {$$s: self, $$source_location: ['atome/genesis/particles/event.rb', 266]});
  self.$new((new Map([["particle", "targets"], ["category", "event"], ["type", "string"]])));
  self.$new((new Map([["particle", "start"], ["category", "event"], ["type", "boolean"]])));
  $send(self, 'new', [(new Map([["pre", "start"]]))], function $$7(_value, user_proc){var self = $$7.$$s == null ? this : $$7.$$s;

    
    if (_value == null) _value = nil;
    if (user_proc == null) user_proc = nil;
    return (self.animation_start_proc = user_proc);}, {$$s: self, $$source_location: ['atome/genesis/particles/event.rb', 312]});
  self.$new((new Map([["particle", "stop"], ["category", "event"], ["type", "boolean"]])));
  $send(self, 'new', [(new Map([["pre", "stop"]]))], function $$8(_value, user_proc){var self = $$8.$$s == null ? this : $$8.$$s;

    
    if (_value == null) _value = nil;
    if (user_proc == null) user_proc = nil;
    return (self.animation_stop_proc = user_proc);}, {$$s: self, $$source_location: ['atome/genesis/particles/event.rb', 316]});
  self.$new((new Map([["particle", "begin"], ["category", "event"], ["type", "time"]])));
  self.$new((new Map([["particle", "end"], ["category", "event"], ["type", "time"]])));
  self.$new((new Map([["particle", "duration"], ["category", "event"], ["type", "int"]])));
  self.$new((new Map([["particle", "mass"], ["category", "event"], ["type", "int"]])));
  self.$new((new Map([["particle", "damping"], ["category", "event"], ["type", "int"]])));
  self.$new((new Map([["particle", "stiffness"], ["category", "event"], ["type", "int"]])));
  self.$new((new Map([["particle", "velocity"], ["category", "event"], ["type", "int"]])));
  self.$new((new Map([["particle", "ease"], ["category", "event"], ["type", "boolean"]])));
  self.$new((new Map([["particle", "keyboard"], ["category", "event"], ["type", "hash"], ["store", false]])));
  $send(self, 'new', [(new Map([["sanitizer", "keyboard"]]))], function $$9(params, user_bloc){var $a, self = $$9.$$s == null ? this : $$9.$$s, $ret_or_1 = nil, option = nil;
    if (self.keyboard == null) self.keyboard = nil;
    if (self.keyboard_code == null) self.keyboard_code = nil;

    
    if (params == null) params = nil;
    if (user_bloc == null) user_bloc = nil;
    self.keyboard = ($truthy(($ret_or_1 = self.keyboard)) ? ($ret_or_1) : ((new Map())));
    self.keyboard_code = ($truthy(($ret_or_1 = self.keyboard_code)) ? ($ret_or_1) : ((new Map())));
    option = (new Map());
    params = ($truthy(params['$instance_of?']($$('Hash'))) ? (((option = params['$[]'](params.$keys()['$[]'](0))), params.$keys()['$[]'](0))) : ($eqeqeq(true, ($ret_or_1 = params)) ? ((($a = ["press", user_bloc], $send(self.keyboard_code, '[]=', $a), $a[$a.length - 1]), "press")) : ($eqeqeq("down", $ret_or_1) ? ((($a = ["down", user_bloc], $send(self.keyboard_code, '[]=', $a), $a[$a.length - 1]), "down")) : ($eqeqeq("up", $ret_or_1) ? ((($a = ["up", user_bloc], $send(self.keyboard_code, '[]=', $a), $a[$a.length - 1]), "up")) : ($eqeqeq("press", $ret_or_1) ? ((($a = ["press", user_bloc], $send(self.keyboard_code, '[]=', $a), $a[$a.length - 1]), "press")) : ($eqeqeq("remove", $ret_or_1) ? ((($a = ["remove", user_bloc], $send(self.keyboard_code, '[]=', $a), $a[$a.length - 1]), "remove")) : ((($a = ["press", user_bloc], $send(self.keyboard_code, '[]=', $a), $a[$a.length - 1]), (option = params), "press"))))))));
    self.keyboard['$[]='](params, option);
    return params;}, {$$s: self, $$source_location: ['atome/genesis/particles/event.rb', 328]});
  self.$new((new Map([["particle", "resize"], ["category", "event"], ["type", "boolean"], ["store", false]])));
  $send(self, 'new', [(new Map([["sanitizer", "resize"]]))], function $$10(params, user_bloc){var $a, self = $$10.$$s == null ? this : $$10.$$s, $ret_or_1 = nil, option = nil;
    if (self.resize == null) self.resize = nil;
    if (self.resize_code == null) self.resize_code = nil;

    
    if (params == null) params = nil;
    if (user_bloc == null) user_bloc = nil;
    self.resize = ($truthy(($ret_or_1 = self.resize)) ? ($ret_or_1) : ((new Map())));
    self.resize_code = ($truthy(($ret_or_1 = self.resize_code)) ? ($ret_or_1) : ((new Map())));
    option = (new Map([["min", (new Map([["width", 10], ["height", 10]]))], ["max", (new Map([["width", 3000], ["height", 3000]]))]]));
    params = ($truthy(params['$instance_of?']($$('Hash'))) ? ((($a = ["resize", user_bloc], $send(self.resize_code, '[]=', $a), $a[$a.length - 1]), (option = params['$[]'](params.$keys()['$[]'](0))), (self.resize = (new Map([["code", user_bloc]]))), "resize")) : ($eqeqeq(true, ($ret_or_1 = params)) ? ((($a = ["resize", user_bloc], $send(self.resize_code, '[]=', $a), $a[$a.length - 1]), "resize")) : ($eqeqeq("remove", $ret_or_1) ? ("remove") : ((($a = ["resize", user_bloc], $send(self.resize_code, '[]=', $a), $a[$a.length - 1]), (option = params), "resize")))));
    self.resize['$[]='](params, option);
    return params;}, {$$s: self, $$source_location: ['atome/genesis/particles/event.rb', 364]});
  $send(self, 'new', [(new Map([["particle", "overflow"], ["category", "event"], ["type", "boolean"]]))], function $$11(params, bloc){var self = $$11.$$s == null ? this : $$11.$$s, $ret_or_1 = nil;
    if (self.overflow_code == null) self.overflow_code = nil;

    
    if (params == null) params = nil;
    if (bloc == null) bloc = nil;
    self.overflow_code = ($truthy(($ret_or_1 = self.overflow_code)) ? ($ret_or_1) : ((new Map())));
    self.$instance_variable_get("@overflow_code")['$[]=']("overflow", bloc);
    return params;}, {$$s: self, $$source_location: ['atome/genesis/particles/event.rb', 391]});
  $send(self, 'new', [(new Map([["particle", "animate"], ["category", "event"], ["type", "hash"]]))], function $$12(params, proc){var self = $$12.$$s == null ? this : $$12.$$s, $ret_or_1 = nil;
    if (self.animate_code == null) self.animate_code = nil;

    
    if (params == null) params = nil;
    if (proc == null) proc = nil;
    params = ($truthy(params['$instance_of?']($$('Hash'))) ? ((new Map([["from", 0], ["to", 300], ["duration", 1000]])).$merge(params)) : ((new Map([["from", 0], ["to", 300], ["duration", 1000]]))));
    if ($truthy(params['$[]']("end"))) {
      self.animate_code['$[]=']("" + (params['$[]']("end")) + "_end", proc)
    } else {
      
      self.animate_code = ($truthy(($ret_or_1 = self.animate_code)) ? ($ret_or_1) : ((new Map())));
      self.animate_code['$[]=']("" + (params['$[]']("particle")), proc);
    };
    return params;}, {$$s: self, $$source_location: ['atome/genesis/particles/event.rb', 397]});
  $send(self, 'new', [(new Map([["after", "animate"]]))], function $$13(params){var self = $$13.$$s == null ? this : $$13.$$s;

    
    if (params == null) params = nil;
    if (($truthy(params['$[]']("end")) || ($truthy(params['$[]']("start"))))) {
      return nil
    } else {
      return self.$html().$animate(params)
    };}, {$$s: self, $$source_location: ['atome/genesis/particles/event.rb', 413]});
  return $send(self, 'new', [(new Map([["particle", "untouchable"]]))], function $$14(){var self = $$14.$$s == null ? this : $$14.$$s;

    return self.$html().$untouchable()}, {$$s: self, $$source_location: ['atome/genesis/particles/event.rb', 417]});
};

Opal.modules["atome/genesis/particles/geometry"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $send = Opal.send, $truthy = Opal.truthy, $eqeq = Opal.eqeq, $rb_divide = Opal.rb_divide, $rb_times = Opal.rb_times, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('new,instance_of?,[],[]=,==,width,value,height,/,*,each,fasten,size,grab');
  
  self.$new((new Map([["particle", "width"], ["category", "geometry"], ["type", "int"]])));
  self.$new((new Map([["particle", "height"], ["category", "geometry"], ["type", "int"]])));
  return $send(self, 'new', [(new Map([["particle", "size"], ["category", "geometry"], ["type", "int"]]))], function $$1(params){var self = $$1.$$s == null ? this : $$1.$$s, $ret_or_1 = nil, original_width = nil, original_height = nil;

    
    if (params == null) params = nil;
    if (!$truthy(params['$instance_of?']($$('Hash')))) {
      params = (new Map([["value", params]]))
    };
    if ($truthy(($ret_or_1 = params['$[]']("recursive")))) {
      $ret_or_1
    } else {
      params['$[]=']("recursive", false)
    };
    if ($truthy(($ret_or_1 = params['$[]']("reference")))) {
      $ret_or_1
    } else {
      params['$[]=']("reference", "x")
    };
    if ($truthy(($ret_or_1 = params['$[]']("target")))) {
      $ret_or_1
    } else {
      params['$[]=']("target", "self")
    };
    if ($truthy(($ret_or_1 = params['$[]']("propagate")))) {
      $ret_or_1
    } else {
      params['$[]=']("propagate", "raw")
    };
    if ($eqeq(params['$[]']("reference"), "x")) {
      
      original_width = self.$width();
      self.$width(params['$[]']("value"));
      if ($truthy(self.$value())) {
        self.$height($rb_divide($rb_times(self.$height(), params['$[]']("value")), original_width))
      };
    } else {
      
      original_height = self.$height();
      self.$height(params['$[]']("value"));
      self.$width($rb_divide($rb_times(self.$width(), params['$[]']("value")), original_height));
    };
    if ($truthy(params['$[]']("recursive"))) {
      return $send(self.$fasten(), 'each', [], function $$2(atome_id){var self = $$2.$$s == null ? this : $$2.$$s;

        
        if (atome_id == null) atome_id = nil;
        return self.$grab(atome_id).$size(params);}, {$$s: self, $$source_location: ['atome/genesis/particles/geometry.rb', 24]})
    } else {
      return nil
    };}, {$$s: self, $$source_location: ['atome/genesis/particles/geometry.rb', 6]});
};

Opal.modules["atome/genesis/particles/hierarchy"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $truthy = Opal.truthy, $def = Opal.def, $eqeq = Opal.eqeq, $send = Opal.send, $rb_plus = Opal.rb_plus, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('attach,grab,delete,fasten,==,fasten=,include?,push,historicize,aid,detach_child,render,to_proc,new,attachment_common,instance_of?,each,dup,left,top,+,unfasten,id,<<,instance_variable_get,instance_variable_set,remove,apply');
  
  
  $def(self, '$detach_child', function $$detach_child(child) {
    var self = this, parent = nil;
    if (self.id == null) self.id = nil;

    
    if (!$truthy(child.$attach())) {
      return nil
    };
    parent = self.$grab(child.$attach());
    return parent.$fasten().$delete(self.id);
  }, {$$source_location: ['atome/genesis/particles/hierarchy.rb', 2]});
  
  $def(self, '$attachment_common', function $$attachment_common(child_id, parents_id, direction) {
    var user_proc = $$attachment_common.$$p || nil, self = this, parent_found = nil, $ret_or_1 = nil, child_found = nil;
    if (self.id == null) self.id = nil;

    $$attachment_common.$$p = null;
    
    ;
    parent_found = self.$grab(parents_id);
    if ($eqeq(direction, "attach")) {
      if ($truthy(parent_found)) {
        
        if ($truthy(($ret_or_1 = parent_found.$fasten()))) {
          $ret_or_1
        } else {
          parent_found['$fasten=']([])
        };
        if (!$truthy(parent_found.$fasten()['$include?'](self.id))) {
          
          parent_found.$fasten().$push(self.id);
          $$('Universe').$historicize(parent_found.$aid(), "write", "fasten", self.id);
        };
        self.$detach_child(self);
        return $send(self, 'render', ["attach", parents_id], user_proc.$to_proc());
      } else {
        return nil
      }
    } else {
      
      child_found = self.$grab(child_id);
      child_found.$attach(parents_id);
      return $send(child_found, 'render', ["attach", parents_id], user_proc.$to_proc());
    };
  }, {$$source_location: ['atome/genesis/particles/hierarchy.rb', 10]});
  $send(self, 'new', [(new Map([["particle", "attach"], ["category", "hierarchy"], ["type", "string"], ["render", false]]))], function $$1(parents_id){var user_proc = $$1.$$p || nil, self = $$1.$$s == null ? this : $$1.$$s;
    if (self.id == null) self.id = nil;

    $$1.$$p = null;
    
    ;
    if (parents_id == null) parents_id = nil;
    $send(self, 'attachment_common', [self.id, parents_id, "attach"], user_proc.$to_proc());
    return parents_id;}, {$$s: self, $$source_location: ['atome/genesis/particles/hierarchy.rb', 31]});
  $send(self, 'new', [(new Map([["particle", "fasten"], ["category", "hierarchy"], ["type", "string"], ["render", false]]))], function $$3(children_ids){var user_proc = $$3.$$p || nil, self = $$3.$$s == null ? this : $$3.$$s, parents_id = nil;
    if (self.id == null) self.id = nil;

    $$3.$$p = null;
    
    ;
    if (children_ids == null) children_ids = nil;
    if (!$truthy(children_ids['$instance_of?']($$('Array')))) {
      children_ids = [children_ids]
    };
    parents_id = self.id;
    $send(children_ids, 'each', [], function $$4(children_id){var self = $$4.$$s == null ? this : $$4.$$s;

      
      if (children_id == null) children_id = nil;
      return $send(self, 'attachment_common', [children_id, parents_id, "fasten"], user_proc.$to_proc());}, {$$s: self, $$source_location: ['atome/genesis/particles/hierarchy.rb', 40]});
    return children_ids;}, {$$s: self, $$source_location: ['atome/genesis/particles/hierarchy.rb', 36]});
  $send(self, 'new', [(new Map([["sanitizer", "fasten"], ["category", "hierarchy"], ["type", "string"]]))], function $$5(children_ids){
    
    if (children_ids == null) children_ids = nil;
    return children_ids;}, {$$source_location: ['atome/genesis/particles/hierarchy.rb', 46]});
  $send(self, 'new', [(new Map([["particle", "unfasten"], ["category", "hierarchy"], ["type", "string"]]))], function $$6(params){var self = $$6.$$s == null ? this : $$6.$$s, dup_params = nil;

    
    if (params == null) params = nil;
    if ($eqeq(params, "all")) {
      params = self.$fasten()
    };
    dup_params = params.$dup();
    return $send(dup_params, 'each', [], function $$7(param){var self = $$7.$$s == null ? this : $$7.$$s, atome_to_unfasten = nil, atome_to_unfasten_left = nil, atome_to_unfasten_top = nil, parent_top = nil, parent_left = nil;

      
      if (param == null) param = nil;
      if ($truthy(self.$fasten()['$include?'](param))) {
        
        self.$fasten().$delete(param);
        atome_to_unfasten = self.$grab(param);
        atome_to_unfasten_left = atome_to_unfasten.$left();
        atome_to_unfasten_top = atome_to_unfasten.$top();
        parent_top = self.$top();
        parent_left = self.$left();
        atome_to_unfasten.$attach("view");
        atome_to_unfasten.$left($rb_plus(atome_to_unfasten_left, parent_left));
        return atome_to_unfasten.$top($rb_plus(atome_to_unfasten_top, parent_top));
      } else {
        return nil
      };}, {$$s: self, $$source_location: ['atome/genesis/particles/hierarchy.rb', 53]});}, {$$s: self, $$source_location: ['atome/genesis/particles/hierarchy.rb', 50]});
  $send(self, 'new', [(new Map([["particle", "detach"], ["category", "hierarchy"], ["type", "string"]]))], function $$8(params){var self = $$8.$$s == null ? this : $$8.$$s;

    
    if (params == null) params = nil;
    return self.$grab(params).$unfasten([self.$id()]);}, {$$s: self, $$source_location: ['atome/genesis/particles/hierarchy.rb', 68]});
  $send(self, 'new', [(new Map([["particle", "apply"], ["category", "hierarchy"], ["type", "string"], ["render", false], ["store", false]]))], function $$9(parents_ids){var user_proc = $$9.$$p || nil, self = $$9.$$s == null ? this : $$9.$$s, $ret_or_1 = nil, children_ids = nil;
    if (self.apply == null) self.apply = nil;

    $$9.$$p = null;
    
    ;
    if (parents_ids == null) parents_ids = nil;
    self.apply = ($truthy(($ret_or_1 = self.apply)) ? ($ret_or_1) : ([]));
    if (!$truthy(parents_ids['$instance_of?']($$('Array')))) {
      parents_ids = [parents_ids]
    };
    $send(parents_ids, 'each', [], function $$10(parent_id){var self = $$10.$$s == null ? this : $$10.$$s;
      if (self.apply == null) self.apply = nil;

      
      if (parent_id == null) parent_id = nil;
      self.apply.$delete(parent_id);
      return self.apply['$<<'](parent_id);}, {$$s: self, $$source_location: ['atome/genesis/particles/hierarchy.rb', 75]});
    parents_ids = self.apply;
    children_ids = [self.$id()];
    $send(parents_ids, 'each', [], function $$11(parent_id){var self = $$11.$$s == null ? this : $$11.$$s, parent_found = nil, parent_affect = nil, affect_element = nil;

      
      if (parent_id == null) parent_id = nil;
      parent_found = self.$grab(parent_id);
      parent_affect = parent_found.$instance_variable_get("@affect");
      if (!$truthy(parent_affect['$instance_of?']($$('Array')))) {
        parent_found.$instance_variable_set("@affect", [])
      };
      affect_element = parent_found.$instance_variable_get("@affect");
      return $send(children_ids, 'each', [], function $$12(child_id){var $a, self = $$12.$$s == null ? this : $$12.$$s, child_found = nil;

        
        if (child_id == null) child_id = nil;
        affect_element.$delete(child_id);
        affect_element['$<<'](child_id);
        child_found = self.$grab(child_id);
        return ($a = child_found, ($a === nil || $a == null) ? nil : $send($a, 'render', ["apply", parent_found], user_proc.$to_proc()));}, {$$s: self, $$source_location: ['atome/genesis/particles/hierarchy.rb', 86]});}, {$$s: self, $$source_location: ['atome/genesis/particles/hierarchy.rb', 81]});
    self.apply = parents_ids;
    return parents_ids;}, {$$s: self, $$source_location: ['atome/genesis/particles/hierarchy.rb', 72]});
  $send(self, 'new', [(new Map([["particle", "affect"], ["category", "hierarchy"], ["type", "string"], ["render", false]]))], function $$13(children_ids){var user_proc = $$13.$$p || nil, self = $$13.$$s == null ? this : $$13.$$s;

    $$13.$$p = null;
    
    ;
    if (children_ids == null) children_ids = nil;
    if (!$truthy(children_ids['$instance_of?']($$('Array')))) {
      children_ids = [children_ids]
    };
    $send(children_ids, 'each', [], function $$14(child_id){var self = $$14.$$s == null ? this : $$14.$$s, child_found = nil;

      
      if (child_id == null) child_id = nil;
      child_found = self.$grab(child_id);
      if (!$eqeq(child_found.$id(), "black_matter")) {
        child_found.$remove((new Map([["all", "paint"]])))
      };
      return $send(child_found, 'apply', [[self.$id()]], user_proc.$to_proc());}, {$$s: self, $$source_location: ['atome/genesis/particles/hierarchy.rb', 99]});
    return children_ids;}, {$$s: self, $$source_location: ['atome/genesis/particles/hierarchy.rb', 97]});
  return self.$new((new Map([["particle", "collect"], ["category", "hierarchy"], ["type", "string"]])));
};

Opal.modules["atome/genesis/particles/identity"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $send = Opal.send, $truthy = Opal.truthy, $eqeq = Opal.eqeq, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('new,to_sym,instance_of?,each,<<,grab,collect=,==,default_selection_style,send,id,selection,current_user,remove,delete,collect');
  
  self.$new((new Map([["particle", "real"], ["category", "identity"], ["type", "string"]])));
  self.$new((new Map([["particle", "type"], ["category", "identity"], ["type", "string"]])));
  self.$new((new Map([["particle", "id"], ["category", "identity"], ["type", "string"]])));
  $send(self, 'new', [(new Map([["sanitizer", "id"]]))], function $$1(params){
    
    if (params == null) params = nil;
    params = params.$to_sym();
    return params;}, {$$source_location: ['atome/genesis/particles/identity.rb', 6]});
  self.$new((new Map([["particle", "name"], ["category", "identity"], ["type", "string"]])));
  self.$new((new Map([["particle", "active"], ["category", "identity"], ["type", "boolean"]])));
  self.$new((new Map([["particle", "markup"], ["category", "identity"], ["type", "string"]])));
  self.$new((new Map([["particle", "bundle"], ["category", "identity"], ["type", "string"]])));
  self.$new((new Map([["particle", "data"], ["category", "identity"], ["type", "string"]])));
  $send(self, 'new', [(new Map([["particle", "category"], ["category", "identity"], ["type", "string"], ["store", false]]))], function $$2(category_names){var self = $$2.$$s == null ? this : $$2.$$s;

    
    if (category_names == null) category_names = nil;
    if (!$truthy(category_names['$instance_of?']($$('Array')))) {
      category_names = [category_names]
    };
    return $send(category_names, 'each', [], function $$3(category_name){var self = $$3.$$s == null ? this : $$3.$$s;
      if (self.category == null) self.category = nil;

      
      if (category_name == null) category_name = nil;
      return self.category['$<<'](category_name);}, {$$s: self, $$source_location: ['atome/genesis/particles/identity.rb', 21]});}, {$$s: self, $$source_location: ['atome/genesis/particles/identity.rb', 19]});
  self.$new((new Map([["particle", "selection"], ["category", "identity"], ["type", "string"]])));
  $send(self, 'new', [(new Map([["read", "selection"]]))], function $$4(params_get){var self = $$4.$$s == null ? this : $$4.$$s, selector = nil;

    
    if (params_get == null) params_get = nil;
    selector = self.$grab("selector");
    selector['$collect='](params_get);
    return selector;}, {$$s: self, $$source_location: ['atome/genesis/particles/identity.rb', 28]});
  $send(self, 'new', [(new Map([["particle", "selected"], ["category", "identity"], ["type", "boolean"]]))], function $$5(params){var $a, self = $$5.$$s == null ? this : $$5.$$s, default_style = nil, select_style = nil;
    if (self.selection_style == null) self.selection_style = nil;
    if (self.id == null) self.id = nil;

    
    if (params == null) params = nil;
    if ($eqeq(params, true)) {
      
      self.selection_style = [];
      default_style = $$('Universe').$default_selection_style();
      select_style = "";
      $send(default_style, 'each', [], function $$6(atome_f, part_f){var self = $$6.$$s == null ? this : $$6.$$s;

        
        if (atome_f == null) atome_f = nil;
        if (part_f == null) part_f = nil;
        return (select_style = self.$send(atome_f, part_f));}, {$$s: self, $$source_location: ['atome/genesis/particles/identity.rb', 39]});
      self.selection_style['$<<'](select_style.$id());
      self.$grab($$('Universe').$current_user()).$selection()['$<<'](self.id);
    } else if ($eqeq(params, false)) {
      
      ($a = self.selection_style, ($a === nil || $a == null) ? nil : $send($a, 'each', [], function $$7(style_f){var self = $$7.$$s == null ? this : $$7.$$s;

        
        if (style_f == null) style_f = nil;
        return self.$remove(style_f);}, {$$s: self, $$source_location: ['atome/genesis/particles/identity.rb', 45]}));
      self.selection_style = nil;
      self.$grab($$('Universe').$current_user()).$selection().$collect().$delete(self.id);
    } else {
      
      self.selection_style = [];
      $send(params, 'each', [], function $$8(part_f, val_f){var self = $$8.$$s == null ? this : $$8.$$s;
        if (self.selection_style == null) self.selection_style = nil;

        
        if (part_f == null) part_f = nil;
        if (val_f == null) val_f = nil;
        select_style = self.$send(part_f, val_f);
        return self.selection_style['$<<'](select_style.$id());}, {$$s: self, $$source_location: ['atome/genesis/particles/identity.rb', 52]});
      self.$grab($$('Universe').$current_user()).$selection()['$<<'](self.id);
    };
    return params;}, {$$s: self, $$source_location: ['atome/genesis/particles/identity.rb', 34]});
  self.$new((new Map([["particle", "format"], ["category", "identity"], ["type", "string"]])));
  self.$new((new Map([["particle", "alien"], ["category", "identity"], ["type", "string"]])));
  self.$new((new Map([["particle", "email"], ["category", "identity"], ["type", "string"]])));
  return self.$new((new Map([["particle", "cells"], ["category", "identity"], ["type", "string"]])));
};

Opal.modules["atome/genesis/particles/material"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $send = Opal.send, $truthy = Opal.truthy, $eqeq = Opal.eqeq, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('new,each,send,instance_of?,[],delete_at,data,map,keys,delete,color,paint,shadow,border,==,puts,fasten,grab,id,affect,classes,[]=,|,gsub,dup,apply,each_key,remove,set');
  
  self.$new((new Map([["particle", "component"], ["category", "material"], ["type", "string"]])));
  self.$new((new Map([["particle", "edit"], ["category", "material"], ["type", "boolean"]])));
  self.$new((new Map([["particle", "style"], ["category", "material"], ["type", "string"]])));
  $send(self, 'new', [(new Map([["pre", "style"]]))], function $$1(styles_send, _user_proc){var self = $$1.$$s == null ? this : $$1.$$s;

    
    if (styles_send == null) styles_send = nil;
    if (_user_proc == null) _user_proc = nil;
    return $send(styles_send, 'each', [], function $$2(particle_send, value){var self = $$2.$$s == null ? this : $$2.$$s;

      
      if (particle_send == null) particle_send = nil;
      if (value == null) value = nil;
      return self.$send(particle_send, value);}, {$$s: self, $$source_location: ['atome/genesis/particles/material.rb', 8]});}, {$$s: self, $$source_location: ['atome/genesis/particles/material.rb', 7]});
  self.$new((new Map([["particle", "hide"], ["category", "material"], ["type", "boolean"]])));
  $send(self, 'new', [(new Map([["particle", "remove"], ["category", "property"], ["type", "hash"]]))], function $$3(params){var self = $$3.$$s == null ? this : $$3.$$s, column = nil;

    
    if (params == null) params = nil;
    if ($truthy(params['$instance_of?']($$('Hash')))) {
      
      if ($truthy(params['$[]']("row"))) {
        self.$data().$delete_at(params['$[]']("row"))
      } else if ($truthy(params['$[]']("column"))) {
        
        column = params['$[]']("column");
        $send(self.$data(), 'map', [], function $$4(hash){
          
          if (hash == null) hash = nil;
          if ($truthy(hash.$keys()['$[]'](column))) {
            return hash.$delete(hash.$keys()['$[]'](column))
          } else {
            return nil
          };}, {$$source_location: ['atome/genesis/particles/material.rb', 21]});
      };
      return params;
    } else {
      return params
    };}, {$$s: self, $$source_location: ['atome/genesis/particles/material.rb', 14]});
  $send(self, 'new', [(new Map([["post", "remove"]]))], function $$5(params){var self = $$5.$$s == null ? this : $$5.$$s;

    
    if (params == null) params = nil;
    if ($truthy(params['$instance_of?']($$('Hash')))) {
      
      switch (params['$[]']("all").valueOf()) {
        case "color":
          $send(self.$color(), 'each', [], function $$6(atome_id_found){var self = $$6.$$s == null ? this : $$6.$$s;
            if (self.apply == null) self.apply = nil;

            
            if (atome_id_found == null) atome_id_found = nil;
            return self.apply.$delete(atome_id_found);}, {$$s: self, $$source_location: ['atome/genesis/particles/material.rb', 39]})
          break;
        case "paint":
          $send(self.$paint(), 'each', [], function $$7(atome_id_found){var self = $$7.$$s == null ? this : $$7.$$s;
            if (self.apply == null) self.apply = nil;

            
            if (atome_id_found == null) atome_id_found = nil;
            return self.apply.$delete(atome_id_found);}, {$$s: self, $$source_location: ['atome/genesis/particles/material.rb', 43]})
          break;
        case "shadow":
          $send(self.$shadow(), 'each', [], function $$8(atome_id_found){var self = $$8.$$s == null ? this : $$8.$$s;
            if (self.apply == null) self.apply = nil;

            
            if (atome_id_found == null) atome_id_found = nil;
            return self.apply.$delete(atome_id_found);}, {$$s: self, $$source_location: ['atome/genesis/particles/material.rb', 47]})
          break;
        case "border":
          $send(self.$border(), 'each', [], function $$9(atome_id_found){var self = $$9.$$s == null ? this : $$9.$$s;
            if (self.apply == null) self.apply = nil;

            
            if (atome_id_found == null) atome_id_found = nil;
            return self.apply.$delete(atome_id_found);}, {$$s: self, $$source_location: ['atome/genesis/particles/material.rb', 51]})
          break;
        default:
          $send(params, 'each', [], function $$10(particle, value){var self = $$10.$$s == null ? this : $$10.$$s;
            if (self.category == null) self.category = nil;

            
            if (particle == null) particle = nil;
            if (value == null) value = nil;
            
            switch (particle.valueOf()) {
              case "category":
                if ($eqeq(particle, "category")) {
                  return self.category.$delete(value)
                } else {
                  return nil
                }
                break;
              default:
                return self.$puts("write code to remove atome applied")
            };}, {$$s: self, $$source_location: ['atome/genesis/particles/material.rb', 55]})
      }
    } else {
      
      self.$grab(params).$fasten().$delete(self.$id());
      self.$grab(params).$affect().$delete(self.$id());
    };
    return params;}, {$$s: self, $$source_location: ['atome/genesis/particles/material.rb', 34]});
  $send(self, 'new', [(new Map([["particle", "classes"], ["category", "material"], ["type", "json"]]))], function $$11(value){var $a, self = $$11.$$s == null ? this : $$11.$$s, $logical_op_recvr_tmp_1 = nil, $ret_or_1 = nil, $binary_op_recvr_tmp_1 = nil;

    
    if (value == null) value = nil;
    
    $logical_op_recvr_tmp_1 = $$('Universe').$classes();
    if ($truthy(($ret_or_1 = $logical_op_recvr_tmp_1['$[]'](value)))) {
      $ret_or_1
    } else {
      $logical_op_recvr_tmp_1['$[]='](value, [])
    };;
    
    $binary_op_recvr_tmp_1 = $$('Universe').$classes();
    return ($a = [value, $binary_op_recvr_tmp_1['$[]'](value)['$|']([self.$id()])], $send($binary_op_recvr_tmp_1, '[]=', $a), $a[$a.length - 1]);;}, {$$s: self, $$source_location: ['atome/genesis/particles/material.rb', 73]});
  $send(self, 'new', [(new Map([["particle", "remove_classes"], ["category", "material"], ["type", "boolean"]]))], function $$12(value){var self = $$12.$$s == null ? this : $$12.$$s;

    
    if (value == null) value = nil;
    return $$('Universe').$classes()['$[]'](value).$delete(self.$id());}, {$$s: self, $$source_location: ['atome/genesis/particles/material.rb', 77]});
  self.$new((new Map([["particle", "definition"], ["category", "material"], ["type", "string"]])));
  $send(self, 'new', [(new Map([["sanitizer", "definition"]]))], function $$13(params){
    
    if (params == null) params = nil;
    params = params.$gsub(/<svg[^>]*>|<\/svg>/, "");
    return params;}, {$$source_location: ['atome/genesis/particles/material.rb', 84]});
  self.$new((new Map([["particle", "gradient"], ["category", "material"], ["type", "int"]])));
  self.$new((new Map([["particle", "thickness"], ["category", "material"], ["type", "int"]])));
  $send(self, 'new', [(new Map([["after", "thickness"]]))], function $$14(params){var self = $$14.$$s == null ? this : $$14.$$s, a = nil;

    
    if (params == null) params = nil;
    a = self.$affect().$dup();
    $send(a, 'each', [], function $$15(atome_to_refresh){var self = $$15.$$s == null ? this : $$15.$$s;

      
      if (atome_to_refresh == null) atome_to_refresh = nil;
      return self.$grab(atome_to_refresh).$apply(self.$id());}, {$$s: self, $$source_location: ['atome/genesis/particles/material.rb', 95]});
    return params;}, {$$s: self, $$source_location: ['atome/genesis/particles/material.rb', 93]});
  self.$new((new Map([["particle", "pattern"], ["category", "material"], ["type", "string"]])));
  $send(self, 'new', [(new Map([["after", "pattern"]]))], function $$16(params){var self = $$16.$$s == null ? this : $$16.$$s, a = nil;

    
    if (params == null) params = nil;
    a = self.$affect().$dup();
    $send(a, 'each', [], function $$17(atome_to_refresh){var self = $$17.$$s == null ? this : $$17.$$s;

      
      if (atome_to_refresh == null) atome_to_refresh = nil;
      return self.$grab(atome_to_refresh).$apply(self.$id());}, {$$s: self, $$source_location: ['atome/genesis/particles/material.rb', 103]});
    return params;}, {$$s: self, $$source_location: ['atome/genesis/particles/material.rb', 101]});
  self.$new((new Map([["particle", "fill"], ["category", "material"], ["type", "array"]])));
  self.$new((new Map([["particle", "opacity"], ["category", "material"], ["type", "int"]])));
  return $send(self, 'new', [(new Map([["particle", "exchange"], ["category", "material"], ["type", "array"]]))], function $$18(params){var bloc = $$18.$$p || nil, self = $$18.$$s == null ? this : $$18.$$s;

    $$18.$$p = null;
    
    ;
    if (params == null) params = nil;
    return $send(params, 'each_key', [], function $$20(part_f){var self = $$20.$$s == null ? this : $$20.$$s, part_to_remove = nil;

      
      if (part_f == null) part_f = nil;
      part_to_remove = self.$send(part_f);
      if ($truthy(part_to_remove['$instance_of?']($$('Array')))) {
        $send(part_to_remove, 'each', [], function $$21(part_to_r){var self = $$21.$$s == null ? this : $$21.$$s;

          
          if (part_to_r == null) part_to_r = nil;
          return self.$remove(part_to_r);}, {$$s: self, $$source_location: ['atome/genesis/particles/material.rb', 116]})
      };
      return self.$set(params);}, {$$s: self, $$source_location: ['atome/genesis/particles/material.rb', 113]});}, {$$s: self, $$source_location: ['atome/genesis/particles/material.rb', 112]});
};

Opal.modules["atome/genesis/particles/property"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $truthy = Opal.truthy, $def = Opal.def, $send = Opal.send, $thrower = Opal.thrower, $rb_minus = Opal.rb_minus, $eqeq = Opal.eqeq, $t_$17 = $thrower('return'), self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('match,to_i,[],to_f,new,dup,affect,each,apply,grab,id,[]=,data,keys,insert,nil?,puts,sort_by!,values,-,instance_of?,to_s,is_a?,respond_to?,render,to_proc,behavior,instance_exec,delete,role,<<,==,last,color,wait');
  
  
  $def(self, '$extract_rgb_alpha', function $$extract_rgb_alpha(color_string) {
    var match_data = nil, red = nil, green = nil, blue = nil, alpha = nil;

    
    match_data = color_string.$match(/rgba?\((\d+),\s*(\d+),\s*(\d+)(?:,\s*(\d+(?:\.\d+)?))?\)/);
    red = match_data['$[]'](1).$to_i();
    green = match_data['$[]'](2).$to_i();
    blue = match_data['$[]'](3).$to_i();
    alpha = ($truthy(match_data['$[]'](4)) ? (match_data['$[]'](4).$to_f()) : (nil));
    return (new Map([["red", red], ["green", green], ["blue", blue], ["alpha", alpha]]));
  }, {$$source_location: ['atome/genesis/particles/property.rb', 3]});
  $send(self, 'new', [(new Map([["particle", "red"], ["category", "property"], ["type", "string"]]))], function $$1(){var self = $$1.$$s == null ? this : $$1.$$s;

    return self}, {$$s: self, $$source_location: ['atome/genesis/particles/property.rb', 13]});
  $send(self, 'new', [(new Map([["after", "red"]]))], function $$2(params){var self = $$2.$$s == null ? this : $$2.$$s, a = nil;

    
    if (params == null) params = nil;
    a = self.$affect().$dup();
    if ($truthy(a)) {
      $send(a, 'each', [], function $$3(atome_to_refresh){var self = $$3.$$s == null ? this : $$3.$$s;

        
        if (atome_to_refresh == null) atome_to_refresh = nil;
        return self.$grab(atome_to_refresh).$apply(self.$id());}, {$$s: self, $$source_location: ['atome/genesis/particles/property.rb', 21]})
    };
    return params;}, {$$s: self, $$source_location: ['atome/genesis/particles/property.rb', 19]});
  $send(self, 'new', [(new Map([["particle", "green"], ["category", "property"], ["type", "string"]]))], function $$4(){var self = $$4.$$s == null ? this : $$4.$$s;

    return self}, {$$s: self, $$source_location: ['atome/genesis/particles/property.rb', 27]});
  $send(self, 'new', [(new Map([["after", "green"]]))], function $$5(params){var self = $$5.$$s == null ? this : $$5.$$s, a = nil;

    
    if (params == null) params = nil;
    a = self.$affect().$dup();
    if ($truthy(a)) {
      $send(a, 'each', [], function $$6(atome_to_refresh){var self = $$6.$$s == null ? this : $$6.$$s;

        
        if (atome_to_refresh == null) atome_to_refresh = nil;
        return self.$grab(atome_to_refresh).$apply(self.$id());}, {$$s: self, $$source_location: ['atome/genesis/particles/property.rb', 35]})
    };
    return params;}, {$$s: self, $$source_location: ['atome/genesis/particles/property.rb', 33]});
  $send(self, 'new', [(new Map([["particle", "blue"], ["category", "property"], ["type", "string"]]))], function $$7(){var self = $$7.$$s == null ? this : $$7.$$s;

    return self}, {$$s: self, $$source_location: ['atome/genesis/particles/property.rb', 41]});
  $send(self, 'new', [(new Map([["after", "blue"]]))], function $$8(params){var self = $$8.$$s == null ? this : $$8.$$s, a = nil;

    
    if (params == null) params = nil;
    a = self.$affect().$dup();
    if ($truthy(a)) {
      $send(a, 'each', [], function $$9(atome_to_refresh){var self = $$9.$$s == null ? this : $$9.$$s;

        
        if (atome_to_refresh == null) atome_to_refresh = nil;
        return self.$grab(atome_to_refresh).$apply(self.$id());}, {$$s: self, $$source_location: ['atome/genesis/particles/property.rb', 49]})
    };
    return params;}, {$$s: self, $$source_location: ['atome/genesis/particles/property.rb', 47]});
  $send(self, 'new', [(new Map([["particle", "alpha"], ["category", "property"], ["type", "string"]]))], function $$10(){var self = $$10.$$s == null ? this : $$10.$$s;

    return self}, {$$s: self, $$source_location: ['atome/genesis/particles/property.rb', 54]});
  $send(self, 'new', [(new Map([["after", "alpha"]]))], function $$11(params){var self = $$11.$$s == null ? this : $$11.$$s, a = nil;

    
    if (params == null) params = nil;
    a = self.$affect().$dup();
    if ($truthy(a)) {
      $send(a, 'each', [], function $$12(atome_to_refresh){var self = $$12.$$s == null ? this : $$12.$$s;

        
        if (atome_to_refresh == null) atome_to_refresh = nil;
        return self.$grab(atome_to_refresh).$apply(self.$id());}, {$$s: self, $$source_location: ['atome/genesis/particles/property.rb', 61]})
    };
    return params;}, {$$s: self, $$source_location: ['atome/genesis/particles/property.rb', 59]});
  $send(self, 'new', [(new Map([["particle", "diffusion"], ["category", "property"], ["type", "string"]]))], function $$13(){var self = $$13.$$s == null ? this : $$13.$$s;

    return self}, {$$s: self, $$source_location: ['atome/genesis/particles/property.rb', 66]});
  $send(self, 'new', [(new Map([["particle", "clean"], ["category", "property"], ["type", "boolean"]]))], function $$14(params){var self = $$14.$$s == null ? this : $$14.$$s, cell = nil, row_nb = nil, column_nb = nil;

    
    if (params == null) params = nil;
    cell = params['$[]']("cell");
    row_nb = cell['$[]'](0);
    column_nb = cell['$[]'](1);
    self.$data()['$[]'](row_nb)['$[]='](self.$data()['$[]'](row_nb).$keys()['$[]'](column_nb), "");
    return params;}, {$$s: self, $$source_location: ['atome/genesis/particles/property.rb', 71]});
  $send(self, 'new', [(new Map([["particle", "insert"], ["category", "property"], ["type", "string"]]))], function $$15(params){var self = $$15.$$s == null ? this : $$15.$$s, content = nil, cell = nil, row_nb = nil, column_nb = nil, position_to_insert = nil;

    
    if (params == null) params = nil;
    if ($truthy(params['$[]']("cell"))) {
      
      content = params['$[]']("content");
      cell = params['$[]']("cell");
      row_nb = cell['$[]'](0);
      column_nb = cell['$[]'](1);
      self.$data()['$[]'](row_nb)['$[]='](self.$data()['$[]'](row_nb).$keys()['$[]'](column_nb), content);
    } else if ($truthy(params['$[]']("row"))) {
      
      position_to_insert = params['$[]']("row");
      self.$data().$insert(position_to_insert, (new Map()));
    } else if ($truthy(params['$[]']("column"))) {
    };
    return params;}, {$$s: self, $$source_location: ['atome/genesis/particles/property.rb', 79]});
  $send(self, 'new', [(new Map([["particle", "sort"], ["category", "property"], ["type", "int"]]))], function $$16(params){var self = $$16.$$s == null ? this : $$16.$$s, column = nil, method = nil;
    if (self.data == null) self.data = nil;

    
    if (params == null) params = nil;
    column = params['$[]']("column");
    method = params['$[]']("method");
    if (($truthy(column['$nil?']()) || ($truthy(method['$nil?']())))) {
      
      self.$puts("Column and method parameters are required.");
      $t_$17.$throw(nil, $$16.$$is_lambda);
    };
    $send(self.data, 'sort_by!', [], function $$18(row){var value = nil;

      
      if (row == null) row = nil;
      value = row.$values()['$[]']($rb_minus(column, 1));
      if ($truthy(value['$instance_of?']($$('Atome')))) {
        return 0
      } else 
      switch (method.valueOf()) {
        case "alphabetic":
          return value.$to_s()
        case "numeric":
          if ($truthy(value['$is_a?']($$('Numeric')))) {
            return value
          } else if ($truthy(value['$respond_to?']("to_i"))) {
            return value.$to_i()
          } else {
            return 0
          }
          break;
        default:
          return value
      };}, {$$source_location: ['atome/genesis/particles/property.rb', 106]});
    return params;}, {$$s: self, $$ret: $t_$17, $$source_location: ['atome/genesis/particles/property.rb', 97]});
  self.$new((new Map([["particle", "inside"], ["render", false], ["category", "property"], ["type", "string"]])));
  $send(self, 'new', [(new Map([["initialized", "inside"]]))], function $$19(params){var user_proc = $$19.$$p || nil, self = $$19.$$s == null ? this : $$19.$$s;

    $$19.$$p = null;
    
    ;
    if (params == null) params = nil;
    return $send(self, 'render', ["inside", params], user_proc.$to_proc());}, {$$s: self, $$source_location: ['atome/genesis/particles/property.rb', 132]});
  self.$new((new Map([["particle", "margin"], ["category", "property"], ["type", "int"]])));
  $send(self, 'new', [(new Map([["particle", "value"], ["category", "property"], ["type", "string"]]))], function $$21(val){var self = $$21.$$s == null ? this : $$21.$$s, pro_f = nil;

    
    if (val == null) val = nil;
    pro_f = self.$behavior()['$[]']("value");
    if ($truthy(pro_f['$is_a?']($$('Proc')))) {
      $send(self, 'instance_exec', [val], pro_f.$to_proc())
    };
    return val;}, {$$s: self, $$source_location: ['atome/genesis/particles/property.rb', 137]});
  self.$new((new Map([["particle", "behavior"], ["type", "symbol"], ["category", "property"]])));
  self.$new((new Map([["particle", "orientation"], ["type", "symbol"], ["category", "property"]])));
  self.$new((new Map([["particle", "align"], ["type", "symbol"], ["category", "property"]])));
  self.$new((new Map([["particle", "context"], ["category", "property"], ["type", "string"]])));
  $send(self, 'new', [(new Map([["particle", "actor"], ["store", false], ["category", "property"], ["type", "string"]]))], function $$22(params){var self = $$22.$$s == null ? this : $$22.$$s, $ret_or_1 = nil;
    if (self.actor == null) self.actor = nil;

    
    if (params == null) params = nil;
    self.actor = ($truthy(($ret_or_1 = self.actor)) ? ($ret_or_1) : ((new Map())));
    if ($truthy(params['$[]']("remove"))) {
      return $send(params['$[]']("remove"), 'each', [], function $$23(atome_id, role){var self = $$23.$$s == null ? this : $$23.$$s;
        if (self.actor == null) self.actor = nil;

        
        if (atome_id == null) atome_id = nil;
        if (role == null) role = nil;
        return self.actor['$[]'](role).$delete(atome_id);}, {$$s: self, $$source_location: ['atome/genesis/particles/property.rb', 154]})
    } else {
      return $send(params, 'each', [], function $$24(atome_id, role){var self = $$24.$$s == null ? this : $$24.$$s;
        if (self.actor == null) self.actor = nil;

        
        if (atome_id == null) atome_id = nil;
        if (role == null) role = nil;
        self.$grab(atome_id).$role(role);
        if ($truthy(($ret_or_1 = self.actor['$[]'](role)))) {
          $ret_or_1
        } else {
          self.actor['$[]='](role, [])
        };
        return self.actor['$[]'](role)['$<<'](atome_id);}, {$$s: self, $$source_location: ['atome/genesis/particles/property.rb', 158]})
    };}, {$$s: self, $$source_location: ['atome/genesis/particles/property.rb', 151]});
  $send(self, 'new', [(new Map([["particle", "role"], ["store", false], ["category", "property"], ["type", "string"]]))], function $$25(params){var self = $$25.$$s == null ? this : $$25.$$s, $ret_or_1 = nil;
    if (self.role == null) self.role = nil;

    
    if (params == null) params = nil;
    if ($truthy(params['$instance_of?']($$('Hash')))) {
      if ($eqeq(params.$keys()['$[]'](0), "remove")) {
        return self.role.$delete(params.$values()['$[]'](0))
      } else {
        return nil
      }
    } else {
      
      self.role = ($truthy(($ret_or_1 = self.role)) ? ($ret_or_1) : ([]));
      return self.role['$<<'](params);
    };}, {$$s: self, $$source_location: ['atome/genesis/particles/property.rb', 166]});
  return $send(self, 'new', [(new Map([["particle", "blink"], ["category", "property"], ["type", "symbol"]]))], function $$26(params){var self = $$26.$$s == null ? this : $$26.$$s;
    if (self.new_color == null) self.new_color = nil;

    
    if (params == null) params = nil;
    self.prev_color = self.$color().$last();
    self.new_color = params;
    self.$color(self.new_color);
    return $send(self, 'wait', [0.1], function $$27(){var self = $$27.$$s == null ? this : $$27.$$s;
      if (self.prev_color == null) self.prev_color = nil;

      return self.$apply(self.prev_color)}, {$$s: self, $$source_location: ['atome/genesis/particles/property.rb', 180]});}, {$$s: self, $$source_location: ['atome/genesis/particles/property.rb', 176]});
};

Opal.modules["atome/genesis/particles/security"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $send = Opal.send, $truthy = Opal.truthy, $eqeq = Opal.eqeq, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('new,instance_of?,[]=,encode,[],each,password,==,type,set_password');
  
  self.$new((new Map([["particle", "password"], ["category", "security"], ["type", "string"]])));
  $send(self, 'new', [(new Map([["sanitizer", "password"]]))], function $$1(params){var $a, $b, self = $$1.$$s == null ? this : $$1.$$s;

    
    if (params == null) params = nil;
    if (!$truthy(params['$instance_of?']($$('Hash')))) {
      params = (new Map([["read", params], ["write", params]]))
    };
    params['$[]=']("global", $$('Black_matter').$encode(params['$[]']("global")));
    ($a = params['$[]']("read"), ($a === nil || $a == null) ? nil : $send($a, 'each', [], function $$2(k, v){var $b;

      
      if (k == null) k = nil;
      if (v == null) v = nil;
      return ($b = [k, $$('Black_matter').$encode(v)], $send(params['$[]']("read"), '[]=', $b), $b[$b.length - 1]);}, {$$source_location: ['atome/genesis/particles/security.rb', 11]}));
    ($b = params['$[]']("write"), ($b === nil || $b == null) ? nil : $send($b, 'each', [], function $$3(k, v){var $c;

      
      if (k == null) k = nil;
      if (v == null) v = nil;
      return ($c = [k, $$('Black_matter').$encode(v)], $send(params['$[]']("write"), '[]=', $c), $c[$c.length - 1]);}, {$$source_location: ['atome/genesis/particles/security.rb', 14]}));
    if (!$truthy(params['$[]']("read"))) {
      params['$[]=']("read", $$('Black_matter').$password())
    };
    if (!$truthy(params['$[]']("write"))) {
      params['$[]=']("write", $$('Black_matter').$password())
    };
    if ($eqeq(self.$type(), "human")) {
      $$('Black_matter').$set_password(params)
    };
    return params;}, {$$s: self, $$source_location: ['atome/genesis/particles/security.rb', 4]});
  return $send(self, 'new', [(new Map([["read", "password"]]))], function $$4(params){
    
    if (params == null) params = nil;
    return params;}, {$$source_location: ['atome/genesis/particles/security.rb', 28]});
};

Opal.modules["atome/genesis/particles/spatial"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $send = Opal.send, $truthy = Opal.truthy, $eqeqeq = Opal.eqeqeq, $eqeq = Opal.eqeq, $rb_plus = Opal.rb_plus, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('new,is_a?,call,===,==,delete,type,collect,[],each,grab,backup,send,remove_layout,box,id,[]=,remove,category,display,attach,+,render');
  
  self.$new((new Map([["particle", "left"], ["category", "spatial"], ["type", "int"]])));
  self.$new((new Map([["particle", "right"], ["category", "spatial"], ["type", "int"]])));
  self.$new((new Map([["particle", "top"], ["category", "spatial"], ["type", "int"]])));
  self.$new((new Map([["particle", "bottom"], ["category", "spatial"], ["type", "int"]])));
  $send(self, 'new', [(new Map([["particle", "rotate"], ["category", "spacial"], ["type", "integer"]]))], function $$1(params, proc){
    
    if (params == null) params = nil;
    if (proc == null) proc = nil;
    if ($truthy(proc['$is_a?']($$('Proc')))) {
      return proc.$call(params)
    } else {
      return nil
    };}, {$$source_location: ['atome/genesis/particles/spatial.rb', 7]});
  self.$new((new Map([["particle", "direction"], ["category", "spatial"], ["type", "string"]])));
  self.$new((new Map([["particle", "depth"], ["category", "spatial"], ["type", "integer"]])));
  self.$new((new Map([["particle", "position"], ["category", "spatial"], ["type", "int"]])));
  self.$new((new Map([["particle", "organise"], ["category", "spatial"], ["type", "string"]])));
  self.$new((new Map([["particle", "spacing"], ["category", "spatial"], ["type", "string"]])));
  $send(self, 'new', [(new Map([["particle", "display"], ["category", "spatial"], ["type", "boolean"]]))], function $$2(params){var $ret_or_1 = nil;

    
    if (params == null) params = nil;
    params = ($eqeqeq(true, ($ret_or_1 = params)) ? ("block") : ($eqeqeq(false, $ret_or_1) ? ("none") : (params)));
    if ($eqeq(params, false)) {
      params = "none"
    };
    return params;}, {$$source_location: ['atome/genesis/particles/spatial.rb', 15]});
  $send(self, 'new', [(new Map([["particle", "layout"], ["category", "spatial"], ["type", "int"]]))], function $$3(params){var self = $$3.$$s == null ? this : $$3.$$s, mode_found = nil, $ret_or_1 = nil, elements_style = nil, atomes_to_organise = nil, container_name = nil, container = nil, container_class = nil, id_found = nil;

    
    if (params == null) params = nil;
    mode_found = ($truthy(($ret_or_1 = params.$delete("mode"))) ? ($ret_or_1) : ("list"));
    elements_style = ($truthy(($ret_or_1 = params.$delete("element"))) ? ($ret_or_1) : ((new Map())));
    atomes_to_organise = [];
    if ($eqeq(self.$type(), "group")) {
      atomes_to_organise = self.$collect()
    };
    if ($truthy(params['$[]']("listing"))) {
      atomes_to_organise = params['$[]']("listing")
    };
    if ($eqeq(mode_found, "default")) {
      $send(atomes_to_organise, 'each', [], function $$4(atome_id_to_organise){var self = $$4.$$s == null ? this : $$4.$$s, atome_found = nil;

        
        if (atome_id_to_organise == null) atome_id_to_organise = nil;
        atome_found = self.$grab(atome_id_to_organise);
        if (!$truthy(atome_found.$backup())) {
          return nil
        };
        $send(atome_found.$backup(), 'each', [], function $$5(particle, value){
          
          if (particle == null) particle = nil;
          if (value == null) value = nil;
          atome_found.$send("delete", particle);
          return atome_found.$send(particle, value);}, {$$source_location: ['atome/genesis/particles/spatial.rb', 44]});
        return atome_found.$remove_layout();}, {$$s: self, $$source_location: ['atome/genesis/particles/spatial.rb', 39]})
    } else {
      
      if ($truthy(params['$[]']("id"))) {
        
        container_name = params['$[]']("id");
        container = self.$grab("view").$box((new Map([["id", container_name]])));
        container_class = container_name;
      } else {
        
        container = self.$grab("view").$box();
        id_found = container.$id();
        params['$[]=']("id", id_found);
        container_class = id_found;
      };
      container.$remove((new Map([["category", "atome"]])));
      container.$category("matrix");
      if ($eqeq(mode_found, "list")) {
        params['$[]=']("organise", "1fr")
      };
      $send(params, 'each', [], function $$6(particle, value){
        
        if (particle == null) particle = nil;
        if (value == null) value = nil;
        return container.$send(particle, value);}, {$$source_location: ['atome/genesis/particles/spatial.rb', 65]});
      $send(atomes_to_organise, 'each', [], function $$7(atome_id_to_organise){var $a, self = $$7.$$s == null ? this : $$7.$$s, atome_found = nil;

        
        if (atome_id_to_organise == null) atome_id_to_organise = nil;
        atome_found = self.$grab(atome_id_to_organise);
        ($a = atome_found.$backup(), ($a === nil || $a == null) ? nil : $send($a, 'each', [], function $$8(particle, value){
          
          if (particle == null) particle = nil;
          if (value == null) value = nil;
          atome_found.$send("delete", particle);
          return atome_found.$send(particle, value);}, {$$source_location: ['atome/genesis/particles/spatial.rb', 73]}));
        atome_found.$remove_layout();
        atome_found.$display()['$[]=']("mode", mode_found);
        atome_found.$display()['$[]=']("layout", id_found);
        atome_found.$attach(container_class);
        atome_found.$remove((new Map([["category", "atome"]])));
        atome_found.$category(container_class);
        return $send(elements_style, 'each', [], function $$9(particle, value){var particle_to_save = nil;

          
          if (particle == null) particle = nil;
          if (value == null) value = nil;
          if (!$truthy(atome_found.$backup())) {
            atome_found.$backup((new Map()))
          };
          if (!$truthy(atome_found.$backup()['$[]'](particle))) {
            
            particle_to_save = ($truthy(($ret_or_1 = atome_found.$send(particle))) ? ($ret_or_1) : (0));
            atome_found.$backup()['$[]='](particle, particle_to_save);
          };
          return atome_found.$send(particle, value);}, {$$source_location: ['atome/genesis/particles/spatial.rb', 87]});}, {$$s: self, $$source_location: ['atome/genesis/particles/spatial.rb', 69]});
    };
    return params;}, {$$s: self, $$source_location: ['atome/genesis/particles/spatial.rb', 29]});
  $send(self, 'new', [(new Map([["particle", "center"], ["category", "spatial"], ["type", "hash"]]))], function $$10(params){
    
    if (params == null) params = nil;
    if ($eqeq(params, true)) {
      params = (new Map([["x", 0], ["y", 0], ["dynamic", true]]))
    };
    return params;}, {$$source_location: ['atome/genesis/particles/spatial.rb', 101]});
  $send(self, 'new', [(new Map([["particle", "increment"], ["category", "spatial"], ["type", "hash"]]))], function $$11(params){var self = $$11.$$s == null ? this : $$11.$$s;

    
    if (params == null) params = nil;
    return $send(params, 'each', [], function $$12(particle, value){var self = $$12.$$s == null ? this : $$12.$$s, prev_value = nil;

      
      if (particle == null) particle = nil;
      if (value == null) value = nil;
      prev_value = self.$send(particle);
      return self.$send(particle, $rb_plus(value, prev_value));}, {$$s: self, $$source_location: ['atome/genesis/particles/spatial.rb', 106]});}, {$$s: self, $$source_location: ['atome/genesis/particles/spatial.rb', 105]});
  $send(self, 'new', [(new Map([["particle", "longitude"], ["category", "spatial"], ["type", "int"]]))], function $$13(params, _user_proc){var self = $$13.$$s == null ? this : $$13.$$s;

    
    if (params == null) params = nil;
    if (_user_proc == null) _user_proc = nil;
    self.$render("map", (new Map([["longitude", params]])));
    return params;}, {$$s: self, $$source_location: ['atome/genesis/particles/spatial.rb', 112]});
  $send(self, 'new', [(new Map([["particle", "latitude"], ["category", "spatial"], ["type", "int"]]))], function $$14(params, _user_proc){var self = $$14.$$s == null ? this : $$14.$$s;

    
    if (params == null) params = nil;
    if (_user_proc == null) _user_proc = nil;
    self.$render("map", (new Map([["latitude", params]])));
    return params;}, {$$s: self, $$source_location: ['atome/genesis/particles/spatial.rb', 117]});
  $send(self, 'new', [(new Map([["particle", "location"], ["category", "spatial"], ["type", "hash"]]))], function $$15(params, _user_proc){var self = $$15.$$s == null ? this : $$15.$$s;

    
    if (params == null) params = nil;
    if (_user_proc == null) _user_proc = nil;
    self.$render("map", params);
    return params;}, {$$s: self, $$source_location: ['atome/genesis/particles/spatial.rb', 122]});
  $send(self, 'new', [(new Map([["particle", "zoom"], ["specific", "map"], ["category", "spatial"], ["type", "int"]]))], function $$16(params, _user_proc){var self = $$16.$$s == null ? this : $$16.$$s;

    
    if (params == null) params = nil;
    if (_user_proc == null) _user_proc = nil;
    self.$render("map_zoom", params);
    return params;}, {$$s: self, $$source_location: ['atome/genesis/particles/spatial.rb', 127]});
  return $send(self, 'new', [(new Map([["particle", "pan"], ["specific", "map"], ["category", "spatial"], ["type", "int"]]))], function $$17(params, _user_proc){var self = $$17.$$s == null ? this : $$17.$$s;

    
    if (params == null) params = nil;
    if (_user_proc == null) _user_proc = nil;
    self.$render("map_pan", params);
    return params;}, {$$s: self, $$source_location: ['atome/genesis/particles/spatial.rb', 132]});
};

Opal.modules["atome/genesis/particles/time"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('new');
  return self.$new((new Map([["particle", "markers"], ["category", "time"], ["type", "hash"]])))
};

Opal.modules["atome/genesis/particles/utility"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $truthy = Opal.truthy, $send = Opal.send, $def = Opal.def, $eqeq = Opal.eqeq, $return_val = Opal.return_val, $hash_rehash = Opal.hash_rehash, $rb_minus = Opal.rb_minus, $rb_plus = Opal.rb_plus, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('[],tag,grab,touch,attach,dup,fasten,delete,instance_variable_set,each,delete_recursive,render,aid,new,[]=,is_a?,instance_exec,to_proc,instance_of?,send,==,cells,group,to_sym,apply,refresh,unfasten,id,delete_with_callback,atome,include?,atome_list,puts,<<,delete_children_recursively,to_s,split,union,renderer_list,new_default_params,default_params,set_current_user,length,duplicate,infos,merge,keys,-,collect,last,to_i,each_with_index,data,js,+,timer,js_timer');
  
  
  $def(self, '$delete_recursive', function $$delete_recursive(atome_id, force) {
    var self = this, parent_id_found = nil, parent_found = nil, new_array = nil;

    
    if (force == null) force = false;
    if (!$truthy(force)) {
      if (($truthy(self.$grab(atome_id).$tag()) && (($truthy(self.$grab(atome_id).$tag()['$[]']("persistent")) || ($truthy(self.$grab(atome_id).$tag()['$[]']("system"))))))) {
        return nil
      }
    };
    self.$touch(false);
    parent_id_found = self.$grab(atome_id).$attach();
    parent_found = self.$grab(parent_id_found);
    new_array = parent_found.$fasten().$dup();
    new_array.$delete(atome_id);
    parent_found.$instance_variable_set("@fasten", new_array);
    $send(self.$grab(atome_id).$fasten(), 'each', [], function $$1(atome_id_found){var self = $$1.$$s == null ? this : $$1.$$s;

      
      if (atome_id_found == null) atome_id_found = nil;
      return self.$delete_recursive(atome_id_found, force);}, {$$s: self, $$source_location: ['atome/genesis/particles/utility.rb', 10]});
    self.$grab(atome_id).$render("delete", (new Map([["recursive", true]])));
    self.$grab(atome_id).$touch(false);
    return $$('Universe').$delete(self.$grab(atome_id).$aid());
  }, {$$arity: -2, $$source_location: ['atome/genesis/particles/utility.rb', 2]});
  self.$new((new Map([["particle", "renderers"], ["category", "utility"], ["type", "string"]])));
  $send(self, 'new', [(new Map([["particle", "code"], ["category", "utility"], ["type", "string"], ["store", false]]))], function $$2(params, code){var $a, self = $$2.$$s == null ? this : $$2.$$s;
    if (self.code == null) self.code = nil;

    
    if (params == null) params = nil;
    if (code == null) code = nil;
    return ($a = [params, code], $send(self.code, '[]=', $a), $a[$a.length - 1]);}, {$$s: self, $$source_location: ['atome/genesis/particles/utility.rb', 19]});
  $send(self, 'new', [(new Map([["particle", "run"], ["category", "utility"], ["type", "boolean"]]))], function $$3(params, code){var self = $$3.$$s == null ? this : $$3.$$s, code_found = nil;
    if (self.code == null) self.code = nil;

    
    if (params == null) params = nil;
    if (code == null) code = nil;
    if ($truthy(params['$is_a?']($$('Proc')))) {
      $send(self, 'instance_exec', [], params.$to_proc())
    };
    code_found = self.code['$[]'](params);
    if ($truthy(code_found['$is_a?']($$('Proc')))) {
      return $send(self, 'instance_exec', [params], code_found.$to_proc())
    } else {
      return nil
    };}, {$$s: self, $$source_location: ['atome/genesis/particles/utility.rb', 22]});
  $send(self, 'new', [(new Map([["particle", "target"], ["category", "utility"], ["type", "string"]]))], function $$4(params){var self = $$4.$$s == null ? this : $$4.$$s;

    
    if (params == null) params = nil;
    return $send(params, 'each', [], function $$5(atome_f, value_f){var self = $$5.$$s == null ? this : $$5.$$s;

      
      if (atome_f == null) atome_f = nil;
      if (value_f == null) value_f = nil;
      if ($truthy(value_f['$instance_of?']($$('Hash')))) {
        return $send(value_f, 'each', [], function $$6(part_f, part_val){var self = $$6.$$s == null ? this : $$6.$$s;

          
          if (part_f == null) part_f = nil;
          if (part_val == null) part_val = nil;
          return self.$grab(atome_f).$send(part_f, part_val);}, {$$s: self, $$source_location: ['atome/genesis/particles/utility.rb', 30]})
      } else {
        return self.$grab(atome_f).$send(value_f)
      };}, {$$s: self, $$source_location: ['atome/genesis/particles/utility.rb', 28]});}, {$$s: self, $$source_location: ['atome/genesis/particles/utility.rb', 27]});
  $send(self, 'new', [(new Map([["particle", "delete"], ["category", "utility"], ["type", "boolean"], ["render", false]]))], function $$7(params){var $a, self = $$7.$$s == null ? this : $$7.$$s, id_found = nil, parent_found = nil;
    if (self.tag == null) self.tag = nil;
    if (self.id == null) self.id = nil;
    if (self.attach == null) self.attach = nil;
    if (self.affect == null) self.affect = nil;

    
    if (params == null) params = nil;
    if ($eqeq(params, true)) {
      
      self.$touch(false);
      if (($truthy(self.tag) && (($truthy(self.tag['$[]']("persistent")) || ($truthy(self.tag['$[]']("system"))))))) {
        return nil
      } else {
        
        self.$cells().$delete(true);
        self.$group().$delete(true);
        self.$render("delete", params);
        id_found = self.id.$to_sym();
        if ($truthy(self.attach)) {
          
          parent_found = self.$grab(self.attach);
          parent_found.$fasten().$delete(id_found);
        };
        ($a = self.affect, ($a === nil || $a == null) ? nil : $send($a, 'each', [], function $$8(affected_atome){var self = $$8.$$s == null ? this : $$8.$$s, affected_found = nil;

          
          if (affected_atome == null) affected_atome = nil;
          affected_found = self.$grab(affected_atome);
          affected_found.$apply().$delete(id_found);
          return affected_found.$refresh();}, {$$s: self, $$source_location: ['atome/genesis/particles/utility.rb', 129]}));
        self.$grab(self.$attach()).$unfasten([self.$id()]);
        return self.$delete_with_callback();
      };
    } else if ($eqeq(params, false)) {
      
      self.$cells().$delete(true);
      self.$render("delete", params);
      return self.$delete_with_callback();
    } else if ($truthy(params['$instance_of?']($$('Hash')))) {
      
      self.$cells().$delete(true);
      self.$group().$delete(true);
      self.$touch(false);
      if ($eqeq(params['$[]']("recursive"), true)) {
        
        self.$grab(self.$attach()).$unfasten([self.$id()]);
        if (!($truthy(self.$grab(self.id).$tag()) && (($truthy(self.$grab(self.id).$tag()['$[]']("persistent")) || ($truthy(self.$grab(self.id).$tag()['$[]']("system"))))))) {
          
          $send(self.$fasten(), 'each', [], function $$9(atttached_atomes){var self = $$9.$$s == null ? this : $$9.$$s;

            
            if (atttached_atomes == null) atttached_atomes = nil;
            return self.$delete_recursive(atttached_atomes);}, {$$s: self, $$source_location: ['atome/genesis/particles/utility.rb', 148]});
          $send(self, 'delete_with_callback', [], $return_val(nil), {$$source_location: ['atome/genesis/particles/utility.rb', 151]});
        };
        return self.$render("delete", params);
      } else if ($truthy(params['$[]']("force"))) {
        
        $send(self.$fasten(), 'each', [], function $$10(atttached_atomes){var self = $$10.$$s == null ? this : $$10.$$s;

          
          if (atttached_atomes == null) atttached_atomes = nil;
          return self.$delete_recursive(atttached_atomes, true);}, {$$s: self, $$source_location: ['atome/genesis/particles/utility.rb', 158]});
        self.$touch(false);
        self.$render("delete", params);
        return $send(self, 'delete_with_callback', [], $return_val(nil), {$$source_location: ['atome/genesis/particles/utility.rb', 163]});
      } else {
        return $send(params, 'each', [], function $$11(param, value){var $b, self = $$11.$$s == null ? this : $$11.$$s;

          
          if (param == null) param = nil;
          if (value == null) value = nil;
          return ($b = [value, nil], $send(self.$atome()['$[]'](param), '[]=', $b), $b[$b.length - 1]);}, {$$s: self, $$source_location: ['atome/genesis/particles/utility.rb', 167]})
      };
    } else if ($truthy($$('Universe').$atome_list()['$include?'](params))) {
      return self.$puts("write code here : " + (self.$apply()) + " , " + (self.$fasten()))
    } else if ($eqeq(params, "id")) {
      return nil
    } else {
      return self.$send(params, 0)
    };}, {$$s: self, $$source_location: ['atome/genesis/particles/utility.rb', 38]});
  self.$new((new Map([["particle", "clear"], ["category", "utility"], ["type", "boolean"]])));
  
  $def(self, '$delete_children_recursively', function $$delete_children_recursively(parent_id) {
    var $a, self = this, parent = nil, children_to_delete = nil;

    
    parent = self.$grab(parent_id);
    if (!$truthy(($a = parent, ($a === nil || $a == null) ? nil : $a.$fasten()))) {
      return nil
    };
    children_to_delete = [];
    $send(parent.$fasten(), 'each', [], function $$12(child_id){
      
      if (child_id == null) child_id = nil;
      return children_to_delete['$<<'](child_id);}, {$$source_location: ['atome/genesis/particles/utility.rb', 185]});
    return $send(children_to_delete, 'each', [], function $$13(child_id){var self = $$13.$$s == null ? this : $$13.$$s, child = nil;

      
      if (child_id == null) child_id = nil;
      child = self.$grab(child_id);
      if (!$truthy(child)) {
        return nil
      };
      if (($truthy(child.$tag()) && ($truthy(child.$tag()['$[]']("system"))))) {
        return nil
      };
      self.$delete_children_recursively(child_id);
      return child.$delete(true);}, {$$s: self, $$source_location: ['atome/genesis/particles/utility.rb', 189]});
  }, {$$source_location: ['atome/genesis/particles/utility.rb', 180]});
  $send(self, 'new', [(new Map([["post", "clear"]]))], function $$14(){var self = $$14.$$s == null ? this : $$14.$$s;

    return self.$delete_children_recursively(self.$id())}, {$$s: self, $$source_location: ['atome/genesis/particles/utility.rb', 201]});
  self.$new((new Map([["particle", "path"], ["category", "utility"], ["type", "string"]])));
  $send(self, 'new', [(new Map([["particle", "schedule"], ["category", "utility"], ["type", "string"]]))], function $$15(date, proc){var self = $$15.$$s == null ? this : $$15.$$s, delimiters = nil, format_date = nil;

    
    if (date == null) date = nil;
    if (proc == null) proc = nil;
    date = date.$to_s();
    delimiters = [",", " ", ":", "-"];
    format_date = date.$split($$('Regexp').$union(delimiters));
    return $send($$('Universe').$renderer_list(), 'each', [], function $$16(renderer){var self = $$16.$$s == null ? this : $$16.$$s;

      
      if (renderer == null) renderer = nil;
      return $send(self, 'send', ["" + (renderer) + "_schedule", format_date], proc.$to_proc());}, {$$s: self, $$source_location: ['atome/genesis/particles/utility.rb', 209]});}, {$$s: self, $$source_location: ['atome/genesis/particles/utility.rb', 205]});
  self.$new((new Map([["particle", "cursor"], ["category", "utility"], ["type", "string"]])));
  $send(self, 'new', [(new Map([["particle", "preset"], ["category", "utility"], ["type", "string"]]))], function $$17(params){var self = $$17.$$s == null ? this : $$17.$$s, params_to_send = nil;

    
    if (params == null) params = nil;
    if ($truthy(params['$instance_of?']($$('Hash')))) {
      
      $$('Essentials').$new_default_params(params);
      params_to_send = params;
    } else {
      
      params_to_send = $$('Essentials').$default_params()['$[]'](params).$dup();
      params_to_send.$delete("preset");
      params_to_send.$delete("type");
      $send(params_to_send, 'each', [], function $$18(particle_found, value){var self = $$18.$$s == null ? this : $$18.$$s;

        
        if (particle_found == null) particle_found = nil;
        if (value == null) value = nil;
        return self.$send(particle_found, value);}, {$$s: self, $$source_location: ['atome/genesis/particles/utility.rb', 224]});
      params_to_send = $hash_rehash(new Map([[params, params_to_send]]));
    };
    return params_to_send;}, {$$s: self, $$source_location: ['atome/genesis/particles/utility.rb', 214]});
  self.$new((new Map([["particle", "relations"], ["category", "utility"], ["type", "hash"]])));
  self.$new((new Map([["particle", "tag"], ["render", false], ["category", "utility"], ["type", "hash"]])));
  self.$new((new Map([["particle", "web"], ["category", "utility"], ["type", "string"]])));
  self.$new((new Map([["initialize", "unit"], ["value", (new Map())]])));
  $send(self, 'new', [(new Map([["particle", "unit"], ["store", false], ["type", "string"], ["category", "utility"]]))], function $$19(params){var self = $$19.$$s == null ? this : $$19.$$s;
    if (self.unit == null) self.unit = nil;

    
    if (params == null) params = nil;
    $send(params, 'each', [], function $$20(k, v){var self = $$20.$$s == null ? this : $$20.$$s;
      if (self.unit == null) self.unit = nil;

      
      if (k == null) k = nil;
      if (v == null) v = nil;
      self.unit['$[]='](k, v);
      return self.$send(k, self.$send(k));}, {$$s: self, $$source_location: ['atome/genesis/particles/utility.rb', 237]});
    return self.unit;}, {$$s: self, $$source_location: ['atome/genesis/particles/utility.rb', 236]});
  $send(self, 'new', [(new Map([["particle", "login"], ["category", "utility"], ["type", "string"]]))], function $$21(params){var self = $$21.$$s == null ? this : $$21.$$s;

    
    if (params == null) params = nil;
    if ($truthy(params)) {
      return self.$set_current_user(self.$id())
    } else {
      return nil
    };}, {$$s: self, $$source_location: ['atome/genesis/particles/utility.rb', 244]});
  self.$new((new Map([["particle", "hypertext"], ["category", "utility"], ["type", "string"]])));
  self.$new((new Map([["particle", "hyperedit"], ["category", "utility"], ["type", "string"]])));
  self.$new((new Map([["particle", "terminal"], ["category", "utility"], ["type", "string"]])));
  self.$new((new Map([["particle", "read"], ["category", "utility"], ["type", "string"]])));
  self.$new((new Map([["particle", "write"], ["category", "utility"], ["type", "hash"]])));
  self.$new((new Map([["particle", "content"], ["category", "utility"], ["type", "string"]])));
  self.$new((new Map([["particle", "browse"], ["category", "utility"], ["type", "string"]])));
  self.$new((new Map([["particle", "copies"], ["category", "utility"], ["type", "string"]])));
  self.$new((new Map([["particle", "temporary"], ["category", "utility"], ["type", "int"]])));
  self.$new((new Map([["particle", "atomes"], ["category", "utility"], ["type", "string"]])));
  $send(self, 'new', [(new Map([["particle", "match"], ["category", "utility"], ["type", "string"]]))], function $$22(params, _bloc){
    
    if (params == null) params = nil;
    if (_bloc == null) _bloc = nil;
    return params;}, {$$source_location: ['atome/genesis/particles/utility.rb', 257]});
  $send(self, 'new', [(new Map([["sanitizer", "match"]]))], function $$23(params, _bloc){
    
    if (params == null) params = nil;
    if (_bloc == null) _bloc = nil;
    if (!$truthy(params['$[]']("condition"))) {
      params['$[]=']("condition", (new Map([["min", (new Map([["width", 0]]))]])))
    };
    return params;}, {$$source_location: ['atome/genesis/particles/utility.rb', 260]});
  self.$new((new Map([["particle", "invert"], ["category", "utility"], ["type", "boolean"]])));
  self.$new((new Map([["particle", "option"], ["category", "utility"], ["type", "string"]])));
  $send(self, 'new', [(new Map([["particle", "duplicate"], ["category", "utility"], ["type", "string"], ["store", false]]))], function $$24(params){var self = $$24.$$s == null ? this : $$24.$$s, copy_number = nil, fasten_atomes = nil, fasten_found = nil, infos_found = nil, keys_to_delete = nil, new_atome_id = nil, new_atome = nil, $ret_or_1 = nil;
    if (self.duplicate == null) self.duplicate = nil;
    if (self.id == null) self.id = nil;

    
    if (params == null) params = nil;
    copy_number = ($truthy(self.duplicate) ? (self.duplicate.$length()) : (0));
    fasten_atomes = [];
    fasten_found = self.$fasten().$dup();
    $send(fasten_found, 'each', [], function $$25(child_id_found){var self = $$25.$$s == null ? this : $$25.$$s, child_found = nil, new_child = nil;

      
      if (child_id_found == null) child_id_found = nil;
      child_found = self.$grab(child_id_found);
      if ($truthy(child_found)) {
        
        new_child = child_found.$duplicate((new Map()));
        return fasten_atomes['$<<'](new_child.$id());
      } else {
        return nil
      };}, {$$s: self, $$source_location: ['atome/genesis/particles/utility.rb', 274]});
    params['$[]=']("fasten", fasten_atomes);
    infos_found = self.$infos().$dup();
    keys_to_delete = ["history", "callback", "duplicate", "copy", "paste", "touch_code", "html", "fasten", "aid"];
    $send(keys_to_delete, 'each', [], function $$26(key){
      
      if (key == null) key = nil;
      return infos_found.$delete(key);}, {$$source_location: ['atome/genesis/particles/utility.rb', 284]});
    new_atome_id = ((("" + (self.id)) + "_copy_") + (copy_number)).$to_sym();
    infos_found['$[]=']("id", new_atome_id);
    infos_found = infos_found.$merge(params);
    new_atome = $$('Atome').$new(infos_found);
    self.duplicate = ($truthy(($ret_or_1 = self.duplicate)) ? ($ret_or_1) : ((new Map())));
    self.duplicate['$[]='](new_atome_id, new_atome);
    return new_atome;}, {$$s: self, $$source_location: ['atome/genesis/particles/utility.rb', 266]});
  $send(self, 'new', [(new Map([["after", "duplicate"]]))], function $$27(params){var self = $$27.$$s == null ? this : $$27.$$s;
    if (self.duplicate == null) self.duplicate = nil;

    
    if (params == null) params = nil;
    return self.duplicate['$[]'](self.duplicate.$keys()['$[]']($rb_minus(self.duplicate.$keys().$length(), 1)));}, {$$s: self, $$source_location: ['atome/genesis/particles/utility.rb', 294]});
  $send(self, 'new', [(new Map([["particle", "copy"], ["category", "utility"], ["type", "string"]]))], function $$28(items_id){var self = $$28.$$s == null ? this : $$28.$$s;

    
    if (items_id == null) items_id = nil;
    if (!$truthy(items_id['$instance_of?']($$('Array')))) {
      items_id = [items_id]
    };
    return self.$grab("copy").$collect()['$<<'](items_id);}, {$$s: self, $$source_location: ['atome/genesis/particles/utility.rb', 297]});
  $send(self, 'new', [(new Map([["particle", "paste"], ["category", "utility"], ["type", "string"]]))], function $$29(params){var self = $$29.$$s == null ? this : $$29.$$s, all_copies = nil, copies_found = nil, new_atomes = nil, applies_found = nil;

    
    if (params == null) params = nil;
    all_copies = self.$grab("copy").$collect();
    if ($eqeq(params, true)) {
      copies_found = all_copies.$last()
    } else if ($truthy(params['$instance_of?']($$('Integer')))) {
      copies_found = all_copies['$[]'](params.$to_i())
    } else if ($truthy(params['$instance_of?']($$('Array')))) {
      copies_found = [all_copies['$[]'](params['$[]'](0))['$[]'](params['$[]'](1))]
    };
    new_atomes = [];
    applies_found = [];
    $send(copies_found, 'each', [], function $$30(copy_found){var self = $$30.$$s == null ? this : $$30.$$s, new_atome = nil;
      if (self.id == null) self.id = nil;

      
      if (copy_found == null) copy_found = nil;
      new_atome = self.$grab(copy_found).$duplicate((new Map([["attach", self.id]])));
      new_atomes['$<<'](new_atome.$id());
      return applies_found['$<<'](new_atome.$apply());}, {$$s: self, $$source_location: ['atome/genesis/particles/utility.rb', 313]});
    $send(new_atomes, 'each_with_index', [], function $$31(id_found, index){var self = $$31.$$s == null ? this : $$31.$$s;

      
      if (id_found == null) id_found = nil;
      if (index == null) index = nil;
      return self.$grab(id_found).$apply(applies_found['$[]'](index));}, {$$s: self, $$source_location: ['atome/genesis/particles/utility.rb', 321]});
    return new_atomes;}, {$$s: self, $$source_location: ['atome/genesis/particles/utility.rb', 301]});
  $send(self, 'new', [(new Map([["read", "paste"]]))], function $$32(p){var self = $$32.$$s == null ? this : $$32.$$s;
    if (self.copy == null) self.copy = nil;

    
    if (p == null) p = nil;
    return self.copy;}, {$$s: self, $$source_location: ['atome/genesis/particles/utility.rb', 326]});
  self.$new((new Map([["particle", "backup"], ["category", "utility"], ["type", "string"]])));
  self.$new((new Map([["particle", "import"], ["category", "utility"], ["type", "string"]])));
  $send(self, 'new', [(new Map([["particle", "compute"], ["category", "utility"], ["type", "string"]]))], function $$33(params){var $ret_or_1 = nil;

    
    if (params == null) params = nil;
    if (!$truthy(params['$instance_of?']($$('Hash')))) {
      params = (new Map([["particle", params]]))
    };
    if ($truthy(($ret_or_1 = params['$[]']("unit")))) {
      $ret_or_1
    } else {
      params['$[]=']("unit", "pixel")
    };
    if ($truthy(($ret_or_1 = params['$[]']("reference")))) {
      $ret_or_1
    } else {
      params['$[]=']("reference", "view")
    };
    return params;}, {$$source_location: ['atome/genesis/particles/utility.rb', 331]});
  $send(self, 'new', [(new Map([["particle", "get"], ["category", "utility"], ["type", "string"]]))], function $$34(params){var self = $$34.$$s == null ? this : $$34.$$s, cell = nil, row_nb = nil, column_nb = nil;

    
    if (params == null) params = nil;
    cell = params['$[]']("cell");
    row_nb = cell['$[]'](0);
    column_nb = cell['$[]'](1);
    return self.$data()['$[]'](row_nb)['$[]'](self.$data()['$[]'](row_nb).$keys()['$[]'](column_nb));}, {$$s: self, $$source_location: ['atome/genesis/particles/utility.rb', 337]});
  self.$new((new Map([["particle", "css"], ["category", "utility"], ["type", "string"]])));
  $send(self, 'new', [(new Map([["read", "css"]]))], function $$35(){var self = $$35.$$s == null ? this : $$35.$$s;

    return $$('CssProxy').$new(self.$js(), nil, self)}, {$$s: self, $$source_location: ['atome/genesis/particles/utility.rb', 344]});
  self.$new((new Map([["particle", "holder"], ["category", "utility"], ["type", "atome"]])));
  $send(self, 'new', [(new Map([["particle", "executor"], ["category", "utility"], ["type", "hash"]]))], function $$36(params){var self = $$36.$$s == null ? this : $$36.$$s;

    
    if (params == null) params = nil;
    $send(params, 'each', [], function $$37(method, opt){var self = $$37.$$s == null ? this : $$37.$$s;

      
      if (method == null) method = nil;
      if (opt == null) opt = nil;
      return self.$send(method, opt);}, {$$s: self, $$source_location: ['atome/genesis/particles/utility.rb', 350]});
    return params;}, {$$s: self, $$source_location: ['atome/genesis/particles/utility.rb', 349]});
  $send(self, 'new', [(new Map([["particle", "tick"], ["category", "utility"], ["store", false], ["type", "hash"]]))], function $$38(val){var $a, self = $$38.$$s == null ? this : $$38.$$s, $ret_or_1 = nil;
    if (self.tick == null) self.tick = nil;

    
    if (val == null) val = nil;
    if ($truthy(($ret_or_1 = self.tick['$[]'](val)))) {
      $ret_or_1
    } else {
      self.tick['$[]='](val, 0)
    };
    self.tick['$[]='](val, ($a = [val, $rb_plus(self.tick['$[]'](val), 1)], $send(self.tick, '[]=', $a), $a[$a.length - 1]));
    return self.tick['$[]'](val);}, {$$s: self, $$source_location: ['atome/genesis/particles/utility.rb', 355]});
  self.$new((new Map([["particle", "storage"], ["category", "utility"], ["type", "hash"]])));
  self.$new((new Map([["particle", "state"], ["category", "utility"], ["type", "symbol"]])));
  self.$new((new Map([["particle", "record"], ["category", "utility"], ["type", "hash"]])));
  self.$new((new Map([["particle", "preview"], ["category", "utility"], ["type", "hash"]])));
  self.$new((new Map([["particle", "meteo"], ["category", "utility"], ["type", "string"]])));
  return $send(self, 'new', [(new Map([["particle", "timer"], ["category", "utility"], ["type", "hash"]]))], function $$39(params, bloc){var self = $$39.$$s == null ? this : $$39.$$s, $ret_or_1 = nil, end_val = nil;

    
    if (params == null) params = nil;
    if (bloc == null) bloc = nil;
    self.timer_callback = bloc;
    if (!$truthy(params['$[]']("start"))) {
      if (($truthy(self.$timer()) && ($truthy(self.$timer()['$[]']("position"))))) {
        params['$[]=']("start", self.$timer()['$[]']("position"))
      } else {
        params['$[]=']("start", 0)
      }
    };
    if (!$truthy(params['$[]']("end"))) {
      params['$[]=']("end", ($truthy(($ret_or_1 = params['$[]']("position"))) ? ($ret_or_1) : (0)))
    };
    if ($truthy(params['$[]']("stop"))) {
      
      self.$js_timer("kill", nil, self.$id());
      params['$[]=']("position", 0);
      return params;
    } else if ($truthy(params['$[]']("pause"))) {
      
      end_val = self.$timer()['$[]']("position");
      self.$js_timer("kill", nil, self.$id());
      params['$[]=']("position", end_val);
      params['$[]=']("start", end_val);
      return params;
    } else {
      
      self.$js_timer("kill", nil, self.$id());
      self.$js_timer(params['$[]']("start"), params['$[]']("end"), self.$id());
      return params;
    };}, {$$s: self, $$source_location: ['atome/genesis/particles/utility.rb', 365]});
};

Opal.modules["atome/utilities/security"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $send = Opal.send, $def = Opal.def, $truthy = Opal.truthy, $not = Opal.not, $eqeq = Opal.eqeq, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('each,[],[]=,encode,delete,!,==,check_password_destruction,puts');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Atome');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.authorisations = $proto.password = nil;
    
    
    $def(self, '$authorise', function $$authorise(autorisations) {
      var $a, $b, self = this;

      
      ($a = autorisations['$[]']("read"), ($a === nil || $a == null) ? nil : $send($a, 'each', [], function $$1(k, v){var $b;

        
        if (k == null) k = nil;
        if (v == null) v = nil;
        return ($b = [k, $$('Black_matter').$encode(v)], $send(autorisations['$[]']("read"), '[]=', $b), $b[$b.length - 1]);}, {$$source_location: ['atome/utilities/security.rb', 6]}));
      ($b = autorisations['$[]']("write"), ($b === nil || $b == null) ? nil : $send($b, 'each', [], function $$2(k, v){var $c;

        
        if (k == null) k = nil;
        if (v == null) v = nil;
        return ($c = [k, $$('Black_matter').$encode(v)], $send(autorisations['$[]']("write"), '[]=', $c), $c[$c.length - 1]);}, {$$source_location: ['atome/utilities/security.rb', 9]}));
      return (self.authorisations = autorisations);
    }, {$$source_location: ['atome/utilities/security.rb', 5]});
    
    $def(self, '$check_password_destruction', function $$check_password_destruction(operation, element) {
      var self = this;

      
      if (!$truthy(self.authorisations['$[]']("destroy"))) {
        return nil
      };
      return self.authorisations['$[]'](operation).$delete(element);
    }, {$$source_location: ['atome/utilities/security.rb', 16]});
    
    $def(self, '$write_auth', function $$write_auth(element) {
      var self = this;

      if (((($truthy(self.password) && ($truthy(self.password['$[]']("write")))) && ($truthy(self.authorisations))) && ($truthy(self.authorisations['$[]']("write"))))) {
        
        if ($not(self.authorisations['$[]']("write")['$[]'](element))) {
          return false
        } else if ($eqeq(self.password['$[]']("write")['$[]'](element), self.authorisations['$[]']("write")['$[]'](element))) {
          
          self.$check_password_destruction("write", element);
          return true;
        } else if ($eqeq(self.authorisations['$[]']("write")['$[]']("atome"), self.password['$[]']("write")['$[]']("atome"))) {
          
          self.$puts("" + (self.authorisations['$[]']("write")['$[]']("atome")) + " == " + (self.password['$[]']("write")['$[]']("atome")));
          self.$check_password_destruction("write", element);
          return true;
        } else {
          
          self.$check_password_destruction("write", element);
          return false;
        };
        return self.$check_password_destruction("write", element);
      } else {
        return true
      }
    }, {$$source_location: ['atome/utilities/security.rb', 22]});
    return $def(self, '$read_auth', function $$read_auth(element) {
      var self = this;

      if (((($truthy(self.password) && ($truthy(self.password['$[]']("read")))) && ($truthy(self.authorisations))) && ($truthy(self.authorisations['$[]']("read"))))) {
        
        if ($not(self.authorisations['$[]']("read")['$[]'](element))) {
          return false
        } else if ($eqeq(self.password['$[]']("read")['$[]'](element), self.authorisations['$[]']("read")['$[]'](element))) {
          
          self.$check_password_destruction("read", element);
          return true;
        } else if ($eqeq(self.authorisations['$[]']("read")['$[]']("atome"), self.password['$[]']("read")['$[]']("atome"))) {
          
          self.$check_password_destruction("read", element);
          return true;
        } else {
          
          self.$check_password_destruction("read", element);
          return false;
        };
        return self.$check_password_destruction("read", element);
      } else {
        return true
      }
    }, {$$source_location: ['atome/utilities/security.rb', 47]});
  })($nesting[0], null, $nesting)
};

Opal.modules["renderers/html/atome"] = Opal.return_val(Opal.nil); /* Generated by Opal 1.8.2 */

Opal.modules["renderers/html/atome_html"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $truthy = Opal.truthy, $def = Opal.def, $thrower = Opal.thrower, $rb_times = Opal.rb_times, $rb_divide = Opal.rb_divide, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('is_descendant,id,to_f,eval,grab,attach,to_px,*,/,raise');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Atome');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.html = $proto.id = nil;
    
    
    $def(self, '$html', function $$html(obj) {
      var self = this;

      
      if (obj == null) obj = nil;
      if ($truthy(obj)) {
        return (self.html = obj)
      } else {
        return self.html
      };
    }, {$$arity: -1, $$source_location: ['renderers/html/atome_html.rb', 4]});
    
    $def(self, '$descendant_of?', function $Atome_descendant_of$ques$1(ancestor) {
      var self = this;

      return $$('HTML').$is_descendant(ancestor, self.$id())
    }, {$$source_location: ['renderers/html/atome_html.rb', 12]});
    
    $def(self, '$to_px', function $$to_px(particle) {try { 
      var self = this, ruby_wasm_code = nil;

      
      ruby_wasm_code = "  var div = document.getElementById(\"" + (self.id) + "\");\n" + "  var style = window.getComputedStyle(div);\n" + "  var original_value = style.getPropertyValue(\"" + (particle) + "\");\n" + "  var parsed_value = parseInt(original_value);\n" + "  return parsed_value;\n";
      return $$('JS').$eval(ruby_wasm_code).$to_f();} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$source_location: ['renderers/html/atome_html.rb', 16]});
    return $def(self, '$to_percent', function $$to_percent(property) {
      var self = this, parent = nil, parent_width = nil, parent_height = nil, property_needed_px = nil;

      
      parent = self.$grab(self.$attach());
      parent_width = parent.$to_px("width");
      parent_height = parent.$to_px("height");
      property_needed_px = self.$to_px(property);
      
      switch (property.valueOf()) {
        case "width":
        case "left":
          return "" + ($rb_times($rb_divide(property_needed_px, parent_width.$to_f()), 100)) + "%"
        case "height":
        case "top":
          return "" + ($rb_times($rb_divide(property_needed_px, parent_height.$to_f()), 100)) + "%"
        default:
          return self.$raise($$('ArgumentError'))
      };
    }, {$$source_location: ['renderers/html/atome_html.rb', 27]});
  })($nesting[0], null, $nesting)
};

Opal.modules["renderers/html/communication"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $send = Opal.send, self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('new,[]=,to_s,[],int8,js,connect,html,webkittalk,chrometalk');
  
  $send(self, 'new', [(new Map([["method", "language"], ["renderer", "html"]]))], function $$1(params){var $a, self = $$1.$$s == null ? this : $$1.$$s;

    
    if (params == null) params = nil;
    return ($a = ["innerHTML", self.$int8()['$[]'](params).$to_s()], $send(self.$js(), '[]=', $a), $a[$a.length - 1]);}, {$$s: self, $$source_location: ['renderers/html/communication.rb', 1]});
  $send(self, 'new', [(new Map([["method", "connection"], ["renderer", "html"]]))], function $$2(params){var self = $$2.$$s == null ? this : $$2.$$s;

    
    if (params == null) params = nil;
    return self.$html().$connect(params);}, {$$s: self, $$source_location: ['renderers/html/communication.rb', 5]});
  $send(self, 'new', [(new Map([["method", "webkittalk"], ["type", "json"], ["renderer", "html"]]))], function $$3(value, _user_proc){var self = $$3.$$s == null ? this : $$3.$$s;

    
    if (value == null) value = nil;
    if (_user_proc == null) _user_proc = nil;
    return self.$html().$webkittalk(value);}, {$$s: self, $$source_location: ['renderers/html/communication.rb', 10]});
  return $send(self, 'new', [(new Map([["method", "chrometalk"], ["type", "json"], ["renderer", "html"]]))], function $$4(value, _user_proc){var self = $$4.$$s == null ? this : $$4.$$s;

    
    if (value == null) value = nil;
    if (_user_proc == null) _user_proc = nil;
    return self.$html().$chrometalk(value);}, {$$s: self, $$source_location: ['renderers/html/communication.rb', 15]});
};

Opal.modules["renderers/html/effect"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $send = Opal.send, $eqeqeq = Opal.eqeqeq, $truthy = Opal.truthy, $eqeq = Opal.eqeq, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('new,===,each,<<,join,end_with?,is_a?,style,html,==,[],backdropFilter,filter,affect');
  
  $send(self, 'new', [(new Map([["renderer", "html"], ["method", "smooth"], ["type", "string"]]))], function $$1(value, _user_proc){var self = $$1.$$s == null ? this : $$1.$$s, format_params = nil, $ret_or_1 = nil, data_collected = nil;

    
    if (value == null) value = nil;
    if (_user_proc == null) _user_proc = nil;
    format_params = ($eqeqeq($$('Array'), ($ret_or_1 = value)) ? (((data_collected = []), $send(value, 'each', [], function $$2(param){
      
      if (param == null) param = nil;
      return data_collected['$<<']("" + (param) + "px");}, {$$source_location: ['renderers/html/effect.rb', 7]}), data_collected.$join(" "))) : ($eqeqeq($$('Integer'), $ret_or_1) ? ("" + (value) + "px") : (($truthy(value['$is_a?']($$('String'))) && ($truthy(value['$end_with?']("%")))) ? (value) : ("" + (value) + "px"))));
    return self.$html().$style("border-radius", format_params);}, {$$s: self, $$source_location: ['renderers/html/effect.rb', 3]});
  $send(self, 'new', [(new Map([["renderer", "html"], ["method", "blur"], ["type", "integer"]]))], function $$3(params, _user_proc){var self = $$3.$$s == null ? this : $$3.$$s;

    
    if (params == null) params = nil;
    if (_user_proc == null) _user_proc = nil;
    if (($eqeq(params['$[]']("affect"), "back") || ($eqeq(params['$[]']("affect"), "back")))) {
      return self.$html().$backdropFilter("blur", "" + (params['$[]']("value")) + "px")
    } else {
      return self.$html().$filter("blur", "" + (params['$[]']("value")) + "px")
    };}, {$$s: self, $$source_location: ['renderers/html/effect.rb', 23]});
  return $send(self, 'new', [(new Map([["renderer", "html"], ["method", "blur"], ["type", "integer"], ["specific", "shadow"]]))], function $$4(params, _user_proc){var self = $$4.$$s == null ? this : $$4.$$s;

    
    if (params == null) params = nil;
    if (_user_proc == null) _user_proc = nil;
    if ($eqeq(params['$[]']("affect"), "back")) {
      self.$html().$backdropFilter("blur", "" + (params['$[]']("value")) + "px")
    } else {
      self.$html().$filter("blur", "" + (params['$[]']("value")) + "px")
    };
    return self.$affect(self.$affect());}, {$$s: self, $$source_location: ['renderers/html/effect.rb', 31]});
};

Opal.modules["renderers/html/event"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $send = Opal.send, $truthy = Opal.truthy, self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('new,[],event,html,remove,action,on,resize');
  
  $send(self, 'new', [(new Map([["method", "drag"], ["type", "symbol"], ["renderer", "html"]]))], function $$1(params){var self = $$1.$$s == null ? this : $$1.$$s, option = nil;
    if (self.drag == null) self.drag = nil;

    
    if (params == null) params = nil;
    if ($truthy(params)) {
      
      option = self.drag['$[]'](params);
      return self.$html().$event("drag", params, option);
    } else {
      return self.$html().$event("drag", "remove", true)
    };}, {$$s: self, $$source_location: ['renderers/html/event.rb', 3]});
  $send(self, 'new', [(new Map([["method", "drop"], ["type", "symbol"], ["renderer", "html"]]))], function $$2(params){var self = $$2.$$s == null ? this : $$2.$$s, option = nil;
    if (self.drop == null) self.drop = nil;

    
    if (params == null) params = nil;
    if ($truthy(params)) {
      
      option = self.drop['$[]'](params);
      return self.$html().$event("drop", params, option);
    } else {
      return self.$html().$event("drop", self.$remove(), true)
    };}, {$$s: self, $$source_location: ['renderers/html/event.rb', 13]});
  $send(self, 'new', [(new Map([["method", "touch"], ["type", "integer"], ["renderer", "html"]]))], function $$3(params){var self = $$3.$$s == null ? this : $$3.$$s, option = nil;
    if (self.touch == null) self.touch = nil;

    
    if (params == null) params = nil;
    if ($truthy(params)) {
      
      option = self.touch['$[]'](params);
      return self.$html().$event("touch", params, option);
    } else {
      return self.$html().$event("touch", "remove", true)
    };}, {$$s: self, $$source_location: ['renderers/html/event.rb', 23]});
  $send(self, 'new', [(new Map([["method", "over"], ["type", "integer"], ["renderer", "html"]]))], function $$4(params){var self = $$4.$$s == null ? this : $$4.$$s, option = nil;
    if (self.over == null) self.over = nil;

    
    if (params == null) params = nil;
    if ($truthy(params)) {
      
      option = self.over['$[]'](params);
      return self.$html().$event("over", params, option);
    } else {
      return self.$html().$event("over", "remove", true)
    };}, {$$s: self, $$source_location: ['renderers/html/event.rb', 32]});
  $send(self, 'new', [(new Map([["method", "keyboard"], ["renderer", "html"]]))], function $$5(params){var self = $$5.$$s == null ? this : $$5.$$s, option = nil;
    if (self.keyboard == null) self.keyboard = nil;

    
    if (params == null) params = nil;
    if ($truthy(params)) {
      
      option = self.keyboard['$[]'](params);
      return self.$html().$event("keyboard", params, option);
    } else {
      return self.$html().$event("keyboard", "remove", true)
    };}, {$$s: self, $$source_location: ['renderers/html/event.rb', 41]});
  $send(self, 'new', [(new Map([["method", "play"], ["renderer", "html"]]))], function $$6(params){var self = $$6.$$s == null ? this : $$6.$$s, option = nil;
    if (self.play == null) self.play = nil;

    
    if (params == null) params = true;
    option = self.play['$[]'](params);
    return self.$html().$action("play", params, option);}, {$$arity: -1, $$s: self, $$source_location: ['renderers/html/event.rb', 50]});
  $send(self, 'new', [(new Map([["method", "on"], ["renderer", "html"]]))], function $$7(params){var self = $$7.$$s == null ? this : $$7.$$s, option = nil;
    if (self.on == null) self.on = nil;

    
    if (params == null) params = nil;
    option = self.on['$[]'](params);
    return self.$html().$on(params, option);}, {$$s: self, $$source_location: ['renderers/html/event.rb', 57]});
  return $send(self, 'new', [(new Map([["method", "resize"], ["renderer", "html"]]))], function $$8(params, _user_bloc){var self = $$8.$$s == null ? this : $$8.$$s, option = nil;
    if (self.resize == null) self.resize = nil;

    
    if (params == null) params = nil;
    if (_user_bloc == null) _user_bloc = nil;
    option = self.resize['$[]'](params);
    return self.$html().$resize(params, option);}, {$$s: self, $$source_location: ['renderers/html/event.rb', 63]});
};

Opal.modules["renderers/html/geometry"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $send = Opal.send, $truthy = Opal.truthy, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('new,is_a?,[],[]=,js,style,html');
  
  $send(self, 'new', [(new Map([["method", "width"], ["renderer", "html"], ["type", "int"]]))], function $$1(params, _user_proc){var $a, self = $$1.$$s == null ? this : $$1.$$s, unit = nil, $ret_or_1 = nil;
    if (self.unit == null) self.unit = nil;

    
    if (params == null) params = nil;
    if (_user_proc == null) _user_proc = nil;
    if ($truthy(params['$is_a?']($$('Numeric')))) {
      unit = ($truthy(($ret_or_1 = self.unit['$[]']("width"))) ? ($ret_or_1) : ("px"))
    };
    return ($a = ["width", "" + (params) + (unit)], $send(self.$js()['$[]']("style"), '[]=', $a), $a[$a.length - 1]);}, {$$s: self, $$source_location: ['renderers/html/geometry.rb', 4]});
  $send(self, 'new', [(new Map([["method", "height"], ["renderer", "html"], ["type", "int"]]))], function $$2(params, _user_proc){var $a, self = $$2.$$s == null ? this : $$2.$$s, unit = nil, $ret_or_1 = nil;
    if (self.unit == null) self.unit = nil;

    
    if (params == null) params = nil;
    if (_user_proc == null) _user_proc = nil;
    if ($truthy(params['$is_a?']($$('Numeric')))) {
      unit = ($truthy(($ret_or_1 = self.unit['$[]']("height"))) ? ($ret_or_1) : ("px"))
    };
    return ($a = ["height", "" + (params) + (unit)], $send(self.$js()['$[]']("style"), '[]=', $a), $a[$a.length - 1]);}, {$$s: self, $$source_location: ['renderers/html/geometry.rb', 9]});
  return $send(self, 'new', [(new Map([["method", "size"], ["type", "int"], ["renderer", "html"], ["specific", "text"]]))], function $$3(value, _user_proc){var self = $$3.$$s == null ? this : $$3.$$s;

    
    if (value == null) value = nil;
    if (_user_proc == null) _user_proc = nil;
    return self.$html().$style("fontSize", "" + (value) + "px");}, {$$s: self, $$source_location: ['renderers/html/geometry.rb', 16]});
};

Opal.modules["renderers/html/hierarchy"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $send = Opal.send, $rb_times = Opal.rb_times, $truthy = Opal.truthy, $eqeq = Opal.eqeq, self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('new,append_to,html,type,each,shadow,grab,*,red,green,blue,alpha,left,top,[],blur,invert,==,option,<<,join,style,to_sym,affect,paint,diffusion,direction,params,rotate,gradient,last,border,thickness,pattern,colorize_svg_data');
  
  $send(self, 'new', [(new Map([["renderer", "html"], ["method", "attach"], ["type", "string"]]))], function $$1(parent_found, _user_proc){var self = $$1.$$s == null ? this : $$1.$$s;

    
    if (parent_found == null) parent_found = nil;
    if (_user_proc == null) _user_proc = nil;
    return self.$html().$append_to(parent_found);}, {$$s: self, $$source_location: ['renderers/html/hierarchy.rb', 3]});
  $send(self, 'new', [(new Map([["renderer", "html"], ["method", "apply"], ["type", "string"]]))], function $$2(parent_found, _user_proc){var self = $$2.$$s == null ? this : $$2.$$s, shadows_to_apply = nil, drop_shadow = nil, box_shadow = nil, red = nil, green = nil, blue = nil, alpha = nil, gradients_to_apply = nil, full_gradient_to_apply = nil;

    
    if (parent_found == null) parent_found = nil;
    if (_user_proc == null) _user_proc = nil;
    
    switch (parent_found.$type().valueOf()) {
      case "shadow":
        
        shadows_to_apply = (new Map([["filter", []], ["boxShadow", []]]));
        $send(self.$shadow(), 'each', [], function $$3(shadow_id_found){var self = $$3.$$s == null ? this : $$3.$$s, shadow_found = nil, red = nil, green = nil, blue = nil, alpha = nil, left = nil, top = nil, blur = nil, inset = nil;

          
          if (shadow_id_found == null) shadow_id_found = nil;
          shadow_found = self.$grab(shadow_id_found);
          red = $rb_times(shadow_found.$red(), 255);
          green = $rb_times(shadow_found.$green(), 255);
          blue = $rb_times(shadow_found.$blue(), 255);
          alpha = shadow_found.$alpha();
          left = shadow_found.$left();
          top = shadow_found.$top();
          blur = shadow_found.$blur()['$[]']("value");
          if ($truthy(shadow_found.$invert())) {
            inset = "inset"
          };
          if ($eqeq(shadow_found.$option(), "natural")) {
            return shadows_to_apply['$[]']("filter")['$<<']("drop-shadow(" + (left) + "px " + (top) + "px " + (blur) + "px rgba(" + (red) + ", " + (green) + ", " + (blue) + ", " + (alpha) + "))")
          } else {
            return shadows_to_apply['$[]']("boxShadow")['$<<']("" + (left) + "px " + (top) + "px " + (blur) + "px rgba(" + (red) + ", " + (green) + ", " + (blue) + ", " + (alpha) + ") " + (inset))
          };}, {$$s: self, $$source_location: ['renderers/html/hierarchy.rb', 14]});
        drop_shadow = shadows_to_apply['$[]']("filter").$join(" ");
        box_shadow = shadows_to_apply['$[]']("boxShadow").$join(",");
        self.$html().$style("transform", "translate3d(0, 0, 0)");
        self.$html().$style("boxShadow", box_shadow);
        return self.$html().$style("filter", drop_shadow);
      case "color":
        
        red = $rb_times(parent_found.$red(), 255);
        green = $rb_times(parent_found.$green(), 255);
        blue = $rb_times(parent_found.$blue(), 255);
        alpha = parent_found.$alpha();
        if ($eqeq(self.$type().$to_sym(), "border")) {
          return $send(self.$affect(), 'each', [], function $$4(at_found){var self = $$4.$$s == null ? this : $$4.$$s;

            
            if (at_found == null) at_found = nil;
            return self.$grab(at_found).$html().$style("border", "solid 2px rgba(" + (red) + "," + (green) + "," + (blue) + "," + (alpha) + ")");}, {$$s: self, $$source_location: ['renderers/html/hierarchy.rb', 41]})
        } else if ($eqeq(self.$type().$to_sym(), "image")) {
          return nil
        } else {
          return self.$html().$style("backgroundColor", "rgba(" + (red) + ", " + (green) + ", " + (blue) + ", " + (alpha) + ")")
        };
        break;
      case "paint":
        
        gradients_to_apply = [];
        $send(self.$paint(), 'each', [], function $$5(paint_id){var self = $$5.$$s == null ? this : $$5.$$s, colors_to_apply = nil, paint_atome = nil, paint_diffusion = nil, paint_direction = nil, diffusion = nil, $ret_or_2 = nil, direction = nil;

          
          if (paint_id == null) paint_id = nil;
          colors_to_apply = [];
          paint_atome = self.$grab(paint_id);
          paint_diffusion = paint_atome.$diffusion();
          paint_direction = paint_atome.$direction();
          diffusion = ($truthy(($ret_or_2 = paint_diffusion)) ? ($ret_or_2) : ("linear"));
          if (($truthy(paint_direction) && ($eqeq(paint_direction, "linear")))) {
            direction = " to " + (self.$params()['$[]']("direction")) + ","
          } else if ($eqeq(diffusion, "linear")) {
            direction = " to bottom,"
          };
          if ($truthy(paint_atome.$rotate())) {
            direction = "" + (paint_atome.$rotate()) + "deg,"
          };
          $send(paint_atome.$gradient(), 'each', [], function $$6(color_id){var self = $$6.$$s == null ? this : $$6.$$s, color_found = nil;

            
            if (color_id == null) color_id = nil;
            color_found = self.$grab(color_id);
            red = $rb_times(color_found.$red(), 255);
            green = $rb_times(color_found.$green(), 255);
            blue = $rb_times(color_found.$blue(), 255);
            alpha = color_found.$alpha();
            return colors_to_apply['$<<']("rgba(" + (red) + ", " + (green) + ", " + (blue) + ", " + (alpha) + ")");}, {$$s: self, $$source_location: ['renderers/html/hierarchy.rb', 78]});
          colors_to_apply = colors_to_apply.$join(",");
          return gradients_to_apply['$<<']("" + (diffusion) + "-gradient(" + (direction) + " " + (colors_to_apply) + ")");}, {$$s: self, $$source_location: ['renderers/html/hierarchy.rb', 62]});
        full_gradient_to_apply = gradients_to_apply.$last();
        return self.$html().$style("background", full_gradient_to_apply);
      case "border":
        return $send(self.$border(), 'each', [], function $$7(border_id_found){var self = $$7.$$s == null ? this : $$7.$$s, border_found = nil, thickness = nil, pattern = nil;

          
          if (border_id_found == null) border_id_found = nil;
          border_found = self.$grab(border_id_found);
          red = $rb_times(border_found.$red(), 255);
          green = $rb_times(border_found.$green(), 255);
          blue = $rb_times(border_found.$blue(), 255);
          alpha = border_found.$alpha();
          thickness = border_found.$thickness();
          pattern = border_found.$pattern();
          return self.$html().$style("border", "" + (pattern) + " " + (thickness) + "px rgba(" + (red) + "," + (green) + "," + (blue) + "," + (alpha) + ")");}, {$$s: self, $$source_location: ['renderers/html/hierarchy.rb', 95]})
      default:
        return nil
    };}, {$$s: self, $$source_location: ['renderers/html/hierarchy.rb', 8]});
  $send(self, 'new', [(new Map([["renderer", "html"], ["method", "apply"], ["type", "string"], ["specific", "text"]]))], function $$8(parent_found, _user_proc){var self = $$8.$$s == null ? this : $$8.$$s, shadows_to_apply = nil, drop_shadow = nil, box_shadow = nil, red = nil, green = nil, blue = nil, alpha = nil, gradients_to_apply = nil, full_gradient_to_apply = nil;

    
    if (parent_found == null) parent_found = nil;
    if (_user_proc == null) _user_proc = nil;
    
    switch (parent_found.$type().valueOf()) {
      case "shadow":
        
        shadows_to_apply = (new Map([["filter", []], ["boxShadow", []]]));
        $send(self.$shadow(), 'each', [], function $$9(shadow_id_found){var self = $$9.$$s == null ? this : $$9.$$s, shadow_found = nil, red = nil, green = nil, blue = nil, alpha = nil, left = nil, top = nil, blur = nil, inset = nil;

          
          if (shadow_id_found == null) shadow_id_found = nil;
          shadow_found = self.$grab(shadow_id_found);
          red = $rb_times(shadow_found.$red(), 255);
          green = $rb_times(shadow_found.$green(), 255);
          blue = $rb_times(shadow_found.$blue(), 255);
          alpha = shadow_found.$alpha();
          left = shadow_found.$left();
          top = shadow_found.$top();
          blur = shadow_found.$blur()['$[]']("value");
          if ($truthy(shadow_found.$invert())) {
            inset = "inset"
          };
          if ($eqeq(shadow_found.$option(), "natural")) {
            return shadows_to_apply['$[]']("filter")['$<<']("drop-shadow(" + (left) + "px " + (top) + "px " + (blur) + "px rgba(" + (red) + ", " + (green) + ", " + (blue) + ", " + (alpha) + "))")
          } else {
            return shadows_to_apply['$[]']("boxShadow")['$<<']("" + (left) + "px " + (top) + "px " + (blur) + "px rgba(" + (red) + ", " + (green) + ", " + (blue) + ", " + (alpha) + ") " + (inset))
          };}, {$$s: self, $$source_location: ['renderers/html/hierarchy.rb', 115]});
        drop_shadow = shadows_to_apply['$[]']("filter").$join(" ");
        box_shadow = shadows_to_apply['$[]']("boxShadow").$join(",");
        self.$html().$style("transform", "translate3d(0, 0, 0)");
        self.$html().$style("boxShadow", box_shadow);
        return self.$html().$style("filter", drop_shadow);
      case "color":
        
        red = $rb_times(parent_found.$red(), 255);
        green = $rb_times(parent_found.$green(), 255);
        blue = $rb_times(parent_found.$blue(), 255);
        alpha = parent_found.$alpha();
        return self.$html().$style("color", "rgba(" + (red) + ", " + (green) + ", " + (blue) + ", " + (alpha) + ")");
      case "paint":
        
        gradients_to_apply = [];
        $send(self.$paint(), 'each', [], function $$10(paint_id){var self = $$10.$$s == null ? this : $$10.$$s, colors_to_apply = nil, paint_atome = nil, paint_diffusion = nil, paint_direction = nil, diffusion = nil, $ret_or_2 = nil, direction = nil;

          
          if (paint_id == null) paint_id = nil;
          colors_to_apply = [];
          paint_atome = self.$grab(paint_id);
          paint_diffusion = paint_atome.$diffusion();
          paint_direction = paint_atome.$direction();
          diffusion = ($truthy(($ret_or_2 = paint_diffusion)) ? ($ret_or_2) : ("linear"));
          if (($truthy(paint_direction) && ($eqeq(paint_direction, "linear")))) {
            direction = " to " + (self.$params()['$[]']("direction")) + ","
          } else if ($eqeq(diffusion, "linear")) {
            direction = " to bottom,"
          };
          if ($truthy(paint_atome.$rotate())) {
            direction = "" + (paint_atome.$rotate()) + "deg,"
          };
          $send(paint_atome.$gradient(), 'each', [], function $$11(color_id){var self = $$11.$$s == null ? this : $$11.$$s, color_found = nil;

            
            if (color_id == null) color_id = nil;
            color_found = self.$grab(color_id);
            red = $rb_times(color_found.$red(), 255);
            green = $rb_times(color_found.$green(), 255);
            blue = $rb_times(color_found.$blue(), 255);
            alpha = color_found.$alpha();
            return colors_to_apply['$<<']("rgba(" + (red) + ", " + (green) + ", " + (blue) + ", " + (alpha) + ")");}, {$$s: self, $$source_location: ['renderers/html/hierarchy.rb', 165]});
          colors_to_apply = colors_to_apply.$join(",");
          return gradients_to_apply['$<<']("" + (diffusion) + "-gradient(" + (direction) + " " + (colors_to_apply) + ")");}, {$$s: self, $$source_location: ['renderers/html/hierarchy.rb', 147]});
        full_gradient_to_apply = gradients_to_apply.$last();
        self.$html().$style("backgroundClip", "text");
        self.$html().$style("color", "transparent");
        return self.$html().$style("backgroundImage", full_gradient_to_apply);
      default:
        return nil
    };}, {$$s: self, $$source_location: ['renderers/html/hierarchy.rb', 110]});
  return $send(self, 'new', [(new Map([["renderer", "html"], ["method", "apply"], ["type", "string"], ["specific", "vector"]]))], function $$12(parent_found, _user_proc){var self = $$12.$$s == null ? this : $$12.$$s, shadows_to_apply = nil, drop_shadow = nil, box_shadow = nil, red = nil, green = nil, blue = nil, alpha = nil, gradients_to_apply = nil, full_gradient_to_apply = nil;

    
    if (parent_found == null) parent_found = nil;
    if (_user_proc == null) _user_proc = nil;
    
    switch (parent_found.$type().valueOf()) {
      case "shadow":
        
        shadows_to_apply = (new Map([["filter", []], ["boxShadow", []]]));
        $send(self.$shadow(), 'each', [], function $$13(shadow_id_found){var self = $$13.$$s == null ? this : $$13.$$s, shadow_found = nil, red = nil, green = nil, blue = nil, alpha = nil, left = nil, top = nil, blur = nil, inset = nil;

          
          if (shadow_id_found == null) shadow_id_found = nil;
          shadow_found = self.$grab(shadow_id_found);
          red = $rb_times(shadow_found.$red(), 255);
          green = $rb_times(shadow_found.$green(), 255);
          blue = $rb_times(shadow_found.$blue(), 255);
          alpha = shadow_found.$alpha();
          left = shadow_found.$left();
          top = shadow_found.$top();
          blur = shadow_found.$blur();
          if ($truthy(shadow_found.$invert())) {
            inset = "inset"
          };
          if ($eqeq(shadow_found.$option(), "natural")) {
            return shadows_to_apply['$[]']("filter")['$<<']("drop-shadow(" + (left) + "px " + (top) + "px " + (blur) + "px rgba(" + (red) + ", " + (green) + ", " + (blue) + ", " + (alpha) + "))")
          } else {
            return shadows_to_apply['$[]']("boxShadow")['$<<']("" + (left) + "px " + (top) + "px " + (blur) + "px rgba(" + (red) + ", " + (green) + ", " + (blue) + ", " + (alpha) + ") " + (inset))
          };}, {$$s: self, $$source_location: ['renderers/html/hierarchy.rb', 194]});
        drop_shadow = shadows_to_apply['$[]']("filter").$join(" ");
        box_shadow = shadows_to_apply['$[]']("boxShadow").$join(",");
        self.$html().$style("transform", "translate3d(0, 0, 0)");
        self.$html().$style("boxShadow", box_shadow);
        return self.$html().$style("filter", drop_shadow);
      case "color":
        
        red = $rb_times(parent_found.$red(), 255);
        green = $rb_times(parent_found.$green(), 255);
        blue = $rb_times(parent_found.$blue(), 255);
        alpha = parent_found.$alpha();
        return self.$html().$colorize_svg_data("rgba(" + (red) + ", " + (green) + ", " + (blue) + ", " + (alpha) + ")");
      case "paint":
        
        gradients_to_apply = [];
        $send(self.$paint(), 'each', [], function $$14(paint_id){var self = $$14.$$s == null ? this : $$14.$$s, colors_to_apply = nil, paint_atome = nil, paint_diffusion = nil, paint_direction = nil, diffusion = nil, $ret_or_2 = nil, direction = nil;

          
          if (paint_id == null) paint_id = nil;
          colors_to_apply = [];
          paint_atome = self.$grab(paint_id);
          paint_diffusion = paint_atome.$diffusion();
          paint_direction = paint_atome.$direction();
          diffusion = ($truthy(($ret_or_2 = paint_diffusion)) ? ($ret_or_2) : ("linear"));
          if (($truthy(paint_direction) && ($eqeq(paint_direction, "linear")))) {
            direction = " to " + (self.$params()['$[]']("direction")) + ","
          } else if ($eqeq(diffusion, "linear")) {
            direction = " to bottom,"
          };
          if ($truthy(paint_atome.$rotate())) {
            direction = "" + (paint_atome.$rotate()) + "deg,"
          };
          $send(paint_atome.$gradient(), 'each', [], function $$15(color_id){var self = $$15.$$s == null ? this : $$15.$$s, color_found = nil;

            
            if (color_id == null) color_id = nil;
            color_found = self.$grab(color_id);
            red = $rb_times(color_found.$red(), 255);
            green = $rb_times(color_found.$green(), 255);
            blue = $rb_times(color_found.$blue(), 255);
            alpha = color_found.$alpha();
            return colors_to_apply['$<<']("rgba(" + (red) + ", " + (green) + ", " + (blue) + ", " + (alpha) + ")");}, {$$s: self, $$source_location: ['renderers/html/hierarchy.rb', 243]});
          colors_to_apply = colors_to_apply.$join(",");
          return gradients_to_apply['$<<']("" + (diffusion) + "-gradient(" + (direction) + " " + (colors_to_apply) + ")");}, {$$s: self, $$source_location: ['renderers/html/hierarchy.rb', 227]});
        full_gradient_to_apply = gradients_to_apply.$last();
        return self.$html().$style("background", full_gradient_to_apply);
      default:
        return nil
    };}, {$$s: self, $$source_location: ['renderers/html/hierarchy.rb', 188]});
};

Opal.modules["renderers/html/html"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $truthy = Opal.truthy, $defs = Opal.defs, $thrower = Opal.thrower, $def = Opal.def, $return_ivar = Opal.return_ivar, $send = Opal.send, $eqeq = Opal.eqeq, $to_ary = Opal.to_ary, $range = Opal.range, $rb_times = Opal.rb_times, $eqeqeq = Opal.eqeqeq, $rb_plus = Opal.rb_plus, $rb_minus = Opal.rb_minus, $rb_lt = Opal.rb_lt, $rb_gt = Opal.rb_gt, $rb_divide = Opal.rb_divide, $lambda = Opal.lambda, $neqeq = Opal.neqeq, $gvars = Opal.gvars, $rb_ge = Opal.rb_ge, $rb_le = Opal.rb_le, $assign_ivar = Opal.assign_ivar, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('[],global,empty?,has_key?,querySelector,nil?,to_a,querySelectorAll,eval,getElementById,to_s,[]=,createTextNode,appendChild,<<,==,each,is_a?,join,add_css_to_atomic_style,map,split,match,to_proc,to_sym,to_i,scan,reject,with_index,select,odd?,strip,start_with?,end_with?,extract_properties,get_page_style,merge,chomp,call,convert_to_css,css_to_data,transform_values,transform_keys,transform_to_string_keys_and_values,host,generate,gsub,close,instance_variable_get,grab,setAttribute,add,remove,attr,inspect,delete,check_double,markup,createElement,add_class,id,key?,instance_of?,*,===,capitalize,red,green,blue,alpha,createRange,selectNodeContents,getSelection,removeAllRanges,addRange,focus,length,-@,lambda,to_f,min,max,+,-,each_slice,<,>,round,createElementNS,calculate_svg_viewbox,sanitize_text,addEventListener,duration=,getElementsByClassName,removeChild,path,/,width,height,requestAnimationFrame,instance_exec,animation_frame_callback,currentTime,pause,play,!=,last,matchMedia,event_validation,send,addListener,alert,bloc,Native,left,top,draggable,on,allow_tool_operations=,to_px,compute,restrict_movement,remove_this_drag,dropzone,drop_common,drop_remove,resizable,between?,style,over_remove,!,edit_mode,tag,instance_variable_set,setup_touch_event,remove_this_touch,message,terminal_code,parse,puts,handle_input,removeEventListener,keys,max_by,option,times,first,compact,each_with_index,set_td_style,values,fit,cell_height,data,attach,downto,deleteRow,insertRow,insertCell,component,innerHTML=,zero?,insertBefore,firstChild,insert_cell,insert_row,insert_column,>=,<=,apply,apply_centering,private,calculate_position,chop');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'HTML');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.id = $proto.websocket = $proto.element = $proto.original_atome = $proto.element_type = $proto.on_resize_already_set = $proto.drag_move_already_set = $proto.draggable = $proto.first_drag = $proto.drag_restrict_already_set = $proto.drag_start_already_set = $proto.drag_end_already_set = $proto.drag_locked_already_set = $proto.drop_activate_already_set = $proto.drop_dropped_already_set = $proto.drop_enter_already_set = $proto.drop_leave_already_set = $proto.drop_remove_already_set = $proto.over_over_already_set = $proto.over_enter_already_set = $proto.over_leave_already_set = $proto.input_listener = $proto.center_options = $proto.parent = nil;
    
    $defs(self, '$locate', function $$locate(selector, base_element) {
      var parent = nil, html_element = nil;

      
      if (base_element == null) base_element = $$('JS').$global()['$[]']("document")['$[]']("body");
      if ($truthy(selector['$empty?']())) {
        return base_element
      };
      if ($truthy(selector['$has_key?']("id"))) {
        return base_element.$querySelector("#" + (selector['$[]']("id")))
      } else if ($truthy(selector['$has_key?']("parent"))) {
        
        parent = base_element.$querySelector("#" + (selector['$[]']("parent")));
        if ($truthy(parent['$nil?']())) {
          return nil
        };
        return parent.$querySelectorAll("*").$to_a();
      } else if ($truthy(selector['$has_key?']("html"))) {
        
        html_element = selector['$[]']("html");
        if ($truthy(html_element['$nil?']())) {
          return nil
        };
        return html_element.$querySelectorAll("*").$to_a();
      } else {
        return nil
      };
    }, {$$arity: -2, $$source_location: ['renderers/html/html.rb', 6]});
    $defs(self, '$is_descendant', function $$is_descendant(ancestor, descendant) {try { 
      
      return $$('JS').$eval("return isDescendant('" + (ancestor) + "', '" + (descendant) + "')")} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$source_location: ['renderers/html/html.rb', 24]});
    
    $def(self, '$initialize', function $$initialize(id_found, current_atome) {
      var self = this;

      
      self.element = $$('JS').$global()['$[]']("document").$getElementById(id_found.$to_s());
      self.id = id_found;
      self.original_atome = current_atome;
      return (self.touch_removed = (new Map()));
    }, {$$source_location: ['renderers/html/html.rb', 28]});
    
    $def(self, '$object', $return_ivar("element"), {$$source_location: ['renderers/html/html.rb', 37]});
    
    $def(self, '$hypertext', function $$hypertext(params) {
      var $a, self = this, current_div = nil;

      
      current_div = $$('JS').$global()['$[]']("document").$getElementById(self.id.$to_s());
      return ($a = ["innerHTML", params], $send(current_div, '[]=', $a), $a[$a.length - 1]);
    }, {$$source_location: ['renderers/html/html.rb', 41]});
    
    $def(self, '$add_font_to_css', function $$add_font_to_css(params) {try { 
      var font_path = nil, font_name = nil, str_to_eval = nil;

      
      font_path = params['$[]']("path");
      font_name = params['$[]']("name");
      str_to_eval = "var styleElement = document.createElement('style');\n" + "styleElement.textContent = `\n" + "  @font-face {\n" + "    font-family: '" + (font_name) + "';\n" + "    src: url('../medias/fonts/" + (font_path) + "/" + (font_name) + ".ttf') format('truetype');\n" + "  }\n" + "`;\n" + "document.head.appendChild(styleElement);\n";
      return $$('JS').$eval(str_to_eval);} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$source_location: ['renderers/html/html.rb', 59]});
    
    $def(self, '$add_css_to_atomic_style', function $$add_css_to_atomic_style(css) {
      var style_element = nil, text_node = nil;

      
      style_element = $$('JS').$global()['$[]']("document").$getElementById("atomic_style");
      text_node = $$('JS').$global()['$[]']("document").$createTextNode(css);
      return style_element.$appendChild(text_node);
    }, {$$source_location: ['renderers/html/html.rb', 77]});
    
    $def(self, '$convert_to_css', function $$convert_to_css(data) {
      var self = this, conditions = nil, apply = nil, condition_strings = nil, operator = nil, property_strings = nil, css = nil;

      
      conditions = data['$[]']("condition");
      apply = data['$[]']("alterations");
      condition_strings = [];
      if ($truthy(conditions['$[]']("max"))) {
        
        if ($truthy(conditions['$[]']("max")['$[]']("width"))) {
          condition_strings['$<<']("(max-width: " + (conditions['$[]']("max")['$[]']("width")) + "px)")
        };
        if ($truthy(conditions['$[]']("max")['$[]']("height"))) {
          condition_strings['$<<']("(max-height: " + (conditions['$[]']("max")['$[]']("height")) + "px)")
        };
      };
      if ($truthy(conditions['$[]']("min"))) {
        
        if ($truthy(conditions['$[]']("min")['$[]']("width"))) {
          condition_strings['$<<']("(min-width: " + (conditions['$[]']("min")['$[]']("width")) + "px)")
        };
        if ($truthy(conditions['$[]']("min")['$[]']("height"))) {
          condition_strings['$<<']("(min-height: " + (conditions['$[]']("min")['$[]']("height")) + "px)")
        };
      };
      operator = ($eqeq(conditions['$[]']("operator"), "and") ? ("and") : ("or"));
      property_strings = [];
      $send(apply, 'each', [], function $$1(key, values){var inner_properties = nil;

        
        if (key == null) key = nil;
        if (values == null) values = nil;
        inner_properties = [];
        $send(values, 'each', [], function $$2(property, value){
          
          if (property == null) property = nil;
          if (value == null) value = nil;
          if ($eqeq(property, "color")) {
            return inner_properties['$<<']("background-color: " + (value) + " !important;")
          } else {
            
            if ($truthy(value['$is_a?']($$('Integer')))) {
              inner_properties['$<<']("" + (property) + ": " + (value) + "px !important;")
            };
            if ($truthy(value['$is_a?']($$('Symbol')))) {
              return inner_properties['$<<']("" + (property) + ": " + (value) + " !important;")
            } else {
              return nil
            };
          };}, {$$source_location: ['renderers/html/html.rb', 106]});
        return property_strings['$<<']("#" + (key) + " {\n" + (inner_properties.$join("\n")) + "\n}");}, {$$source_location: ['renderers/html/html.rb', 104]});
      css = "@media " + (condition_strings.$join(" " + (operator) + " ")) + " {\n" + (property_strings.$join("\n")) + "\n}";
      self.$add_css_to_atomic_style(css);
      return css;
    }, {$$source_location: ['renderers/html/html.rb', 83]});
    
    $def(self, '$css_to_data', function $$css_to_data(css) {
      var data = nil, media_conditions = nil;

      
      data = (new Map([["condition", (new Map())], ["apply", (new Map())]]));
      media_conditions = $send(css.$match(/@media ([^\{]+)/)['$[]'](1).$split(","), 'map', [], "strip".$to_proc());
      $send(media_conditions, 'each', [], function $$3(condition){var $a, type = nil, property = nil, value = nil, $logical_op_recvr_tmp_1 = nil, $ret_or_1 = nil;

        
        if (condition == null) condition = nil;
        type = condition.$match(/(max|min)-/)['$[]'](1).$to_sym();
        property = condition.$match(/(width|height)/)['$[]'](1).$to_sym();
        value = condition.$match(/(\d+)/)['$[]'](1).$to_i();
        
        $logical_op_recvr_tmp_1 = data['$[]']("condition");
        if ($truthy(($ret_or_1 = $logical_op_recvr_tmp_1['$[]'](type)))) {
          $ret_or_1
        } else {
          $logical_op_recvr_tmp_1['$[]='](type, (new Map()))
        };;
        return ($a = [property, value], $send(data['$[]']("condition")['$[]'](type), '[]=', $a), $a[$a.length - 1]);}, {$$source_location: ['renderers/html/html.rb', 131]});
      $send(css.$scan(/(\w+) \{([^\}]+)\}/), 'each', [], function $$4(match){var key = nil, properties = nil, $logical_op_recvr_tmp_2 = nil, $ret_or_1 = nil;

        
        if (match == null) match = nil;
        key = match['$[]'](0).$to_sym();
        properties = $send($send(match['$[]'](1).$split(";"), 'map', [], "strip".$to_proc()), 'reject', [], "empty?".$to_proc());
        
        $logical_op_recvr_tmp_2 = data['$[]']("apply");
        if ($truthy(($ret_or_1 = $logical_op_recvr_tmp_2['$[]'](key)))) {
          $ret_or_1
        } else {
          $logical_op_recvr_tmp_2['$[]='](key, (new Map()))
        };;
        return $send(properties, 'each', [], function $$5(property){var $a, $b, prop = nil, value = nil;

          
          if (property == null) property = nil;
          $b = $send(property.$split(":"), 'map', [], "strip".$to_proc()), $a = $to_ary($b), (prop = ($a[0] == null ? nil : $a[0])), (value = ($a[1] == null ? nil : $a[1])), $b;
          if ($eqeq(prop, "background-color")) {
            return ($a = ["color", value.$to_sym()], $send(data['$[]']("apply")['$[]'](key), '[]=', $a), $a[$a.length - 1])
          } else if ($eqeq(value['$[]']($range(-2, nil, false)), "px")) {
            return ($a = [prop.$to_sym(), value.$to_i()], $send(data['$[]']("apply")['$[]'](key), '[]=', $a), $a[$a.length - 1])
          } else {
            return ($a = [prop.$to_sym(), value.$to_sym()], $send(data['$[]']("apply")['$[]'](key), '[]=', $a), $a[$a.length - 1])
          };}, {$$source_location: ['renderers/html/html.rb', 146]});}, {$$source_location: ['renderers/html/html.rb', 141]});
      return data;
    }, {$$source_location: ['renderers/html/html.rb', 124]});
    
    $def(self, '$extract_properties', function $$extract_properties(properties_string) {
      var properties_hash = nil, properties = nil;

      
      properties_hash = (new Map());
      properties = $send($send(properties_string.$split(";"), 'map', [], "strip".$to_proc()), 'reject', [], "empty?".$to_proc());
      $send(properties, 'each', [], function $$6(property){var $a, $b, key = nil, value = nil;

        
        if (property == null) property = nil;
        $b = $send(property.$split(":"), 'map', [], "strip".$to_proc()), $a = $to_ary($b), (key = ($a[0] == null ? nil : $a[0])), (value = ($a[1] == null ? nil : $a[1])), $b;
        return ($a = [key, value], $send(properties_hash, '[]=', $a), $a[$a.length - 1]);}, {$$source_location: ['renderers/html/html.rb', 164]});
      return properties_hash;
    }, {$$source_location: ['renderers/html/html.rb', 161]});
    
    $def(self, '$get_page_style', function $$get_page_style() {
      var self = this, main_view = nil, main_view_content = nil, style_tags = nil, hash_result = nil, inside_media = nil, media_hash = nil;

      
      main_view = $$('JS').$global()['$[]']("document").$getElementById("view");
      main_view_content = main_view['$[]']("innerHTML").$to_s();
      style_tags = $send(main_view_content.$split(/<\/?style[^>]*>/i).$select(), 'with_index', [], function $$7(_, index){
        
        if (_ == null) _ = nil;
        if (index == null) index = nil;
        return index['$odd?']();}, {$$source_location: ['renderers/html/html.rb', 174]});
      style_tags = style_tags.$join("");
      style_tags = style_tags.$split("\n");
      hash_result = (new Map());
      inside_media = false;
      media_hash = (new Map());
      $send(style_tags, 'each', [], function $$8(line){var $a, $b, $c, self = $$8.$$s == null ? this : $$8.$$s, selector = nil, properties = nil, media_content = nil, media_query = nil;

        
        if (line == null) line = nil;
        line = line.$strip();
        if (($truthy(line['$empty?']()) || ($truthy(line['$start_with?']("/*"))))) {
          return nil
        };
        if ($truthy(inside_media)) {
          
          if ($eqeq(line, "}")) {
            
            hash_result['$[]']("@media")['$<<'](media_hash);
            inside_media = false;
            return nil;
          };
          $b = $send(line.$split("{"), 'map', [], "strip".$to_proc()), $a = $to_ary($b), (selector = ($a[0] == null ? nil : $a[0])), (properties = ($a[1] == null ? nil : $a[1])), $b;
          if (!$truthy(($a = properties, ($a === nil || $a == null) ? nil : $a['$end_with?']("}")))) {
            return nil
          };
          properties = properties['$[]']($range(0, -1, true)).$strip();
          return ($b = [selector, self.$extract_properties(properties)], $send(media_hash, '[]=', $b), $b[$b.length - 1]);
        } else if ($truthy(line['$start_with?']("@media"))) {
          
          media_content = line.$match(/@media\s*\(([^)]+)\)\s*{/);
          if (!$truthy(media_content)) {
            return nil
          };
          media_query = media_content['$[]'](1);
          hash_result['$[]=']("@media", [media_query]);
          return (inside_media = true);
        } else {
          
          $c = $send(line.$split("{"), 'map', [], "strip".$to_proc()), $b = $to_ary($c), (selector = ($b[0] == null ? nil : $b[0])), (properties = ($b[1] == null ? nil : $b[1])), $c;
          if (!$truthy(($b = properties, ($b === nil || $b == null) ? nil : $b['$end_with?']("}")))) {
            return nil
          };
          properties = properties['$[]']($range(0, -1, true)).$strip();
          return ($c = [selector, self.$extract_properties(properties)], $send(hash_result, '[]=', $c), $c[$c.length - 1]);
        };}, {$$s: self, $$source_location: ['renderers/html/html.rb', 181]});
      return hash_result;
    }, {$$source_location: ['renderers/html/html.rb', 171]});
    
    $def(self, '$markup', function $$markup(new_tag, _usr_bloc) {try { 
      var self = this, element_id = nil, js_code = nil;

      
      element_id = self.id.$to_s();
      js_code = "let element = document.getElementById('" + (element_id) + "');\n" + "if (!element) {\n" + "    console.error(`Element with id \"${'" + (element_id) + "'}\" not found.`);\n" + "    return;\n" + "}\n" + "let newElement = document.createElement('" + (new_tag) + "');\n" + "\n" + "newElement.style.cssText = element.style.cssText;\n" + "Array.from(element.attributes).forEach(attr => {\n" + "    newElement.setAttribute(attr.name, attr.value);\n" + "});\n" + "newElement.innerHTML = element.innerHTML;\n" + "element.parentNode.replaceChild(newElement, element);\n";
      return $$('JS').$eval(js_code);} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$source_location: ['renderers/html/html.rb', 215]});
    
    $def(self, '$hyperedit', function $$hyperedit(params, usr_bloc) {
      var self = this, html_object = nil, particles_from_style = nil, classes_found = nil, particles_found = nil, style_found = nil;

      
      html_object = $$('JS').$global()['$[]']("document").$getElementById(params.$to_s());
      particles_from_style = (new Map());
      self.$get_page_style();
      if ($truthy(html_object['$[]']("className").$to_s())) {
        
        classes_found = html_object['$[]']("className").$to_s().$split(" ");
        $send(classes_found, 'each', [], function $$9(class_found){var self = $$9.$$s == null ? this : $$9.$$s;

          
          if (class_found == null) class_found = nil;
          if ($truthy(self.$get_page_style()['$[]']("." + (class_found)))) {
            return (particles_from_style = particles_from_style.$merge(self.$get_page_style()['$[]']("." + (class_found))))
          } else {
            return nil
          };}, {$$s: self, $$source_location: ['renderers/html/html.rb', 242]});
      };
      particles_found = (new Map());
      particles_found['$[]=']("data", html_object['$[]']("innerText").$to_s().$chomp());
      particles_found['$[]=']("markup", html_object['$[]']("tagName").$to_s());
      style_found = html_object['$[]']("style")['$[]']("cssText").$to_s();
      $send(style_found.$split(";"), 'each', [], function $$10(pair){var $a, $b, key = nil, value = nil;

        
        if (pair == null) pair = nil;
        $b = $send(pair.$split(":"), 'map', [], "strip".$to_proc()), $a = $to_ary($b), (key = ($a[0] == null ? nil : $a[0])), (value = ($a[1] == null ? nil : $a[1])), $b;
        if (($truthy(key) && ($truthy(value)))) {
          return ($a = [key.$to_sym(), value], $send(particles_from_style, '[]=', $a), $a[$a.length - 1])
        } else {
          return nil
        };}, {$$source_location: ['renderers/html/html.rb', 255]});
      particles_found = particles_found.$merge(particles_from_style);
      return usr_bloc.$call(particles_found);
    }, {$$source_location: ['renderers/html/html.rb', 235]});
    
    $def(self, '$match', function $$match(params) {
      var self = this, css_converted = nil;

      
      css_converted = self.$convert_to_css(params);
      return self.$css_to_data(css_converted);
    }, {$$source_location: ['renderers/html/html.rb', 265]});
    
    $def(self, '$connect', function $$connect(params) {try { 
      var bloc = $$connect.$$p || nil, type = nil, server = nil;

      $$connect.$$p = null;
      
      ;
      type = params['$[]']("type");
      server = params['$[]']("address");
      return $$('JS').$eval("atomeJS.connect('" + (type) + "','" + (server) + "')");} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$source_location: ['renderers/html/html.rb', 270]});
    
    $def(self, '$transform_to_string_keys_and_values', function $$transform_to_string_keys_and_values(hash) {
      var self = this;

      return $send($send(hash, 'transform_keys', [], "to_s".$to_proc()), 'transform_values', [], function $$11(value){var self = $$11.$$s == null ? this : $$11.$$s;

        
        if (value == null) value = nil;
        if ($truthy(value['$is_a?']($$('Hash')))) {
          return self.$transform_to_string_keys_and_values(value)
        } else {
          return value.$to_s()
        };}, {$$s: self, $$source_location: ['renderers/html/html.rb', 278]})
    }, {$$source_location: ['renderers/html/html.rb', 277]});
    
    $def(self, '$send_message', function $$send_message(message) {try { 
      var self = this, message_string = nil, js_safe_string = nil;

      
      if ($eqeq($$('Atome').$host(), "pure_wasm")) {
        message = self.$transform_to_string_keys_and_values(message)
      };
      message_string = $$('JSON').$generate(message);
      js_safe_string = message_string.$gsub("\"", "\\\"");
      return $$('JS').$eval("atomeJS.ws_sender(\"" + (js_safe_string) + "\")");} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$source_location: ['renderers/html/html.rb', 287]});
    
    $def(self, '$webkittalk', function $$webkittalk(message) {try { 
      var code = nil;

      
      code = "   window.webkit.messageHandlers.hostHandler.postMessage(" + (message) + ");\n";
      return $$('JS').$eval(code);} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$source_location: ['renderers/html/html.rb', 301]});
    
    $def(self, '$chrometalk', function $$chrometalk(message) {try { 
      var code = nil;

      
      code = "   window.chrome.webview.postMessage(" + (message) + ");\n";
      return $$('JS').$eval(code);} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$source_location: ['renderers/html/html.rb', 308]});
    
    $def(self, '$close_websocket', function $$close_websocket() {
      var self = this;

      return self.websocket.$close()
    }, {$$source_location: ['renderers/html/html.rb', 315]});
    
    $def(self, '$location', function $$location(loc_found) {try { 
      var self = this, long_f = nil, lat_f = nil, js_code = nil;

      if (($truthy(loc_found['$[]']("longitude")) && ($truthy(loc_found['$[]']("latitude"))))) {
        
        long_f = loc_found['$[]']("longitude");
        lat_f = loc_found['$[]']("latitude");
        js_code = "         const locatorElement = document.getElementById('" + (self.id) + "');\n" + "if (!locatorElement._leaflet_map) {\n" + "    const map = L.map('" + (self.id) + "').setView([51.505, -0.09], 2); // Centrer initialement sur une position par défaut\n" + "    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n" + "        attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n" + "    }).addTo(map);\n" + "    locatorElement._leaflet_map = map;\n" + "\n" + "    if ('" + (long_f) + "' === 'auto' || '" + (lat_f) + "' === 'auto') {\n" + "        function onLocationFound(e) {\n" + "            const radius = e.accuracy / 2;\n" + "            const locationMarker = L.marker(e.latlng).addTo(map)\n" + "                .bindPopup(`You are within ${radius} meters from this point`).openPopup();\n" + "\n" + "            // Ajouter un ID au marqueur\n" + "            locationMarker._icon.id = '" + (self.id) + "_locator';\n" + "            \n" + "            locationMarker.on('click', function() {\n" + "                alert(`You clicked the location marker at ${e.latlng.toString()}`);\n" + "            });\n" + "\n" + "            const locationCircle = L.circle(e.latlng, radius).addTo(map);\n" + "            map.setView(e.latlng, map.getZoom()); // Centrer la carte sur la position trouvée en conservant le zoom actuel\n" + "        }\n" + "\n" + "        function onLocationError(e) {\n" + "            console.log(e.message);\n" + "        }\n" + "\n" + "        map.on('locationfound', onLocationFound);\n" + "        map.on('locationerror', onLocationError);\n" + "\n" + "        map.locate({ setView: true }); // Tenter de localiser l'utilisateur sans modifier le zoom\n" + "    } else {\n" + "        const lat = parseFloat('" + (lat_f) + "');\n" + "        const long = parseFloat('" + (long_f) + "');\n" + "        map.setView([lat, long], map.getZoom()); // Centrer la carte sur les coordonnées fournies en conservant le zoom actuel\n" + "\n" + "        const locationMarker = L.marker([lat, long]).addTo(map)\n" + "            .bindPopup('This is your point').openPopup();\n" + "\n" + "        // Ajouter un ID au marqueur\n" + "        locationMarker._icon.id = '" + (self.id) + "_locator';\n" + "        \n" + "        locationMarker.on('click', function() {\n" + "            alert(`You clicked the location marker at [${lat}, ${long}]`);\n" + "        });\n" + "    }\n" + "\n" + "    // Ecouter l'événement 'load' de la carte pour rafraîchir l'écran et afficher une alerte\n" + "    map.whenReady(function() {\n" + "        map.invalidateSize();\n" + "// important setimout re-center the view else the view is incorrect (map.invalidateSize() refresh the view)\n" + "setTimeout(function() {\n" + "        map.invalidateSize();\n" + "}, 0001);\n" + "    });\n" + "} else {\n" + "    const map = locatorElement._leaflet_map;\n" + "    if ('" + (long_f) + "' !== 'auto' && '" + (lat_f) + "' !== 'auto') {\n" + "        const lat = parseFloat('" + (lat_f) + "');\n" + "        const long = parseFloat('" + (long_f) + "');\n" + "        map.setView([lat, long], map.getZoom()); // Centrer la carte sur les coordonnées fournies en conservant le zoom actuel\n" + "\n" + "        const locationMarker = L.marker([lat, long]).addTo(map)\n" + "            .bindPopup('This is your point').openPopup();\n" + "\n" + "        // Ajouter un ID au marqueur\n" + "        locationMarker._icon.id = '" + (self.id) + "_locator';\n" + "        \n" + "        locationMarker.on('click', function() {\n" + "            alert(`You clicked the location marker at [${lat}, ${long}]`);\n" + "        });\n" + "    }\n" + "\n" + "    // Ecouter l'événement 'load' de la carte pour rafraîchir l'écran et afficher une alerte\n" + "    map.whenReady(function() {\n" + "    \n" + "setTimeout(function() {\n" + "        map.invalidateSize();\n" + "}, 0001);\n" + "    });\n" + "}\n" + "\n" + "// Ecouter l'événement de redimensionnement de la fenêtre pour réinitialiser la taille de la carte et la vue\n" + "window.addEventListener('resize', () => {\n" + "    const map = locatorElement._leaflet_map;\n" + "setTimeout(function() {\n" + "        map.invalidateSize();\n" + "}, 0001);\n" + "});\n" + "\n" + "\n" + "\n";
        return $$('JS').$eval(js_code);
      } else {
        return nil
      }} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$source_location: ['renderers/html/html.rb', 320]});
    
    $def(self, '$map_zoom', function $$map_zoom(params) {try { 
      var self = this, js_code = nil;

      
      js_code = "const locatorElement = document.getElementById('" + (self.id) + "');\n" + "      const map = locatorElement._leaflet_map;\n" + "          map.setZoom(" + (params) + ");\n";
      return $$('JS').$eval(js_code);} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$source_location: ['renderers/html/html.rb', 425]});
    
    $def(self, '$map_pan', function $$map_pan(params) {try { 
      var self = this, left_found = nil, $ret_or_1 = nil, top_found = nil, js_code = nil;

      
      left_found = ($truthy(($ret_or_1 = params['$[]']("left"))) ? ($ret_or_1) : (0));
      top_found = ($truthy(($ret_or_1 = params['$[]']("top"))) ? ($ret_or_1) : (0));
      js_code = "const locatorElement = document.getElementById('" + (self.id) + "');\n" + "      const map = locatorElement._leaflet_map;\n" + "           map.panBy([" + (left_found) + ", " + (top_found) + "], { animate: true });\n";
      return $$('JS').$eval(js_code);} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$source_location: ['renderers/html/html.rb', 434]});
    
    $def(self, '$meteo_helper', function $$meteo_helper(data) {
      var self = this;

      return self.$grab(self.id).$instance_variable_get("@meteo_code")['$[]']("meteo").$call(data)
    }, {$$source_location: ['renderers/html/html.rb', 446]});
    
    $def(self, '$meteo', function $$meteo(location) {try { 
      var self = this, js_code = nil;

      
      js_code = "const url = 'https://api.openweathermap.org/data/2.5/weather?q=" + (location) + ",fr&appid=c21a75b667d6f7abb81f118dcf8d4611&units=metric';\n" + "async function fetchWeather() {\n" + "    try {\n" + "        let response = await fetch(url);\n" + "\n" + "        if (!response.ok) {\n" + "            throw new Error('Erreur HTTP ! statut : ' + response.status);\n" + "        }\n" + "\n" + "        let data = await response.json();\n" + "\n" + "\n" + "let jsonString = JSON.stringify(data);\n" + "atomeJsToRuby(\"grab('" + (self.id) + "').html.meteo_helper(\"+jsonString+\")\");\n" + "    } catch (error) {\n" + "        console.log('Error getting meteo : ' + error.message);\n" + "    }\n" + "}\n" + "\n" + "fetchWeather();\n";
      return $$('JS').$eval(js_code);} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$source_location: ['renderers/html/html.rb', 450]});
    
    $def(self, '$attr', function $$attr(attribute, value) {
      var self = this;

      
      self.element.$setAttribute(attribute.$to_s(), value.$to_s());
      return self;
    }, {$$source_location: ['renderers/html/html.rb', 476]});
    
    $def(self, '$add_class', function $$add_class(class_to_add) {
      var self = this;

      
      self.element['$[]']("classList").$add(class_to_add.$to_s());
      return self;
    }, {$$source_location: ['renderers/html/html.rb', 481]});
    
    $def(self, '$remove_class', function $$remove_class(class_to_remove) {
      var self = this;

      
      self.element['$[]']("classList").$remove(class_to_remove.$to_s());
      return self;
    }, {$$source_location: ['renderers/html/html.rb', 486]});
    
    $def(self, '$id', function $$id(id) {
      var self = this;

      
      self.$attr("id", id);
      return self;
    }, {$$source_location: ['renderers/html/html.rb', 491]});
    
    $def(self, '$check_double', function $$check_double(id) {
      var self = this, element_to_delete = nil;

      
      element_to_delete = $$('JS').$global()['$[]']("document").$getElementById(id.$to_s());
      if ($eqeq(element_to_delete.$inspect(), "null")) {
        return nil
      } else {
        return self.$delete(id)
      };
    }, {$$source_location: ['renderers/html/html.rb', 497]});
    
    $def(self, '$editor', function $$editor(id) {
      var self = this, editor_id = nil, markup_found = nil, $ret_or_1 = nil;

      
      self.$check_double(id);
      editor_id = "" + (id) + "_editor";
      self.$check_double(editor_id);
      markup_found = ($truthy(($ret_or_1 = self.original_atome.$markup())) ? ($ret_or_1) : ("textarea"));
      self.element_type = markup_found.$to_s();
      self.element = $$('JS').$global()['$[]']("document").$createElement(self.element_type);
      $$('JS').$global()['$[]']("document")['$[]']("body").$appendChild(self.element);
      self.$add_class("atome");
      self.$id(id);
      return self;
    }, {$$source_location: ['renderers/html/html.rb', 503]});
    
    $def(self, '$shape', function $$shape(id) {
      var self = this, markup_found = nil, $ret_or_1 = nil;

      
      self.$check_double(id);
      markup_found = ($truthy(($ret_or_1 = self.original_atome.$markup())) ? ($ret_or_1) : ("div"));
      self.element_type = markup_found.$to_s();
      self.element = $$('JS').$global()['$[]']("document").$createElement(self.element_type);
      $$('JS').$global()['$[]']("document")['$[]']("body").$appendChild(self.element);
      self.$add_class("atome");
      self.$id(id);
      return self;
    }, {$$source_location: ['renderers/html/html.rb', 536]});
    
    $def(self, '$draw', function $$draw(id) {
      var self = this, markup_found = nil, $ret_or_1 = nil;

      
      self.$check_double(id);
      markup_found = ($truthy(($ret_or_1 = self.original_atome.$markup())) ? ($ret_or_1) : ("canvas"));
      self.element_type = markup_found.$to_s();
      self.element = $$('JS').$global()['$[]']("document").$createElement(self.element_type);
      $$('JS').$global()['$[]']("document")['$[]']("body").$appendChild(self.element);
      self.$add_class("atome");
      self.$id(id);
      return self;
    }, {$$source_location: ['renderers/html/html.rb', 548]});
    
    $def(self, '$line', function $$line(params) {try { 
      var self = this, thickness = nil, $ret_or_1 = nil, color = nil, pattern = nil, start_cap = nil, arrow = nil, arrow_size = nil, edition = nil, dash_array = nil, js_code = nil;

      
      thickness = ($truthy(($ret_or_1 = params['$[]']("thickness"))) ? ($ret_or_1) : (5));
      color = ($truthy(($ret_or_1 = params['$[]']("color"))) ? ($ret_or_1) : ("black"));
      pattern = ($truthy(($ret_or_1 = params['$[]']("pattern"))) ? ($ret_or_1) : ("solid"));
      start_cap = ($truthy(($ret_or_1 = params['$[]']("start_cap"))) ? ($ret_or_1) : ("round"));
      arrow = ($truthy(($ret_or_1 = params['$[]']("arrow"))) && ($ret_or_1));
      arrow_size = ($truthy(($ret_or_1 = params['$[]']("arrow_size"))) ? ($ret_or_1) : (15));
      edition = ($truthy(params['$key?']("edition")) && (params['$[]']("edition")));
      if ($truthy(color['$instance_of?']($$('Hash')))) {
        
        if (!$truthy(color['$[]']("red"))) {
          color['$[]=']("red", 0)
        };
        if (!$truthy(color['$[]']("green"))) {
          color['$[]=']("green", 0)
        };
        if (!$truthy(color['$[]']("blue"))) {
          color['$[]=']("blue", 0)
        };
        if (!$truthy(color['$[]']("alpha"))) {
          color['$[]=']("alpha", 1)
        };
        color = "rgba(" + ($rb_times(color['$[]']("red"), 255)) + "," + ($rb_times(color['$[]']("green"), 255)) + "," + ($rb_times(color['$[]']("blue"), 255)) + ", " + (color['$[]']("alpha")) + ")";
      };
      dash_array = ($eqeqeq("dashed", ($ret_or_1 = pattern.$to_s())) ? ("[10, 5]") : ($eqeqeq("dotted", $ret_or_1) ? ("[3, 30]") : ("[]")));
      js_code = "// On conserve le canvas dans une variable globale pour éviter de le recréer\n" + "if (!window._fabricCanvas) { window._fabricCanvas = {}; }\n" + "var canvas = window._fabricCanvas['" + (self.id) + "'];\n" + "if (!canvas) {\n" + "  canvas = new fabric.Canvas('" + (self.id) + "', { selection: false });\n" + "  window._fabricCanvas['" + (self.id) + "'] = canvas;\n" + "\n" + "  // Fonction pour redimensionner le canvas\n" + "  function resizeCanvas() {\n" + "    canvas.setWidth(window.innerWidth);\n" + "    canvas.setHeight(window.innerHeight);\n" + "    canvas.setZoom(1);\n" + "    canvas.renderAll();\n" + "  }\n" + "  resizeCanvas();\n" + "  window.addEventListener('resize', resizeCanvas);\n" + "}\n" + "\n" + "// On retire les anciens écouteurs de dessin, s'ils existent\n" + "if (canvas._lineEventsAttached) {\n" + "  canvas.off('mouse:down', canvas._lineEventsAttached.mouseDown);\n" + "  canvas.off('mouse:move', canvas._lineEventsAttached.mouseMove);\n" + "  canvas.off('mouse:up', canvas._lineEventsAttached.mouseUp);\n" + "  canvas._lineEventsAttached = null;\n" + "}\n" + "\n" + "// Fonction pour créer une flèche\n" + "function addArrow(line) {\n" + "  const x1 = line.get('x1');\n" + "  const y1 = line.get('y1');\n" + "  const x2 = line.get('x2');\n" + "  const y2 = line.get('y2');\n" + "  const angle = Math.atan2(y2 - y1, x2 - x1);\n" + "  const arrowHead = new fabric.Triangle({\n" + "    left: x2,\n" + "    top: y2,\n" + "    pointType: 'arrow_head',\n" + "    angle: (angle * 180 / Math.PI) + 90,\n" + "    width: " + (arrow_size) + ",\n" + "    height: " + (arrow_size) + ",\n" + "    fill: '" + (color) + "',\n" + "    selectable: false,\n" + "    originX: 'center',\n" + "    originY: 'bottom'\n" + "  });\n" + "  return arrowHead;\n" + "}\n" + "\n" + "// Options de style pour la ligne\n" + "const lineOptions = {\n" + "  stroke: '" + (color) + "',\n" + "  strokeWidth: " + (thickness) + ",\n" + "  strokeDashArray: " + (dash_array) + ",\n" + "  strokeLineCap: '" + (start_cap) + "',\n" + "  strokeLineJoin: 'round',\n" + "  selectable: false,\n" + "  evented: false,\n" + "  hasBorders: false,\n" + "  hasControls: false\n" + "};\n" + "\n" + "// Si edition est true, on NE PAS attacher les événements (donc on stoppe le dessin)\n" + "// Sinon, on active le dessin.\n" + "var drawingEnabled = " + (($truthy(edition) ? ("false") : ("true"))) + ";\n" + "\n" + "if (drawingEnabled) {\n" + "  // Définition des fonctions d'événements pour le dessin\n" + "  canvas._lineEventsAttached = {\n" + "    mouseDown: function(o) {\n" + "      this.isDrawing = true;\n" + "      const pointer = this.getPointer(o.e);\n" + "      const points = [pointer.x, pointer.y, pointer.x, pointer.y];\n" + "      this.currentLine = new fabric.Line(points, lineOptions);\n" + "      this.add(this.currentLine);\n" + "      this.renderAll();\n" + "    },\n" + "    mouseMove: function(o) {\n" + "      if (this.isDrawing) {\n" + "        const pointer = this.getPointer(o.e);\n" + "        this.currentLine.set({ x2: pointer.x, y2: pointer.y });\n" + "        if (" + (arrow) + ") {\n" + "          const arrowHead = this.getObjects().find(obj => obj.pointType === 'arrow_head');\n" + "          if (arrowHead) { this.remove(arrowHead); }\n" + "          const newArrow = addArrow(this.currentLine);\n" + "          this.add(newArrow);\n" + "        }\n" + "        this.renderAll();\n" + "      }\n" + "    },\n" + "    mouseUp: function() {\n" + "      this.isDrawing = false;\n" + "      if (this.currentLine) { this.currentLine.setCoords(); }\n" + "    }\n" + "  };\n" + "  canvas.on('mouse:down', canvas._lineEventsAttached.mouseDown);\n" + "  canvas.on('mouse:move', canvas._lineEventsAttached.mouseMove);\n" + "  canvas.on('mouse:up', canvas._lineEventsAttached.mouseUp);\n" + "}\n";
      return $$('JS').$eval(js_code);} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$source_location: ['renderers/html/html.rb', 560]});
    
    $def(self, '$brush', function $$brush(params) {try { 
      var self = this, thickness = nil, $ret_or_1 = nil, color = nil, shapeType = nil, brushType = nil, edition = nil, shadow_js = nil, shadow_js_config = nil, shadow_color = nil, shadow_blur = nil, shadow_offset_x = nil, shadow_offset_y = nil, js_code = nil;

      
      thickness = ($truthy(($ret_or_1 = params['$[]']("thickness"))) ? ($ret_or_1) : (5));
      color = ($truthy(($ret_or_1 = params['$[]']("color"))) ? ($ret_or_1) : ("black"));
      shapeType = ($truthy(($ret_or_1 = params['$[]']("shape"))) ? ($ret_or_1) : ("circle"));
      brushType = ($truthy(params['$[]']("type")) ? ("" + (params['$[]']("type").$to_s().$capitalize()) + "Brush") : ("SprayBrush"));
      edition = ($truthy(params['$key?']("edition")) && (params['$[]']("edition")));
      if ($truthy(color['$instance_of?']($$('Hash')))) {
        
        if (!$truthy(color['$[]']("red"))) {
          color['$[]=']("red", 0)
        };
        if (!$truthy(color['$[]']("green"))) {
          color['$[]=']("green", 0)
        };
        if (!$truthy(color['$[]']("blue"))) {
          color['$[]=']("blue", 0)
        };
        if (!$truthy(color['$[]']("alpha"))) {
          color['$[]=']("alpha", 1)
        };
        color = "rgba(" + ($rb_times(color['$[]']("red"), 255)) + "," + ($rb_times(color['$[]']("green"), 255)) + "," + ($rb_times(color['$[]']("blue"), 255)) + ", " + (color['$[]']("alpha")) + ")";
      };
      shadow_js = "";
      shadow_js_config = "";
      if ($truthy(params['$[]']("shadow"))) {
        
        if ($truthy(params['$[]']("shadow")['$instance_of?']($$('Hash')))) {
          
          shadow_color = ($truthy(($ret_or_1 = params['$[]']("shadow")['$[]']("color"))) ? ($ret_or_1) : ("rgba(0,0,0,0.3)"));
          shadow_blur = ($truthy(($ret_or_1 = params['$[]']("shadow")['$[]']("blur"))) ? ($ret_or_1) : (10));
          shadow_offset_x = ($truthy(($ret_or_1 = params['$[]']("shadow")['$[]']("offset_x"))) ? ($ret_or_1) : (5));
          shadow_offset_y = ($truthy(($ret_or_1 = params['$[]']("shadow")['$[]']("offset_y"))) ? ($ret_or_1) : (5));
        } else {
          
          shadow_color = "rgba(0,0,0,0.3)";
          shadow_blur = 10;
          shadow_offset_x = 5;
          shadow_offset_y = 5;
        };
        shadow_js = "shadow: { color: '" + (shadow_color) + "', blur: " + (shadow_blur) + ", offsetX: " + (shadow_offset_x) + ", offsetY: " + (shadow_offset_y) + " },";
        shadow_js_config = "new fabric.Shadow({ color: '" + (shadow_color) + "', blur: " + (shadow_blur) + ", offsetX: " + (shadow_offset_x) + ", offsetY: " + (shadow_offset_y) + " })";
      };
      js_code = "// Réutiliser le canvas existant pour éviter de le recréer et ainsi éviter le flickering\n" + "if (!window._fabricCanvas) { window._fabricCanvas = {}; }\n" + "var canvas = window._fabricCanvas['" + (self.id) + "'];\n" + "var canvasEl = document.getElementById('" + (self.id) + "');\n" + "if (!canvas) {\n" + "  canvasEl.width = window.innerWidth;\n" + "  canvasEl.height = window.innerHeight;\n" + "  canvas = new fabric.Canvas('" + (self.id) + "');\n" + "  window._fabricCanvas['" + (self.id) + "'] = canvas;\n" + "  // Fonction de redimensionnement\n" + "  function resizeCanvas() {\n" + "\tcanvas.setWidth(window.innerWidth);\n" + "\tcanvas.setHeight(window.innerHeight);\n" + "\tcanvas.setZoom(1);\n" + "\tcanvas.renderAll();\n" + "  }\n" + "  resizeCanvas();\n" + "  window.addEventListener('resize', resizeCanvas);\n" + "}\n" + "\n" + "// Activer ou désactiver le mode dessin en fonction de edition\n" + "canvas.isDrawingMode = " + (($truthy(edition) ? ("false") : ("true"))) + ";\n" + "\n" + "// Si l'édition est activée (mode \"lecture seule\"), on désactive la brosse\n" + "if (" + (($truthy(edition) ? ("true") : ("false"))) + ") {\n" + "  canvas.freeDrawingBrush = null;\n" + "} else {\n" + "  // Définition de la classe CustomSprayBrush\n" + "  var CustomSprayBrush = fabric.util.createClass(fabric.SprayBrush, {\n" + "\tinitialize: function(canvas) {\n" + "\t  this.callSuper('initialize', canvas);\n" + "\t  this.sprayChunks = [];\n" + "\t  this.width = " + (thickness) + ";\n" + "\t  this.color = '" + (color) + "';\n" + "\t  this.density = 20;\n" + "\t  this.dotWidth = " + (thickness) + ";\n" + "\t  this.dotWidthVariance = 3;\n" + "\t  this.randomOpacity = true;\n" + "\t},\n" + "\n" + "\tonMouseDown: function(pointer) {\n" + "\t  this.sprayChunks = [];\n" + "\t  this.canvas.clearContext(this.canvas.contextTop);\n" + "\t  this.addSprayChunk(pointer);\n" + "\t},\n" + "\n" + "\tonMouseMove: function(pointer) {\n" + "\t  if (this.canvas._isCurrentlyDrawing) {\n" + "\t\tthis.addSprayChunk(pointer);\n" + "\t  }\n" + "\t},\n" + "\n" + "\tonMouseUp: function() {\n" + "\t  this.canvas.clearContext(this.canvas.contextTop);\n" + "\t  this.canvas.renderAll();\n" + "\t},\n" + "\n" + "\t_render: function() {\n" + "\t  var ctx = this.canvas.contextTop;\n" + "\t  ctx.fillStyle = this.color;\n" + "\t  ctx.save();\n" + "\t  for (var i = 0; i < this.sprayChunks.length; i++) {\n" + "\t\tvar chunk = this.sprayChunks[i];\n" + "\t\tctx.globalAlpha = chunk.opacity;\n" + "\t\tctx.fillRect(chunk.x, chunk.y, chunk.width, chunk.width);\n" + "\t  }\n" + "\t  ctx.restore();\n" + "\t},\n" + "\n" + "\taddSprayChunk: function(pointer) {\n" + "\t  var radius = this.width / 2;\n" + "\t  var shape;\n" + "\t  switch ('" + (shapeType) + "') {\n" + "\t\tcase 'square':\n" + "\t\t  shape = new fabric.Rect({\n" + "\t\t\tleft: pointer.x - radius,\n" + "\t\t\ttop: pointer.y - radius,\n" + "\t\t\twidth: this.dotWidth,\n" + "\t\t\theight: this.dotWidth,\n" + "\t\t\tfill: this.color,\n" + "\t\t\topacity: this.randomOpacity ? Math.random() : 1,\n" + "\t\t\t" + (shadow_js) + "\n" + "\t\t  });\n" + "\t\t  break;\n" + "\t\tcase 'triangle':\n" + "\t\t  shape = new fabric.Triangle({\n" + "\t\t\tleft: pointer.x - radius,\n" + "\t\t\ttop: pointer.y - radius,\n" + "\t\t\twidth: this.dotWidth,\n" + "\t\t\theight: this.dotWidth,\n" + "\t\t\tfill: this.color,\n" + "\t\t\topacity: this.randomOpacity ? Math.random() : 1,\n" + "\t\t\t" + (shadow_js) + "\n" + "\t\t  });\n" + "\t\t  break;\n" + "\t\tdefault:\n" + "\t\t  shape = new fabric.Circle({\n" + "\t\t\tleft: pointer.x - radius,\n" + "\t\t\ttop: pointer.y - radius,\n" + "\t\t\tradius: this.dotWidth / 2,\n" + "\t\t\tfill: this.color,\n" + "\t\t\topacity: this.randomOpacity ? Math.random() : 1,\n" + "\t\t\t" + (shadow_js) + "\n" + "\t\t  });\n" + "\t  }\n" + "\t  this.canvas.add(shape);\n" + "\t  this.canvas.renderAll();\n" + "\t}\n" + "  });\n" + "\n" + "  var brush;\n" + "  switch ('" + (brushType) + "') {\n" + "\tcase 'PencilBrush':\n" + "\t  brush = new fabric.PencilBrush(canvas);\n" + "\t  break;\n" + "\tcase 'CircleBrush':\n" + "\t  brush = new fabric.CircleBrush(canvas);\n" + "\t  break;\n" + "\tcase 'PatternBrush':\n" + "\t  brush = new fabric.PatternBrush(canvas);\n" + "\t  // Créer un pattern source\n" + "\t  var patternCanvas = fabric.util.createCanvasElement();\n" + "\t  patternCanvas.width = patternCanvas.height = 25;\n" + "\t  var ctx = patternCanvas.getContext('2d');\n" + "\t  ctx.fillStyle = '" + (color) + "';\n" + "\t  ctx.beginPath();\n" + "\t  ctx.arc(10, 10, 5, 0, Math.PI * 2, false);\n" + "\t  ctx.fill();\n" + "\t  brush.source = patternCanvas;\n" + "\t  break;\n" + "\tdefault:\n" + "\t  brush = new CustomSprayBrush(canvas);\n" + "  }\n" + "  brush.width = " + (thickness) + ";\n" + "  brush.color = '" + (color) + "';\n" + "  " + (($truthy(shadow_js_config['$empty?']()) ? ("") : ("brush.shadow = " + (shadow_js_config) + ";"))) + "\n" + "  canvas.freeDrawingBrush = brush;\n" + "}\n";
      return $$('JS').$eval(js_code);} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$source_location: ['renderers/html/html.rb', 689]});
    
    $def(self, '$text', function $$text(id) {
      var self = this, markup_found = nil, $ret_or_1 = nil;

      
      self.$check_double(id);
      markup_found = ($truthy(($ret_or_1 = self.original_atome.$markup())) ? ($ret_or_1) : ("pre"));
      self.element_type = markup_found.$to_s();
      self.element = $$('JS').$global()['$[]']("document").$createElement(self.element_type);
      $$('JS').$global()['$[]']("document")['$[]']("body").$appendChild(self.element);
      self.$add_class("atome");
      self.$id(id);
      return self;
    }, {$$source_location: ['renderers/html/html.rb', 874]});
    
    $def(self, '$select_text', function $$select_text(range) {
      var $a, self = this, back_color = nil, text_color = nil, back_color_rgba = nil, text_color_rgba = nil, selection = nil, style = nil;

      
      back_color = self.$grab("back_selection");
      text_color = self.$grab("text_selection");
      back_color_rgba = "rgba(" + ($rb_times(back_color.$red(), 255)) + "," + ($rb_times(back_color.$green(), 255)) + "," + ($rb_times(back_color.$blue(), 255)) + ", " + (back_color.$alpha()) + ")";
      text_color_rgba = "rgba(" + ($rb_times(text_color.$red(), 255)) + "," + ($rb_times(text_color.$green(), 255)) + "," + ($rb_times(text_color.$blue(), 255)) + ", " + (text_color.$alpha()) + ")";
      range = $$('JS').$global()['$[]']("document").$createRange();
      range.$selectNodeContents(self.element);
      selection = $$('JS').$global()['$[]']("window").$getSelection();
      selection.$removeAllRanges();
      selection.$addRange(range);
      self.element.$focus();
      style = $$('JS').$global()['$[]']("document").$createElement("style");
      style['$[]=']("innerHTML", "::selection { background-color: " + (back_color_rgba) + "; color: " + (text_color_rgba) + "; }");
      $$('JS').$global()['$[]']("document")['$[]']("head").$appendChild(style);
      if (!$eqeq(self.element['$[]']("innerText").$to_s().$length(), 1)) {
        return nil
      };
      return ($a = ["innerHTML", "&#8203;"], $send(self.element, '[]=', $a), $a[$a.length - 1]);
    }, {$$source_location: ['renderers/html/html.rb', 899]});
    
    $def(self, '$image', function $$image(id) {
      var self = this, markup_found = nil, $ret_or_1 = nil;

      
      self.$check_double(id);
      markup_found = ($truthy(($ret_or_1 = self.original_atome.$markup())) ? ($ret_or_1) : ("img"));
      self.element_type = markup_found.$to_s();
      self.element = $$('JS').$global()['$[]']("document").$createElement(self.element_type);
      $$('JS').$global()['$[]']("document")['$[]']("body").$appendChild(self.element);
      self.$add_class("atome");
      self.$id(id);
      return self;
    }, {$$source_location: ['renderers/html/html.rb', 921]});
    
    $def(self, '$video', function $$video(id) {
      var self = this, markup_found = nil, $ret_or_1 = nil;

      
      self.$check_double(id);
      markup_found = ($truthy(($ret_or_1 = self.original_atome.$markup())) ? ($ret_or_1) : ("video"));
      self.element_type = markup_found.$to_s();
      self.element = $$('JS').$global()['$[]']("document").$createElement(self.element_type);
      $$('JS').$global()['$[]']("document")['$[]']("body").$appendChild(self.element);
      self.$add_class("atome");
      self.$id(id);
      return self;
    }, {$$source_location: ['renderers/html/html.rb', 934]});
    
    $def(self, '$audio', function $$audio(id) {
      var self = this, markup_found = nil, $ret_or_1 = nil;

      
      self.$check_double(id);
      markup_found = ($truthy(($ret_or_1 = self.original_atome.$markup())) ? ($ret_or_1) : ("audio"));
      self.element_type = markup_found.$to_s();
      self.element = $$('JS').$global()['$[]']("document").$createElement(self.element_type);
      $$('JS').$global()['$[]']("document")['$[]']("body").$appendChild(self.element);
      self.$add_class("atome");
      self.$id(id);
      return self;
    }, {$$source_location: ['renderers/html/html.rb', 946]});
    
    $def(self, '$vr', function $$vr(id) {
      var self = this, markup_found = nil, $ret_or_1 = nil;

      
      self.$check_double(id);
      markup_found = ($truthy(($ret_or_1 = self.original_atome.$markup())) ? ($ret_or_1) : ("div"));
      self.element_type = markup_found.$to_s();
      self.element = $$('JS').$global()['$[]']("document").$createElement(self.element_type);
      $$('JS').$global()['$[]']("document")['$[]']("body").$appendChild(self.element);
      self.$add_class("atome");
      self.$id(id);
      return self;
    }, {$$source_location: ['renderers/html/html.rb', 958]});
    
    $def(self, '$vr_path', function $$vr_path(objet_path) {try { 
      var self = this, js_code = nil;

      
      js_code = "initWithParam('" + (objet_path) + "', '" + (self.id) + "', 'method', 'params');\n";
      return $$('JS').$eval(js_code);} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$source_location: ['renderers/html/html.rb', 970]});
    
    $def(self, '$www', function $$www(id) {
      var self = this, markup_found = nil, $ret_or_1 = nil;

      
      self.$check_double(id);
      markup_found = ($truthy(($ret_or_1 = self.original_atome.$markup())) ? ($ret_or_1) : ("iframe"));
      self.element_type = markup_found.$to_s();
      self.element = $$('JS').$global()['$[]']("document").$createElement(self.element_type);
      $$('JS').$global()['$[]']("document")['$[]']("body").$appendChild(self.element);
      self.$add_class("atome");
      self.element.$setAttribute("src", "https://www.youtube.com/embed/lLeQZ8Llkso?si=MMsGBEXELy9yBl9R");
      self.$id(id);
      return self;
    }, {$$source_location: ['renderers/html/html.rb', 977]});
    
    $def(self, '$raw', function $$raw(id) {
      var self = this;

      
      self.$check_double(id);
      self.element = $$('JS').$global()['$[]']("document").$createElement("div");
      self.$add_class("atome");
      self.$id(id);
      $$('JS').$global()['$[]']("document")['$[]']("body").$appendChild(self.element);
      return self;
    }, {$$source_location: ['renderers/html/html.rb', 990]});
    
    $def(self, '$calculate_svg_viewbox', function $$calculate_svg_viewbox(svg_elements) {try { var $t_return = $thrower('return'); 
      var self = this, min_x = nil, min_y = nil, max_x = nil, max_y = nil, width = nil, height = nil;

      
      min_x = (min_y = $$$($$('Float'), 'INFINITY'));
      max_x = (max_y = $$$($$('Float'), 'INFINITY')['$-@']());
      $send(svg_elements, 'each', [], function $$12(element){var self = $$12.$$s == null ? this : $$12.$$s;

        
        if (element == null) element = nil;
        return $send(element, 'each', [], function $$13(type, attributes){var self = $$13.$$s == null ? this : $$13.$$s, type_sym = nil, get_attr = nil, x = nil, y = nil, width = nil, height = nil, cx = nil, cy = nil, r = nil, rx = nil, ry = nil, x1 = nil, y1 = nil, x2 = nil, y2 = nil, points = nil, $ret_or_2 = nil, id_value = nil, d_value = nil;

          
          if (type == null) type = nil;
          if (attributes == null) attributes = nil;
          type_sym = ($truthy(type['$is_a?']($$('String'))) ? (type.$to_sym()) : (type));
          get_attr = $send(self, 'lambda', [], function $$14(key){var val = nil, $ret_or_1 = nil;

            
            if (key == null) key = nil;
            val = ($truthy(($ret_or_1 = attributes['$[]'](key.$to_s()))) ? ($ret_or_1) : (attributes['$[]'](key.$to_sym())));
            if ($truthy(val)) {
              return val.$to_f()
            } else {
              return 0
            };}, {$$source_location: ['renderers/html/html.rb', 1152]});
          
          switch (type_sym.valueOf()) {
            case "rect":
              
              x = get_attr.$call("x");
              y = get_attr.$call("y");
              width = get_attr.$call("width");
              height = get_attr.$call("height");
              min_x = [min_x, x].$min();
              min_y = [min_y, y].$min();
              max_x = [max_x, $rb_plus(x, width)].$max();
              return (max_y = [max_y, $rb_plus(y, height)].$max());
            case "circle":
              
              cx = get_attr.$call("cx");
              cy = get_attr.$call("cy");
              r = get_attr.$call("r");
              min_x = [min_x, $rb_minus(cx, r)].$min();
              min_y = [min_y, $rb_minus(cy, r)].$min();
              max_x = [max_x, $rb_plus(cx, r)].$max();
              return (max_y = [max_y, $rb_plus(cy, r)].$max());
            case "ellipse":
              
              cx = get_attr.$call("cx");
              cy = get_attr.$call("cy");
              rx = get_attr.$call("rx");
              ry = get_attr.$call("ry");
              min_x = [min_x, $rb_minus(cx, rx)].$min();
              min_y = [min_y, $rb_minus(cy, ry)].$min();
              max_x = [max_x, $rb_plus(cx, rx)].$max();
              return (max_y = [max_y, $rb_plus(cy, ry)].$max());
            case "line":
              
              x1 = get_attr.$call("x1");
              y1 = get_attr.$call("y1");
              x2 = get_attr.$call("x2");
              y2 = get_attr.$call("y2");
              min_x = [min_x, x1, x2].$min();
              min_y = [min_y, y1, y2].$min();
              max_x = [max_x, x1, x2].$max();
              return (max_y = [max_y, y1, y2].$max());
            case "polyline":
            case "polygon":
              
              points = ($truthy(($ret_or_2 = attributes['$[]']("points"))) ? ($ret_or_2) : (attributes['$[]']("points")));
              if ($truthy(points)) {
                
                points = points.$split(/\s+|,/);
                return $send(points, 'each_slice', [2], function $$15(x, y){var $a, $b;

                  
                  if (x == null) x = nil;
                  if (y == null) y = nil;
                  if (!($truthy(x) && ($truthy(y)))) {
                    return nil
                  };
                  $b = $send([x, y], 'map', [], "to_f".$to_proc()), $a = $to_ary($b), (x = ($a[0] == null ? nil : $a[0])), (y = ($a[1] == null ? nil : $a[1])), $b;
                  min_x = [min_x, x].$min();
                  min_y = [min_y, y].$min();
                  max_x = [max_x, x].$max();
                  return (max_y = [max_y, y].$max());}, {$$source_location: ['renderers/html/html.rb', 1210]});
              } else {
                return nil
              };
              break;
            case "path":
              
              id_value = ($truthy(($ret_or_2 = attributes['$[]']("id"))) ? ($ret_or_2) : (attributes['$[]']("id")));
              d_value = ($truthy(($ret_or_2 = attributes['$[]']("d"))) ? ($ret_or_2) : (attributes['$[]']("d")));
              if (($eqeq(id_value.$to_s(), "p1_toolbox_tool_icon") || (($truthy(d_value.$to_s()) && ($truthy(d_value.$to_s()['$start_with?']("M257.7 752"))))))) {
                $t_return.$throw("0 0 1024 1024", $$13.$$is_lambda)
              };
              if ($eqeq(type_sym, "path")) {
                $t_return.$throw("0 0 1024 1024", $$13.$$is_lambda)
              } else {
                return nil
              };
              break;
            default:
              return nil
          };}, {$$s: self, $$ret: $t_return, $$source_location: ['renderers/html/html.rb', 1147]});}, {$$s: self, $$source_location: ['renderers/html/html.rb', 1146]});
      if (((($eqeq(min_x, $$$($$('Float'), 'INFINITY')) || ($eqeq(min_y, $$$($$('Float'), 'INFINITY')))) || ($eqeq(max_x, $$$($$('Float'), 'INFINITY')['$-@']()))) || ($eqeq(max_y, $$$($$('Float'), 'INFINITY')['$-@']())))) {
        
        $send(svg_elements, 'each', [], function $$16(element){var self = $$16.$$s == null ? this : $$16.$$s;

          
          if (element == null) element = nil;
          return $send(element, 'each', [], function $$17(type, attributes){var self = $$17.$$s == null ? this : $$17.$$s, type_sym = nil, get_attr = nil;

            
            if (type == null) type = nil;
            if (attributes == null) attributes = nil;
            type_sym = ($truthy(type['$is_a?']($$('String'))) ? (type.$to_sym()) : (type));
            get_attr = $send(self, 'lambda', [], function $$18(key){var val = nil, $ret_or_1 = nil;

              
              if (key == null) key = nil;
              val = ($truthy(($ret_or_1 = attributes['$[]'](key.$to_s()))) ? ($ret_or_1) : (attributes['$[]'](key.$to_sym())));
              if ($truthy(val)) {
                return val.$to_f()
              } else {
                return 0
              };}, {$$source_location: ['renderers/html/html.rb', 1254]});
            if ((($eqeq(type_sym, "circle") && ($eqeq(get_attr.$call("cx"), 25))) && ($eqeq(get_attr.$call("cy"), 25)))) {
              $t_return.$throw("0 0 50 50", $$17.$$is_lambda)
            } else {
              return nil
            };}, {$$s: self, $$ret: $t_return, $$source_location: ['renderers/html/html.rb', 1249]});}, {$$s: self, $$source_location: ['renderers/html/html.rb', 1248]});
        return "0 0 100 100";
      };
      width = $rb_minus(max_x, min_x);
      height = $rb_minus(max_y, min_y);
      if (((($truthy($rb_gt(width, 900)) && ($truthy($rb_lt(width, 1100)))) && ($truthy($rb_gt(height, 900)))) && ($truthy($rb_lt(height, 1100))))) {
        return "0 0 1024 1024"
      } else if (((($truthy($rb_gt(width, 450)) && ($truthy($rb_lt(width, 550)))) && ($truthy($rb_gt(height, 450)))) && ($truthy($rb_lt(height, 550))))) {
        return "0 0 512 512"
      } else if (((($truthy($rb_gt(width, 90)) && ($truthy($rb_lt(width, 110)))) && ($truthy($rb_gt(height, 90)))) && ($truthy($rb_lt(height, 110))))) {
        return "0 0 100 100"
      } else if (((($truthy($rb_gt(width, 45)) && ($truthy($rb_lt(width, 55)))) && ($truthy($rb_gt(height, 45)))) && ($truthy($rb_lt(height, 55))))) {
        return "0 0 50 50"
      } else {
        return "0 0 " + (width.$round()) + " " + (height.$round())
      };} catch($e) {
        if ($e === $t_return) return $e.$v;
        throw $e;
      } finally {$t_return.is_orphan = true;}
    }, {$$source_location: ['renderers/html/html.rb', 1141]});
    
    $def(self, '$svg', function $$svg(id) {
      var self = this, markup_found = nil, $ret_or_1 = nil, svg_ns = nil;

      
      self.$check_double(id);
      markup_found = ($truthy(($ret_or_1 = self.original_atome.$markup())) ? ($ret_or_1) : ("svg"));
      self.element_type = markup_found.$to_s();
      svg_ns = "http://www.w3.org/2000/svg";
      self.element = $$('JS').$global()['$[]']("document").$createElementNS(svg_ns, "svg");
      $$('JS').$global()['$[]']("document")['$[]']("body").$appendChild(self.element);
      self.element.$setAttribute("version", "1.1");
      self.element.$setAttribute("preserveAspectRatio", "xMidYMid meet");
      self.$add_class("atome");
      self.$id(id);
      return self;
    }, {$$source_location: ['renderers/html/html.rb', 1296]});
    
    $def(self, '$svg_data', function $$svg_data(all_datas) {
      var self = this, viewbox_size = nil;

      
      viewbox_size = self.$calculate_svg_viewbox(all_datas);
      self.element.$setAttribute("viewBox", viewbox_size);
      return $send(all_datas, 'each', [], function $$19(full_data){var self = $$19.$$s == null ? this : $$19.$$s;

        
        if (full_data == null) full_data = nil;
        return $send(full_data, 'each', [], function $$20(type_passed, datas){var self = $$20.$$s == null ? this : $$20.$$s, svg_ns = nil, new_path = nil;
          if (self.element == null) self.element = nil;

          
          if (type_passed == null) type_passed = nil;
          if (datas == null) datas = nil;
          svg_ns = "http://www.w3.org/2000/svg";
          new_path = $$('JS').$global()['$[]']("document").$createElementNS(svg_ns.$to_s(), type_passed.$to_s());
          $$('JS').$global()['$[]']("document")['$[]']("body").$appendChild(new_path);
          $send(datas, 'each', [], function $$21(property, value){
            
            if (property == null) property = nil;
            if (value == null) value = nil;
            return new_path.$setAttribute(property.$to_s(), value.$to_s());}, {$$source_location: ['renderers/html/html.rb', 1322]});
          return self.element.$appendChild(new_path);}, {$$s: self, $$source_location: ['renderers/html/html.rb', 1317]});}, {$$s: self, $$source_location: ['renderers/html/html.rb', 1316]});
    }, {$$source_location: ['renderers/html/html.rb', 1313]});
    
    $def(self, '$update_svg_data', function $$update_svg_data(data) {
      
      return $send(data, 'each', [], function $$22(type_passed, datas){var element_to_update = nil;

        
        if (type_passed == null) type_passed = nil;
        if (datas == null) datas = nil;
        element_to_update = $$('JS').$global()['$[]']("document").$getElementById(type_passed.$to_s());
        return $send(datas, 'each', [], function $$23(property, value){
          
          if (property == null) property = nil;
          if (value == null) value = nil;
          return element_to_update.$setAttribute(property.$to_s(), value.$to_s());}, {$$source_location: ['renderers/html/html.rb', 1333]});}, {$$source_location: ['renderers/html/html.rb', 1331]})
    }, {$$source_location: ['renderers/html/html.rb', 1330]});
    
    $def(self, '$colorize_svg_data', function $$colorize_svg_data(data) {try { 
      var self = this, command = nil;

      
      command = "       let svgElement = document.getElementById(\"" + (self.id) + "\");\n" + "      if (!svgElement) {\n" + "        return [];\n" + "      }\n" + "      var children = svgElement.children;\n" + "      var ids = [];\n" + "      for (var i = 0; i < children.length; i++) {\n" + "        var element = document.getElementById(children[i].id); // Récupérer l'élément par son ID\n" + "        if (element) {\n" + "            element.setAttribute('fill', '" + (data) + "'); // Modifier l'attribut fill\n" + "            element.setAttribute('stroke', '" + (data) + "'); // Modifier l'attribut stroke\n" + "        }\n" + "        ids.push(children[i].id);\n" + "      }\n" + "  return ids\n";
      return $$('JS').$eval(command);} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$source_location: ['renderers/html/html.rb', 1339]});
    
    $def(self, '$raw_data', function $$raw_data(html_string) {
      var $a, self = this;

      return ($a = ["innerHTML", html_string], $send(self.element, '[]=', $a), $a[$a.length - 1])
    }, {$$source_location: ['renderers/html/html.rb', 1360]});
    
    $def(self, '$video_path', function $$video_path(video_path, type) {
      var self = this, source = nil;

      
      if (type == null) type = "video/mp4";
      source = $$('JS').$global()['$[]']("document").$createElement("source");
      source.$setAttribute("src", video_path);
      source.$setAttribute("type", type);
      return self.element.$appendChild(source);
    }, {$$arity: -2, $$source_location: ['renderers/html/html.rb', 1364]});
    
    $def(self, '$sanitize_text', function $$sanitize_text(text) {
      
      return text.$to_s().$gsub("&", "&").$gsub("<", "<").$gsub(">", ">").$gsub("\"", "\"").$gsub("'", "'")
    }, {$$source_location: ['renderers/html/html.rb', 1371]});
    
    $def(self, '$innerText', function $$innerText(data) {
      var $a, self = this, sanitized_data = nil;

      
      sanitized_data = self.$sanitize_text(data.$to_s());
      return ($a = ["innerText", sanitized_data], $send(self.element, '[]=', $a), $a[$a.length - 1]);
    }, {$$source_location: ['renderers/html/html.rb', 1380]});
    
    $def(self, '$textContent', function $$textContent(data) {
      var $a, self = this;

      return ($a = ["textContent", data], $send(self.element, '[]=', $a), $a[$a.length - 1])
    }, {$$source_location: ['renderers/html/html.rb', 1385]});
    
    $def(self, '$path', function $$path(objet_path) {
      var self = this;

      
      self.element.$setAttribute("src", objet_path);
      self.element['$[]=']("src", objet_path);
      self.element['$[]=']("onload", $send(self, 'lambda', [], function $$24(_event){var self = $$24.$$s == null ? this : $$24.$$s;
        if (self.element == null) self.element = nil;

        
        if (_event == null) _event = nil;
        self.element['$[]']("width");
        return self.element['$[]']("height");}, {$$s: self, $$source_location: ['renderers/html/html.rb', 1393]}));
      return self.element.$addEventListener("loadedmetadata", $send(self, 'lambda', [], function $$25(_event){var $a, self = $$25.$$s == null ? this : $$25.$$s;
        if (self.element == null) self.element = nil;
        if (self.original_atome == null) self.original_atome = nil;

        
        if (_event == null) _event = nil;
        return ($a = [self.element['$[]']("duration")], $send(self.original_atome, 'duration=', $a), $a[$a.length - 1]);}, {$$s: self, $$source_location: ['renderers/html/html.rb', 1399]}));
    }, {$$source_location: ['renderers/html/html.rb', 1389]});
    
    $def(self, '$transform', function $$transform(property, value) {
      var $a, self = this, transform_needed = nil;

      
      if (value == null) value = nil;
      transform_needed = "" + (property) + "(" + (value) + "deg)";
      return ($a = ["transform", transform_needed.$to_s()], $send(self.element['$[]']("style"), '[]=', $a), $a[$a.length - 1]);
    }, {$$arity: -2, $$source_location: ['renderers/html/html.rb', 1407]});
    
    $def(self, '$style', function $$style(property, value) {try { 
      var $a, self = this, command = nil;

      
      if (value == null) value = nil;
      if ($truthy(value)) {
        return ($a = [property, value.$to_s()], $send(self.element['$[]']("style"), '[]=', $a), $a[$a.length - 1])
      } else if ($truthy(value['$nil?']())) {
        return self.element['$[]']("style")['$[]'](property)
      } else {
        
        command = "document.getElementById('" + (self.id) + "').style.removeProperty('" + (property) + "')";
        return $$('JS').$eval(command);
      };} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$arity: -2, $$source_location: ['renderers/html/html.rb', 1412]});
    
    $def(self, '$fill', function $$fill(params) {
      var self = this, elements_to_remove = nil;

      
      elements_to_remove = self.element.$getElementsByClassName("background");
      elements_to_remove = elements_to_remove.$to_a();
      $send(elements_to_remove, 'each', [], function $$26(child){var self = $$26.$$s == null ? this : $$26.$$s;
        if (self.element == null) self.element = nil;

        
        if (child == null) child = nil;
        return self.element.$removeChild(child);}, {$$s: self, $$source_location: ['renderers/html/html.rb', 1429]});
      return $send(params, 'each', [], function $$27(param){var self = $$27.$$s == null ? this : $$27.$$s, background_layer = nil, atome_path = nil, img_width = nil, img_height = nil;
        if (self.original_atome == null) self.original_atome = nil;
        if (self.element == null) self.element = nil;

        
        if (param == null) param = nil;
        background_layer = $$('JS').$global()['$[]']("document").$createElement("div");
        background_layer['$[]']("style")['$[]=']("transform", "rotate(" + (param['$[]']("rotate")) + "deg)");
        background_layer['$[]']("style")['$[]=']("position", "absolute");
        if ($truthy(param['$[]']("position"))) {
          
          background_layer['$[]']("style")['$[]=']("top", "" + (param['$[]']("position")['$[]']("x")) + "px");
          background_layer['$[]']("style")['$[]=']("left", "" + (param['$[]']("position")['$[]']("y")) + "px");
        } else {
          
          background_layer['$[]']("style")['$[]=']("top", "0");
          background_layer['$[]']("style")['$[]=']("left", "0");
        };
        if ($truthy(param['$[]']("size"))) {
          
          background_layer['$[]']("style")['$[]=']("width", "" + (param['$[]']("size")['$[]']("x")) + "px");
          background_layer['$[]']("style")['$[]=']("height", "" + (param['$[]']("size")['$[]']("y")) + "px");
        } else {
          
          background_layer['$[]']("style")['$[]=']("width", "100%");
          background_layer['$[]']("style")['$[]=']("height", "100%");
        };
        atome_path = self.$grab(param['$[]']("atome")).$path();
        background_layer['$[]']("style")['$[]=']("backgroundImage", "url('" + (atome_path) + "')");
        background_layer['$[]']("style")['$[]=']("backgroundRepeat", "repeat");
        background_layer['$[]=']("className", "background");
        background_layer['$[]']("style")['$[]=']("opacity", param['$[]']("opacity"));
        if ($truthy(param['$[]']("repeat"))) {
          
          img_width = $rb_divide(self.original_atome.$width(), param['$[]']("repeat")['$[]']("x"));
          img_height = $rb_divide(self.original_atome.$height(), param['$[]']("repeat")['$[]']("y"));
          background_layer['$[]']("style")['$[]=']("backgroundSize", "" + (img_width) + "px " + (img_height) + "px");
        } else {
          background_layer['$[]']("style")['$[]=']("backgroundSize", "" + (param['$[]']("width")) + "px " + (param['$[]']("height")) + "px")
        };
        return self.element.$appendChild(background_layer);}, {$$s: self, $$source_location: ['renderers/html/html.rb', 1432]});
    }, {$$source_location: ['renderers/html/html.rb', 1424]});
    
    $def(self, '$filter', function $$filter(property, value) {
      var $a, self = this, filter_needed = nil;

      
      filter_needed = "" + (property) + "(" + (value) + ")";
      return ($a = ["filter", filter_needed], $send(self.element['$[]']("style"), '[]=', $a), $a[$a.length - 1]);
    }, {$$source_location: ['renderers/html/html.rb', 1469]});
    
    $def(self, '$backdropFilter', function $$backdropFilter(property, value) {
      var $a, self = this, filter_needed = nil;

      
      filter_needed = "" + (property) + "(" + (value) + ")";
      return ($a = ["-webkit-backdrop-filter", filter_needed], $send(self.element['$[]']("style"), '[]=', $a), $a[$a.length - 1]);
    }, {$$source_location: ['renderers/html/html.rb', 1474]});
    
    $def(self, '$currentTime', function $$currentTime(time) {
      var $a, self = this;

      return ($a = ["currentTime", time], $send(self.element, '[]=', $a), $a[$a.length - 1])
    }, {$$source_location: ['renderers/html/html.rb', 1479]});
    
    $def(self, '$animation_frame_callback', function $$animation_frame_callback(proc_pass, play_content) {
      var self = this;

      return $$('JS').$global()['$[]']("window").$requestAnimationFrame($lambda(function $$28(timestamp){var self = $$28.$$s == null ? this : $$28.$$s, current_time = nil, fps = nil, current_frame = nil;
        if (self.element == null) self.element = nil;
        if (self.original_atome == null) self.original_atome = nil;

        
        if (timestamp == null) timestamp = nil;
        current_time = self.element['$[]']("currentTime");
        fps = 30;
        current_frame = $rb_times(current_time.$to_f(), fps).$to_i();
        if ($truthy(proc_pass['$is_a?']($$('Proc')))) {
          $send(self.original_atome, 'instance_exec', [(new Map([["frame", current_frame], ["time", current_time]]))], proc_pass.$to_proc())
        };
        play_content['$[]=']("play", current_frame);
        return self.$animation_frame_callback(proc_pass, play_content);}, {$$s: self, $$source_location: ['renderers/html/html.rb', 1484]}))
    }, {$$source_location: ['renderers/html/html.rb', 1483]});
    
    $def(self, '$action', function $$action(_particle, action_found, option) {
      var self = this, proc_found = nil, play_content = nil;

      
      if (option == null) option = nil;
      if ($eqeq(action_found, "stop")) {
        
        self.$currentTime(option);
        return self.element.$pause();
      } else if ($eqeq(action_found, "pause")) {
        return self.element.$pause()
      } else {
        
        self.$currentTime(option);
        proc_found = self.original_atome.$instance_variable_get("@play_code")['$[]'](action_found);
        play_content = self.original_atome.$instance_variable_get("@play");
        self.$animation_frame_callback(proc_found, play_content);
        return self.element.$play();
      };
    }, {$$arity: -3, $$source_location: ['renderers/html/html.rb', 1495]});
    
    $def(self, '$append_to', function $$append_to(parent_id_found) {
      var self = this, parent_found = nil;

      
      parent_found = $$('JS').$global()['$[]']("document").$getElementById(parent_id_found.$to_s());
      parent_found.$appendChild(self.element);
      return self;
    }, {$$source_location: ['renderers/html/html.rb', 1511]});
    
    $def(self, '$delete', function $HTML_delete$29(id_to_delete) {
      var element_to_delete = nil;

      
      element_to_delete = $$('JS').$global()['$[]']("document").$getElementById(id_to_delete.$to_s());
      if (!$neqeq(element_to_delete.$to_s(), "null")) {
        return nil
      };
      if (!$truthy(element_to_delete)) {
        return nil
      };
      return element_to_delete.$remove();
    }, {$$source_location: ['renderers/html/html.rb', 1517]});
    
    $def(self, '$append', function $$append(child_id_found) {
      var self = this, child_found = nil;

      
      child_found = $$('JS').$global()['$[]']("document").$getElementById(child_id_found.$to_s());
      self.element.$appendChild(child_found);
      return self;
    }, {$$source_location: ['renderers/html/html.rb', 1524]});
    
    $def(self, '$on', function $$on(property, _option) {
      var $a, self = this, media_query = nil, mql = nil, event_handler = nil;

      
      property = property.$to_s();
      if ($truthy(property['$start_with?']("media:"))) {
        
        media_query = property.$split(":", 2).$last();
        mql = $$('JS').$global()['$[]']("window").$matchMedia(media_query);
        event_handler = $lambda(function $$30(event){var self = $$30.$$s == null ? this : $$30.$$s, bloc = nil, proc_content = nil;
          if (self.original_atome == null) self.original_atome = nil;

          
          if (event == null) event = nil;
          bloc = self.original_atome.$instance_variable_get("@on_code")['$[]']("view_resize");
          if ($truthy(self.$event_validation(bloc))) {
            proc_content = bloc.$call((new Map([["matches", event['$[]']("matches")]])))
          };
          if ($truthy(proc_content['$instance_of?']($$('Hash')))) {
            return $send(proc_content, 'each', [], function $$31(k, v){var self = $$31.$$s == null ? this : $$31.$$s;
              if (self.original_atome == null) self.original_atome = nil;

              
              if (k == null) k = nil;
              if (v == null) v = nil;
              return self.original_atome.$send(k, v);}, {$$s: self, $$source_location: ['renderers/html/html.rb', 1544]})
          } else {
            return nil
          };}, {$$s: self, $$source_location: ['renderers/html/html.rb', 1540]});
        return mql.$addListener(event_handler);
      } else if ($eqeq(property, "resize")) {
        
        if (!$truthy(self.on_resize_already_set)) {
          
          event_handler = $lambda(function $$32(event){var self = $$32.$$s == null ? this : $$32.$$s, width = nil, height = nil, blocs = nil;
            if (self.original_atome == null) self.original_atome = nil;

            
            if (event == null) event = nil;
            width = $$('JS').$global()['$[]']("window")['$[]']("innerWidth");
            height = $$('JS').$global()['$[]']("window")['$[]']("innerHeight");
            blocs = self.original_atome.$instance_variable_get("@on_code")['$[]']("view_resize");
            return $send(blocs, 'each', [], function $$33(bloc){var self = $$33.$$s == null ? this : $$33.$$s, proc_content = nil;

              
              if (bloc == null) bloc = nil;
              if ($truthy(self.$event_validation(bloc))) {
                proc_content = bloc.$call((new Map([["width", width], ["height", height]])))
              };
              if ($truthy(proc_content['$instance_of?']($$('Hash')))) {
                return $send(proc_content, 'each', [], function $$34(k, v){var self = $$34.$$s == null ? this : $$34.$$s;
                  if (self.original_atome == null) self.original_atome = nil;

                  
                  if (k == null) k = nil;
                  if (v == null) v = nil;
                  return self.original_atome.$send(k, v);}, {$$s: self, $$source_location: ['renderers/html/html.rb', 1562]})
              } else {
                return nil
              };}, {$$s: self, $$source_location: ['renderers/html/html.rb', 1559]});}, {$$s: self, $$source_location: ['renderers/html/html.rb', 1555]});
          $$('JS').$global()['$[]']("window").$addEventListener("resize", event_handler);
        };
        return (self.on_resize_already_set = true);
      } else if ($eqeq(property, "remove")) {
        
        self.$alert("remove test is ok");
        return ($a = ["view_resize", []], $send(self.original_atome.$instance_variable_get("@on_code"), '[]=', $a), $a[$a.length - 1]);
      } else {
        
        event_handler = $lambda(function $$35(event){var self = $$35.$$s == null ? this : $$35.$$s, proc_content = nil;

          
          if (event == null) event = nil;
          if ($truthy(self.$event_validation(self.$bloc()))) {
            proc_content = self.$bloc().$call(event)
          };
          if ($truthy(proc_content['$instance_of?']($$('Hash')))) {
            return $send(proc_content, 'each', [], function $$36(k, v){var self = $$36.$$s == null ? this : $$36.$$s;
              if (self.original_atome == null) self.original_atome = nil;

              
              if (k == null) k = nil;
              if (v == null) v = nil;
              return self.original_atome.$send(k, v);}, {$$s: self, $$source_location: ['renderers/html/html.rb', 1579]})
          } else {
            return nil
          };}, {$$s: self, $$source_location: ['renderers/html/html.rb', 1576]});
        return self.element.$addEventListener(property, event_handler);
      };
    }, {$$source_location: ['renderers/html/html.rb', 1531]});
    
    $def(self, '$keyboard_press', function $$keyboard_press(_option) {
      var self = this, keypress_handler = nil;

      
      self.keyboard_press = self.original_atome.$instance_variable_get("@keyboard_code")['$[]']("press");
      keypress_handler = $lambda(function $$37(native_event){var self = $$37.$$s == null ? this : $$37.$$s, event = nil, proc_content = nil;
        if (self.keyboard_press == null) self.keyboard_press = nil;

        
        if (native_event == null) native_event = nil;
        event = self.$Native(native_event);
        if ($truthy(self.$event_validation(self.keyboard_press))) {
          proc_content = self.keyboard_press.$call(event)
        };
        if ($truthy(proc_content['$instance_of?']($$('Hash')))) {
          return $send(proc_content, 'each', [], function $$38(k, v){var self = $$38.$$s == null ? this : $$38.$$s;
            if (self.original_atome == null) self.original_atome = nil;

            
            if (k == null) k = nil;
            if (v == null) v = nil;
            return self.original_atome.$send(k, v);}, {$$s: self, $$source_location: ['renderers/html/html.rb', 1599]})
        } else {
          return nil
        };}, {$$s: self, $$source_location: ['renderers/html/html.rb', 1591]});
      return self.element.$addEventListener("keypress", keypress_handler);
    }, {$$source_location: ['renderers/html/html.rb', 1588]});
    
    $def(self, '$keyboard_down', function $$keyboard_down(_option) {
      var self = this, keypress_handler = nil;

      
      self.keyboard_down = self.original_atome.$instance_variable_get("@keyboard_code")['$[]']("down");
      keypress_handler = $lambda(function $$39(event){var self = $$39.$$s == null ? this : $$39.$$s, proc_content = nil;
        if (self.keyboard_down == null) self.keyboard_down = nil;

        
        if (event == null) event = nil;
        if ($truthy(self.$event_validation(self.keyboard_down))) {
          proc_content = self.keyboard_down.$call(event)
        };
        if ($truthy(proc_content['$instance_of?']($$('Hash')))) {
          return $send(proc_content, 'each', [], function $$40(k, v){var self = $$40.$$s == null ? this : $$40.$$s;
            if (self.original_atome == null) self.original_atome = nil;

            
            if (k == null) k = nil;
            if (v == null) v = nil;
            return self.original_atome.$send(k, v);}, {$$s: self, $$source_location: ['renderers/html/html.rb', 1616]})
        } else {
          return nil
        };}, {$$s: self, $$source_location: ['renderers/html/html.rb', 1610]});
      return self.element.$addEventListener("keydown", keypress_handler);
    }, {$$source_location: ['renderers/html/html.rb', 1607]});
    
    $def(self, '$keyboard_up', function $$keyboard_up(_option) {
      var self = this, keypress_handler = nil;

      
      self.keyboard_up = self.original_atome.$instance_variable_get("@keyboard_code")['$[]']("up");
      keypress_handler = $lambda(function $$41(event){var self = $$41.$$s == null ? this : $$41.$$s, proc_content = nil;
        if (self.keyboard_up == null) self.keyboard_up = nil;

        
        if (event == null) event = nil;
        if ($truthy(self.$event_validation(self.keyboard_up))) {
          proc_content = self.keyboard_up.$call(event)
        };
        if ($truthy(proc_content['$instance_of?']($$('Hash')))) {
          return $send(proc_content, 'each', [], function $$42(k, v){var self = $$42.$$s == null ? this : $$42.$$s;
            if (self.original_atome == null) self.original_atome = nil;

            
            if (k == null) k = nil;
            if (v == null) v = nil;
            return self.original_atome.$send(k, v);}, {$$s: self, $$source_location: ['renderers/html/html.rb', 1633]})
        } else {
          return nil
        };}, {$$s: self, $$source_location: ['renderers/html/html.rb', 1627]});
      return self.element.$addEventListener("keyup", keypress_handler);
    }, {$$source_location: ['renderers/html/html.rb', 1624]});
    
    $def(self, '$keyboard_remove', function $$keyboard_remove(option) {
      var self = this;

      
      switch (option.valueOf()) {
        case "down":
          return (self.keyboard_down = "")
        case "up":
          return (self.keyboard_up = "")
        case "down":
          return (self.keyboard_press = "")
        default:
          
          self.keyboard_down = "";
          self.keyboard_up = "";
          return (self.keyboard_press = "");
      }
    }, {$$source_location: ['renderers/html/html.rb', 1641]});
    
    $def(self, '$event', function $$event(action, variance, option) {
      var self = this;

      
      if (option == null) option = nil;
      return self.$send("" + (action) + "_" + (variance), option);
    }, {$$arity: -3, $$source_location: ['renderers/html/html.rb', 1662]});
    
    $def(self, '$restrict_movement', function $$restrict_movement(restricted_x, restricted_y) {
      var self = this;

      
      self.original_atome.$left(restricted_x);
      return self.original_atome.$top(restricted_y);
    }, {$$source_location: ['renderers/html/html.rb', 1666]});
    
    $def(self, '$drag_move', function $$drag_move(_option) {try { 
      var self = this, interact = nil;

      
      if (!$truthy(self.drag_move_already_set)) {
        
        interact = $$('JS').$eval("return interact('#" + (self.id) + "')");
        if (!$truthy(self.draggable)) {
          
          interact.$draggable((new Map([["drag", true], ["inertia", (new Map([["resistance", 12], ["minSpeed", 200], ["endSpeed", 100]]))]])));
          if (!$truthy(self.first_drag)) {
            $send(interact, 'on', ["dragmove"], function $$43(native_event){var self = $$43.$$s == null ? this : $$43.$$s, drag_moves = nil, event = nil, dx = nil, dy = nil, x = nil, $ret_or_1 = nil, y = nil;
              if (self.original_atome == null) self.original_atome = nil;

              
              if (native_event == null) native_event = nil;
              drag_moves = self.original_atome.$instance_variable_get("@drag_code")['$[]']("move");
              event = self.$Native(native_event);
              $send(drag_moves, 'each', [], function $$44(drag_move){var self = $$44.$$s == null ? this : $$44.$$s, proc_content = nil;

                
                if (drag_move == null) drag_move = nil;
                if ($truthy(self.$event_validation(drag_move))) {
                  proc_content = drag_move.$call(event)
                };
                if ($truthy(proc_content['$instance_of?']($$('Hash')))) {
                  return $send(proc_content, 'each', [], function $$45(k, v){var self = $$45.$$s == null ? this : $$45.$$s;
                    if (self.original_atome == null) self.original_atome = nil;

                    
                    if (k == null) k = nil;
                    if (v == null) v = nil;
                    return self.original_atome.$send(k, v);}, {$$s: self, $$source_location: ['renderers/html/html.rb', 1696]})
                } else {
                  return nil
                };}, {$$s: self, $$source_location: ['renderers/html/html.rb', 1693]});
              $$('Universe')['$allow_tool_operations='](false);
              dx = event['$[]']("dx");
              dy = event['$[]']("dy");
              x = $rb_plus(($truthy(($ret_or_1 = self.original_atome.$left())) ? ($ret_or_1) : (0)), dx.$to_f());
              y = $rb_plus(($truthy(($ret_or_1 = self.original_atome.$top())) ? ($ret_or_1) : (0)), dy.$to_f());
              self.original_atome.$left(x);
              return self.original_atome.$top(y);}, {$$s: self, $$source_location: ['renderers/html/html.rb', 1685]})
          };
        };
        self.first_drag = true;
        self.draggable = true;
      };
      return (self.drag_move_already_set = true);} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$source_location: ['renderers/html/html.rb', 1671]});
    
    $def(self, '$drag_restrict', function $$drag_restrict(option) {try { 
      var self = this, interact = nil, max_left = nil, max_top = nil, min_left = nil, min_top = nil, $ret_or_1 = nil, parent_found = nil, parent_width = nil, parent_height = nil, original_width = nil, original_height = nil;

      
      if (!$truthy(self.drag_restrict_already_set)) {
        
        interact = $$('JS').$eval("return interact('#" + (self.id) + "')");
        interact.$draggable((new Map([["drag", true], ["inertia", (new Map([["resistance", 12], ["minSpeed", 200], ["endSpeed", 100]]))]])));
        if ($truthy(option['$instance_of?']($$('Hash')))) {
          
          max_left = self.$grab("view").$to_px("width");
          max_top = self.$grab("view").$to_px("height");
          min_left = 0;
          min_top = 0;
          if ($truthy(option['$[]']("max"))) {
            
            max_left = ($truthy(($ret_or_1 = option['$[]']("max")['$[]']("left"))) ? ($ret_or_1) : (max_left));
            max_top = ($truthy(($ret_or_1 = option['$[]']("max")['$[]']("top"))) ? ($ret_or_1) : (max_top));
          } else {
            
            max_left;
            max_top;
          };
          if ($truthy(option['$[]']("min"))) {
            
            min_left = ($truthy(($ret_or_1 = option['$[]']("min")['$[]']("left"))) ? ($ret_or_1) : (min_left));
            min_top = ($truthy(($ret_or_1 = option['$[]']("min")['$[]']("top"))) ? ($ret_or_1) : (min_top));
          } else {
            
            min_left;
            min_top;
          };
        } else {
          
          parent_found = self.$grab(option);
          min_left = parent_found.$left();
          min_top = parent_found.$top();
          parent_width = parent_found.$compute((new Map([["particle", "width"]])))['$[]']("value");
          parent_height = parent_found.$compute((new Map([["particle", "height"]])))['$[]']("value");
          original_width = self.original_atome.$width();
          original_height = self.original_atome.$height();
          max_left = $rb_minus($rb_plus(min_left, parent_width), original_width);
          max_top = $rb_minus($rb_plus(min_top, parent_height), original_height);
        };
        $send(interact, 'on', ["dragmove"], function $$46(native_event){var self = $$46.$$s == null ? this : $$46.$$s, drag_moves = nil, event = nil, dx = nil, dy = nil, x = nil, y = nil, restricted_x = nil, restricted_y = nil;
          if (self.original_atome == null) self.original_atome = nil;

          
          if (native_event == null) native_event = nil;
          drag_moves = self.original_atome.$instance_variable_get("@drag_code")['$[]']("restrict");
          event = self.$Native(native_event);
          $send(drag_moves, 'each', [], function $$47(drag_move){var self = $$47.$$s == null ? this : $$47.$$s, proc_content = nil;

            
            if (drag_move == null) drag_move = nil;
            if ($truthy(self.$event_validation(drag_move))) {
              proc_content = drag_move.$call(event)
            };
            if ($truthy(proc_content['$instance_of?']($$('Hash')))) {
              return $send(proc_content, 'each', [], function $$48(k, v){var self = $$48.$$s == null ? this : $$48.$$s;
                if (self.original_atome == null) self.original_atome = nil;

                
                if (k == null) k = nil;
                if (v == null) v = nil;
                return self.original_atome.$send(k, v);}, {$$s: self, $$source_location: ['renderers/html/html.rb', 1774]})
            } else {
              return nil
            };}, {$$s: self, $$source_location: ['renderers/html/html.rb', 1771]});
          dx = event['$[]']("dx");
          dy = event['$[]']("dy");
          x = $rb_plus(($truthy(($ret_or_1 = self.original_atome.$left())) ? ($ret_or_1) : (0)), dx.$to_f());
          y = $rb_plus(($truthy(($ret_or_1 = self.original_atome.$top())) ? ($ret_or_1) : (0)), dy.$to_f());
          restricted_x = [[x, min_left].$max(), max_left].$min();
          restricted_y = [[y, min_top].$max(), max_top].$min();
          return self.$restrict_movement(restricted_x, restricted_y);}, {$$s: self, $$source_location: ['renderers/html/html.rb', 1763]});
      };
      return (self.drag_restrict_already_set = true);} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$source_location: ['renderers/html/html.rb', 1720]});
    
    $def(self, '$drag_start', function $$drag_start(_option) {try { 
      var self = this, interact = nil;

      
      if (!$truthy(self.drag_start_already_set)) {
        
        interact = $$('JS').$eval("return interact('#" + (self.id) + "')");
        $send(interact, 'on', ["dragstart"], function $$49(native_event){var self = $$49.$$s == null ? this : $$49.$$s, drag_starts = nil, event = nil;
          if (self.original_atome == null) self.original_atome = nil;

          
          if (native_event == null) native_event = nil;
          drag_starts = self.original_atome.$instance_variable_get("@drag_code")['$[]']("start");
          event = self.$Native(native_event);
          return $send(drag_starts, 'each', [], function $$50(drag_start){var self = $$50.$$s == null ? this : $$50.$$s, proc_content = nil;

            
            if (drag_start == null) drag_start = nil;
            if ($truthy(self.$event_validation(drag_start))) {
              proc_content = drag_start.$call(event)
            };
            if ($truthy(proc_content['$instance_of?']($$('Hash')))) {
              return $send(proc_content, 'each', [], function $$51(k, v){var self = $$51.$$s == null ? this : $$51.$$s;
                if (self.original_atome == null) self.original_atome = nil;

                
                if (k == null) k = nil;
                if (v == null) v = nil;
                return self.original_atome.$send(k, v);}, {$$s: self, $$source_location: ['renderers/html/html.rb', 1805]})
            } else {
              return nil
            };}, {$$s: self, $$source_location: ['renderers/html/html.rb', 1802]});}, {$$s: self, $$source_location: ['renderers/html/html.rb', 1796]});
      };
      return (self.drag_start_already_set = true);} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$source_location: ['renderers/html/html.rb', 1793]});
    
    $def(self, '$drag_end', function $$drag_end(_option) {try { 
      var self = this, interact = nil;

      
      if (!$truthy(self.drag_end_already_set)) {
        
        interact = $$('JS').$eval("return interact('#" + (self.id) + "')");
        $send(interact, 'on', ["dragend"], function $$52(native_event){var self = $$52.$$s == null ? this : $$52.$$s, drag_ends = nil, event = nil;
          if (self.original_atome == null) self.original_atome = nil;

          
          if (native_event == null) native_event = nil;
          drag_ends = self.original_atome.$instance_variable_get("@drag_code")['$[]']("end");
          event = self.$Native(native_event);
          return $send(drag_ends, 'each', [], function $$53(drag_end){var self = $$53.$$s == null ? this : $$53.$$s, proc_content = nil;

            
            if (drag_end == null) drag_end = nil;
            if ($truthy(self.$event_validation(drag_end))) {
              proc_content = drag_end.$call(event)
            };
            if ($truthy(proc_content['$instance_of?']($$('Hash')))) {
              return $send(proc_content, 'each', [], function $$54(k, v){var self = $$54.$$s == null ? this : $$54.$$s;
                if (self.original_atome == null) self.original_atome = nil;

                
                if (k == null) k = nil;
                if (v == null) v = nil;
                return self.original_atome.$send(k, v);}, {$$s: self, $$source_location: ['renderers/html/html.rb', 1828]})
            } else {
              return nil
            };}, {$$s: self, $$source_location: ['renderers/html/html.rb', 1825]});}, {$$s: self, $$source_location: ['renderers/html/html.rb', 1819]});
      };
      return (self.drag_end_already_set = true);} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$source_location: ['renderers/html/html.rb', 1815]});
    
    $def(self, '$drag_locked', function $$drag_locked(_option) {try { 
      var self = this, interact = nil;

      
      if (!$truthy(self.drag_locked_already_set)) {
        
        interact = $$('JS').$eval("return interact('#" + (self.id) + "')");
        interact.$draggable((new Map([["drag", true], ["inertia", (new Map([["resistance", 12], ["minSpeed", 200], ["endSpeed", 100]]))]])));
        $send(interact, 'on', ["dragmove"], function $$55(native_event){var self = $$55.$$s == null ? this : $$55.$$s, drag_locks = nil, event = nil;
          if (self.original_atome == null) self.original_atome = nil;

          
          if (native_event == null) native_event = nil;
          drag_locks = self.original_atome.$instance_variable_get("@drag_code")['$[]']("locked");
          event = self.$Native(native_event);
          return $send(drag_locks, 'each', [], function $$56(drag_lock){var self = $$56.$$s == null ? this : $$56.$$s, proc_content = nil;

            
            if (drag_lock == null) drag_lock = nil;
            if ($truthy(self.$event_validation(drag_lock))) {
              proc_content = drag_lock.$call(event)
            };
            if ($truthy(proc_content['$instance_of?']($$('Hash')))) {
              return $send(proc_content, 'each', [], function $$57(k, v){var self = $$57.$$s == null ? this : $$57.$$s;
                if (self.original_atome == null) self.original_atome = nil;

                
                if (k == null) k = nil;
                if (v == null) v = nil;
                return self.original_atome.$send(k, v);}, {$$s: self, $$source_location: ['renderers/html/html.rb', 1860]})
            } else {
              return nil
            };}, {$$s: self, $$source_location: ['renderers/html/html.rb', 1857]});}, {$$s: self, $$source_location: ['renderers/html/html.rb', 1850]});
      };
      return (self.drag_locked_already_set = true);} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$source_location: ['renderers/html/html.rb', 1840]});
    
    $def(self, '$remove_this_drag', function $$remove_this_drag(option) {
      var $a, self = this;

      if ($truthy(self.original_atome.$instance_variable_get("@drag_code"))) {
        return ($a = [option, []], $send(self.original_atome.$instance_variable_get("@drag_code"), '[]=', $a), $a[$a.length - 1])
      } else {
        return nil
      }
    }, {$$source_location: ['renderers/html/html.rb', 1871]});
    
    $def(self, '$drag_remove', function $$drag_remove(_opt) {try { var $t_return = $thrower('return'); 
      var self = this, interact = nil, options = nil;

      
      interact = $$('JS').$eval("return interact('#" + (self.id) + "')");
      options = ($truthy(self.original_atome.$instance_variable_get("@drag_code")) && (self.original_atome.$instance_variable_get("@drag_code")['$[]']("remove")));
      return $send(options, 'each', [], function $$58(option){var self = $$58.$$s == null ? this : $$58.$$s;
        if (self.element == null) self.element = nil;

        
        if (option == null) option = nil;
        if ($truthy(option['$instance_of?']($$('Array')))) {
          
          $send(option, 'each', [], function $$59(opt){var self = $$59.$$s == null ? this : $$59.$$s;

            
            if (opt == null) opt = nil;
            return self.$remove_this_drag(opt);}, {$$s: self, $$source_location: ['renderers/html/html.rb', 1886]});
          $t_return.$throw(false, $$58.$$is_lambda);
        };
        self.element['$[]']("style")['$[]=']("cursor", "default");
        self.draggable = nil;
        
        switch (option.valueOf()) {
          case "start":
            return self.$remove_this_drag("start")
          case "end":
          case "stop":
            
            self.$remove_this_drag("end");
            return self.$remove_this_drag("stop");
          case "move":
            return self.$remove_this_drag("move")
          case "locked":
            return self.$remove_this_drag("locked")
          case "restrict":
            return self.$remove_this_drag("restrict")
          default:
            return interact.$draggable(false)
        };}, {$$s: self, $$ret: $t_return, $$source_location: ['renderers/html/html.rb', 1884]});} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        if ($e === $t_return) return $e.$v;
        throw $e;
      } finally {$t_return.is_orphan = true;}
    }, {$$source_location: ['renderers/html/html.rb', 1875]});
    
    $def(self, '$drop_common', function $$drop_common(method, native_event) {try { var $t_return = $thrower('return'); 
      var self = this, event = nil, draggable_element = nil, dropzone_element = nil, proc_contents = nil;

      
      event = self.$Native(native_event);
      draggable_element = event['$[]']("relatedTarget")['$[]']("id").$to_s();
      dropzone_element = event['$[]']("target")['$[]']("id").$to_s();
      proc_contents = self.original_atome.$instance_variable_get("@drop_code")['$[]'](method);
      return $send(proc_contents, 'each', [], function $$60(proc_content){var self = $$60.$$s == null ? this : $$60.$$s;

        
        if (proc_content == null) proc_content = nil;
        if ($truthy(self.$event_validation(proc_content))) {
          proc_content = proc_content.$call((new Map([["source", draggable_element], ["destination", dropzone_element]])))
        };
        if (!$truthy(proc_content['$instance_of?']($$('Hash')))) {
          $t_return.$throw(nil, $$60.$$is_lambda)
        };
        return $send(proc_content, 'each', [], function $$61(k, v){var self = $$61.$$s == null ? this : $$61.$$s;
          if (self.original_atome == null) self.original_atome = nil;

          
          if (k == null) k = nil;
          if (v == null) v = nil;
          return self.original_atome.$send(k, v);}, {$$s: self, $$source_location: ['renderers/html/html.rb', 1925]});}, {$$s: self, $$ret: $t_return, $$source_location: ['renderers/html/html.rb', 1922]});} catch($e) {
        if ($e === $t_return) return $e.$v;
        throw $e;
      } finally {$t_return.is_orphan = true;}
    }, {$$source_location: ['renderers/html/html.rb', 1914]});
    
    $def(self, '$drop_activate', function $$drop_activate(_option) {try { 
      var self = this, interact = nil;

      
      if (!$truthy(self.drop_activate_already_set)) {
        
        interact = $$('JS').$eval("return interact('#" + (self.id) + "')");
        interact.$dropzone((new Map([["accept", nil], ["overlap", 0.75], ["ondropactivate", $send(self, 'lambda', [], function $$62(native_event){var self = $$62.$$s == null ? this : $$62.$$s;

          
          if (native_event == null) native_event = nil;
          return self.$drop_common("activate", native_event);}, {$$s: self, $$source_location: ['renderers/html/html.rb', 1937]})]])));
      };
      return (self.drop_activate_already_set = true);} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$source_location: ['renderers/html/html.rb', 1931]});
    
    $def(self, '$drop_dropped', function $$drop_dropped(_option) {try { 
      var self = this, interact = nil;

      
      if (!$truthy(self.drop_dropped_already_set)) {
        
        interact = $$('JS').$eval("return interact('#" + (self.id) + "')");
        interact.$dropzone((new Map([["overlap", 0.75], ["ondrop", $send(self, 'lambda', [], function $$63(native_event){var self = $$63.$$s == null ? this : $$63.$$s;

          
          if (native_event == null) native_event = nil;
          return self.$drop_common("dropped", native_event);}, {$$s: self, $$source_location: ['renderers/html/html.rb', 1952]})]])));
      };
      return (self.drop_dropped_already_set = true);} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$source_location: ['renderers/html/html.rb', 1946]});
    
    $def(self, '$drop_enter', function $$drop_enter(_option) {try { 
      var self = this, interact = nil;

      
      if (!$truthy(self.drop_enter_already_set)) {
        
        interact = $$('JS').$eval("return interact('#" + (self.id) + "')");
        interact.$dropzone((new Map([["overlap", 0.001], ["ondragenter", $send(self, 'lambda', [], function $$64(native_event){var self = $$64.$$s == null ? this : $$64.$$s;

          
          if (native_event == null) native_event = nil;
          return self.$drop_common("enter", native_event);}, {$$s: self, $$source_location: ['renderers/html/html.rb', 1967]})]])));
      };
      return (self.drop_enter_already_set = true);} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$source_location: ['renderers/html/html.rb', 1961]});
    
    $def(self, '$drop_leave', function $$drop_leave(_option) {try { 
      var self = this, interact = nil;

      
      if (!$truthy(self.drop_leave_already_set)) {
        
        interact = $$('JS').$eval("return interact('#" + (self.id) + "')");
        interact.$dropzone((new Map([["ondragleave", $send(self, 'lambda', [], function $$65(native_event){var self = $$65.$$s == null ? this : $$65.$$s;

          
          if (native_event == null) native_event = nil;
          return self.$drop_common("leave", native_event);}, {$$s: self, $$source_location: ['renderers/html/html.rb', 1980]})]])));
      };
      return (self.drop_leave_already_set = true);} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$source_location: ['renderers/html/html.rb', 1975]});
    
    $def(self, '$drop_deactivate', function $$drop_deactivate(_option) {try { 
      var self = this, interact = nil;

      
      if (!$truthy(self.drop_remove_already_set)) {
        
        interact = $$('JS').$eval("return interact('#" + (self.id) + "')");
        interact.$dropzone((new Map([["ondropdeactivate", $send(self, 'lambda', [], function $$66(native_event){var self = $$66.$$s == null ? this : $$66.$$s;

          
          if (native_event == null) native_event = nil;
          return self.$drop_common("deactivate", native_event);}, {$$s: self, $$source_location: ['renderers/html/html.rb', 1997]})]])));
      };
      return (self.drop_remove_already_set = true);} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$source_location: ['renderers/html/html.rb', 1990]});
    
    $def(self, '$drop_remove', function $$drop_remove(option) {
      var $a, self = this;

      
      switch (option.valueOf()) {
        case "activate":
          return ($a = ["activate", []], $send(self.original_atome.$instance_variable_get("@drop_code"), '[]=', $a), $a[$a.length - 1])
        case "deactivate":
          return ($a = ["deactivate", []], $send(self.original_atome.$instance_variable_get("@drop_code"), '[]=', $a), $a[$a.length - 1])
        case "dropped":
          return ($a = ["dropped", []], $send(self.original_atome.$instance_variable_get("@drop_code"), '[]=', $a), $a[$a.length - 1])
        case "enter":
          return ($a = ["enter", []], $send(self.original_atome.$instance_variable_get("@drop_code"), '[]=', $a), $a[$a.length - 1])
        case "leave":
          return ($a = ["leave", []], $send(self.original_atome.$instance_variable_get("@drop_code"), '[]=', $a), $a[$a.length - 1])
        default:
          
          self.$drop_remove("activate");
          self.$drop_remove("deactivate");
          self.$drop_remove("dropped");
          self.$drop_remove("enter");
          return self.$drop_remove("leave");
      }
    }, {$$source_location: ['renderers/html/html.rb', 2006]});
    
    $def(self, '$resize', function $$resize(params, options) {try { 
      var self = this, interact = nil, min_width = nil, $ret_or_1 = nil, min_height = nil, max_width = nil, max_height = nil;

      
      interact = $$('JS').$eval("return interact('#" + (self.id) + "')");
      if ($eqeq(params, "remove")) {
        
        self.resize = "";
        return interact.$resizable(false);
      } else {
        
        min_width = ($truthy(($ret_or_1 = options['$[]']("min")['$[]']("width"))) ? ($ret_or_1) : (10));
        min_height = ($truthy(($ret_or_1 = options['$[]']("min")['$[]']("height"))) ? ($ret_or_1) : (10));
        max_width = ($truthy(($ret_or_1 = options['$[]']("max")['$[]']("width"))) ? ($ret_or_1) : (3000));
        max_height = ($truthy(($ret_or_1 = options['$[]']("max")['$[]']("height"))) ? ($ret_or_1) : (3000));
        self.resize = self.original_atome.$instance_variable_get("@resize_code")['$[]']("resize");
        return interact.$resizable((new Map([["edges", (new Map([["left", true], ["right", true], ["top", true], ["bottom", true]]))], ["inertia", true], ["modifiers", []], ["listeners", (new Map([["move", $send(self, 'lambda', [], function $$67(native_event){var self = $$67.$$s == null ? this : $$67.$$s, event = nil, proc_content = nil, x = nil, y = nil, width = nil, height = nil;
          if (self.resize == null) self.resize = nil;
          if (self.element == null) self.element = nil;
          if (self.original_atome == null) self.original_atome = nil;

          
          if (native_event == null) native_event = nil;
          $$('Universe')['$allow_tool_operations='](false);
          event = self.$Native(native_event);
          if ($truthy(self.$event_validation(self.resize))) {
            proc_content = self.resize.$call(event)
          };
          if ($truthy(proc_content['$instance_of?']($$('Hash')))) {
            $send(proc_content, 'each', [], function $$68(k, v){var self = $$68.$$s == null ? this : $$68.$$s;
              if (self.original_atome == null) self.original_atome = nil;

              
              if (k == null) k = nil;
              if (v == null) v = nil;
              return self.original_atome.$send(k, v);}, {$$s: self, $$source_location: ['renderers/html/html.rb', 2055]})
          };
          x = ($truthy(($ret_or_1 = self.element['$[]']("offsetLeft").$to_i())) ? ($ret_or_1) : (0));
          y = ($truthy(($ret_or_1 = self.element['$[]']("offsetTop").$to_i())) ? ($ret_or_1) : (0));
          width = event['$[]']("rect")['$[]']("width");
          height = event['$[]']("rect")['$[]']("height");
          x = $rb_plus(x, event['$[]']("deltaRect")['$[]']("left").$to_f());
          y = $rb_plus(y, event['$[]']("deltaRect")['$[]']("top").$to_f());
          if ($truthy(width.$to_i()['$between?'](min_width, max_width))) {
            self.original_atome.$width(width.$to_i())
          };
          if ($truthy(height.$to_i()['$between?'](min_height, max_height))) {
            self.original_atome.$height(height.$to_i())
          };
          self.original_atome.$left(x);
          return self.original_atome.$top(y);}, {$$s: self, $$source_location: ['renderers/html/html.rb', 2049]})]]))]])));
      };} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$source_location: ['renderers/html/html.rb', 2028]});
    
    $def(self, '$overflow', function $$overflow(params, _bloc) {
      var self = this;

      
      self.$style("overflow", params);
      self.overflow = self.original_atome.$instance_variable_get("@overflow_code")['$[]']("overflow");
      return self.element.$addEventListener("scroll", $send(self, 'lambda', [], function $$69(native_event){var self = $$69.$$s == null ? this : $$69.$$s, scroll_top = nil, scroll_left = nil, proc_content = nil;
        if (self.element == null) self.element = nil;
        if (self.overflow == null) self.overflow = nil;

        
        if (native_event == null) native_event = nil;
        scroll_top = self.element['$[]']("scrollTop").$to_i();
        scroll_left = self.element['$[]']("scrollLeft").$to_i();
        if ($truthy(self.$event_validation(self.overflow))) {
          self.overflow.$call((new Map([["left", scroll_left], ["top", scroll_top]])))
        };
        if ($truthy(self.$event_validation(self.overflow))) {
          proc_content = self.overflow.$call((new Map([["left", scroll_left], ["top", scroll_top]])))
        };
        if ($truthy(proc_content['$instance_of?']($$('Hash')))) {
          return $send(proc_content, 'each', [], function $$70(k, v){var self = $$70.$$s == null ? this : $$70.$$s;
            if (self.original_atome == null) self.original_atome = nil;

            
            if (k == null) k = nil;
            if (v == null) v = nil;
            return self.original_atome.$send(k, v);}, {$$s: self, $$source_location: ['renderers/html/html.rb', 2094]})
        } else {
          return nil
        };}, {$$s: self, $$source_location: ['renderers/html/html.rb', 2084]}));
    }, {$$source_location: ['renderers/html/html.rb', 2081]});
    
    $def(self, '$over_over', function $$over_over(_option) {
      var self = this;

      
      if ($truthy(self.over_over_already_set)) {
        return nil
      };
      $send(self.element, 'addEventListener', ["mouseover"], function $$71(native_event){var self = $$71.$$s == null ? this : $$71.$$s, over_options = nil, event = nil;
        if (self.original_atome == null) self.original_atome = nil;

        
        if (native_event == null) native_event = nil;
        over_options = self.original_atome.$instance_variable_get("@over_code")['$[]']("flyover");
        event = self.$Native(native_event);
        return $send(over_options, 'each', [], function $$72(over_option){var self = $$72.$$s == null ? this : $$72.$$s, proc_content = nil;

          
          if (over_option == null) over_option = nil;
          if ($truthy(self.$event_validation(over_option))) {
            proc_content = over_option.$call(event)
          };
          if ($truthy(proc_content['$instance_of?']($$('Hash')))) {
            return $send(proc_content, 'each', [], function $$73(k, v){var self = $$73.$$s == null ? this : $$73.$$s;
              if (self.original_atome == null) self.original_atome = nil;

              
              if (k == null) k = nil;
              if (v == null) v = nil;
              return self.original_atome.$send(k, v);}, {$$s: self, $$source_location: ['renderers/html/html.rb', 2109]})
          } else {
            return nil
          };}, {$$s: self, $$source_location: ['renderers/html/html.rb', 2106]});}, {$$s: self, $$source_location: ['renderers/html/html.rb', 2103]});
      return (self.over_over_already_set = true);
    }, {$$source_location: ['renderers/html/html.rb', 2101]});
    
    $def(self, '$over_enter', function $$over_enter(_option) {
      var self = this;

      
      if ($truthy(self.over_enter_already_set)) {
        return nil
      };
      $send(self.element, 'addEventListener', ["mouseenter"], function $$74(native_event){var self = $$74.$$s == null ? this : $$74.$$s, over_options = nil, event = nil;
        if (self.original_atome == null) self.original_atome = nil;

        
        if (native_event == null) native_event = nil;
        over_options = self.original_atome.$instance_variable_get("@over_code")['$[]']("enter");
        event = self.$Native(native_event);
        return $send(over_options, 'each', [], function $$75(over_option){var self = $$75.$$s == null ? this : $$75.$$s, proc_content = nil;

          
          if (over_option == null) over_option = nil;
          if ($truthy(self.$event_validation(over_option))) {
            proc_content = over_option.$call(event)
          };
          if ($truthy(proc_content['$instance_of?']($$('Hash')))) {
            return $send(proc_content, 'each', [], function $$76(k, v){var self = $$76.$$s == null ? this : $$76.$$s;
              if (self.original_atome == null) self.original_atome = nil;

              
              if (k == null) k = nil;
              if (v == null) v = nil;
              return self.original_atome.$send(k, v);}, {$$s: self, $$source_location: ['renderers/html/html.rb', 2147]})
          } else {
            return nil
          };}, {$$s: self, $$source_location: ['renderers/html/html.rb', 2144]});}, {$$s: self, $$source_location: ['renderers/html/html.rb', 2141]});
      return (self.over_enter_already_set = true);
    }, {$$source_location: ['renderers/html/html.rb', 2139]});
    
    $def(self, '$over_leave', function $$over_leave(_option) {
      var self = this;

      
      if ($truthy(self.over_leave_already_set)) {
        return nil
      };
      $send(self.element, 'addEventListener', ["mouseleave"], function $$77(native_event){var self = $$77.$$s == null ? this : $$77.$$s, over_leaves = nil, event = nil;
        if (self.original_atome == null) self.original_atome = nil;

        
        if (native_event == null) native_event = nil;
        over_leaves = self.original_atome.$instance_variable_get("@over_code")['$[]']("leave");
        event = self.$Native(native_event);
        return $send(over_leaves, 'each', [], function $$78(over_leave){var self = $$78.$$s == null ? this : $$78.$$s, proc_content = nil;

          
          if (over_leave == null) over_leave = nil;
          if ($truthy(self.$event_validation(over_leave))) {
            proc_content = over_leave.$call(event)
          };
          if ($truthy(proc_content['$instance_of?']($$('Hash')))) {
            return $send(proc_content, 'each', [], function $$79(k, v){var self = $$79.$$s == null ? this : $$79.$$s;
              if (self.original_atome == null) self.original_atome = nil;

              
              if (k == null) k = nil;
              if (v == null) v = nil;
              return self.original_atome.$send(k, v);}, {$$s: self, $$source_location: ['renderers/html/html.rb', 2187]})
          } else {
            return nil
          };}, {$$s: self, $$source_location: ['renderers/html/html.rb', 2184]});}, {$$s: self, $$source_location: ['renderers/html/html.rb', 2181]});
      return (self.over_leave_already_set = true);
    }, {$$source_location: ['renderers/html/html.rb', 2179]});
    
    $def(self, '$over_remove', function $$over_remove(option) {
      var $a, self = this;

      
      switch (option.valueOf()) {
        case "enter":
          return ($a = ["enter", []], $send(self.original_atome.$instance_variable_get("@over_code"), '[]=', $a), $a[$a.length - 1])
        case "leave":
          return ($a = ["leave", []], $send(self.original_atome.$instance_variable_get("@over_code"), '[]=', $a), $a[$a.length - 1])
        case "over":
          return ($a = ["flyover", []], $send(self.original_atome.$instance_variable_get("@over_code"), '[]=', $a), $a[$a.length - 1])
        default:
          
          self.$over_remove("enter");
          self.$over_remove("leave");
          return self.$over_remove("over");
      }
    }, {$$source_location: ['renderers/html/html.rb', 2196]});
    
    $def(self, '$event_validation', function $$event_validation(action_proc) {
      var self = this, $ret_or_1 = nil, $ret_or_2 = nil;

      if ($truthy(($ret_or_1 = action_proc['$is_a?']($$('Proc'))))) {
        
        if ($truthy(($ret_or_2 = $$('Universe').$edit_mode()['$!']()))) {
          return $ret_or_2
        } else {
          return self.original_atome.$tag()['$[]']("system")
        };
      } else {
        return $ret_or_1
      }
    }, {$$source_location: ['renderers/html/html.rb', 2211]});
    
    $def(self, '$untouchable', function $$untouchable() {
      var $a, self = this;

      return ($a = ["pointerEvents", "none"], $send(self.element['$[]']("style"), '[]=', $a), $a[$a.length - 1])
    }, {$$source_location: ['renderers/html/html.rb', 2215]});
    
    $def(self, '$setup_touch_event', function $$setup_touch_event(event_type, _option) {try { 
      var self = this, instance_variable = nil, interact = nil;

      
      instance_variable = "@touch_" + (event_type) + "_already_set";
      if (!$truthy(self.$instance_variable_get(instance_variable))) {
        
        self.element['$[]']("style")['$[]=']("cursor", "pointer");
        interact = $$('JS').$eval("return interact('#" + (self.id) + "')");
        $send(interact, 'on', [event_type], function $$80(native_event){var self = $$80.$$s == null ? this : $$80.$$s, touch_event = nil, touch_needed = nil;
          if (self.original_atome == null) self.original_atome = nil;

          
          if (native_event == null) native_event = nil;
          touch_event = self.$Native(native_event);
          touch_needed = self.original_atome.$instance_variable_get("@touch_code")['$[]'](event_type.$to_sym());
          return $send(touch_needed, 'each', [], function $$81(proc_found){var self = $$81.$$s == null ? this : $$81.$$s, proc_content = nil;

            
            if (proc_found == null) proc_found = nil;
            if ($truthy(self.$event_validation(proc_found))) {
              proc_content = proc_found.$call(touch_event)
            };
            if ($truthy(proc_content['$instance_of?']($$('Hash')))) {
              return $send(proc_content, 'each', [], function $$82(k, v){var self = $$82.$$s == null ? this : $$82.$$s;
                if (self.original_atome == null) self.original_atome = nil;

                
                if (k == null) k = nil;
                if (v == null) v = nil;
                return self.original_atome.$send(k, v);}, {$$s: self, $$source_location: ['renderers/html/html.rb', 2231]})
            } else {
              return nil
            };}, {$$s: self, $$source_location: ['renderers/html/html.rb', 2228]});}, {$$s: self, $$source_location: ['renderers/html/html.rb', 2224]});
      };
      return self.$instance_variable_set(instance_variable, true);} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$source_location: ['renderers/html/html.rb', 2219]});
    
    $def(self, '$touch_down', function $$touch_down(option) {
      var self = this;

      return self.$setup_touch_event("down", option)
    }, {$$source_location: ['renderers/html/html.rb', 2241]});
    
    $def(self, '$touch_up', function $$touch_up(option) {
      var self = this;

      return self.$setup_touch_event("up", option)
    }, {$$source_location: ['renderers/html/html.rb', 2245]});
    
    $def(self, '$touch_tap', function $$touch_tap(option) {
      var self = this;

      return self.$setup_touch_event("tap", option)
    }, {$$source_location: ['renderers/html/html.rb', 2249]});
    
    $def(self, '$touch_double', function $$touch_double(option) {
      var self = this;

      return self.$setup_touch_event("doubletap", option)
    }, {$$source_location: ['renderers/html/html.rb', 2253]});
    
    $def(self, '$touch_long', function $$touch_long(option) {
      var self = this;

      return self.$setup_touch_event("hold", option)
    }, {$$source_location: ['renderers/html/html.rb', 2257]});
    
    $def(self, '$remove_this_touch', function $$remove_this_touch(option) {
      var $a, self = this;

      if ($truthy(self.original_atome.$instance_variable_get("@touch_code"))) {
        return ($a = [option, []], $send(self.original_atome.$instance_variable_get("@touch_code"), '[]=', $a), $a[$a.length - 1])
      } else {
        return nil
      }
    }, {$$source_location: ['renderers/html/html.rb', 2300]});
    
    $def(self, '$touch_remove', function $$touch_remove(_opt) {
      var self = this, option = nil;

      
      option = ($truthy(self.original_atome.$instance_variable_get("@touch_code")) && (self.original_atome.$instance_variable_get("@touch_code")['$[]']("remove")));
      self.element['$[]']("style")['$[]=']("cursor", "default");
      
      switch (option.valueOf()) {
        case "double":
          return self.$remove_this_touch("double")
        case "doubletap":
          return self.$remove_this_touch("doubletap")
        case "down":
          return self.$remove_this_touch("down")
        case "long":
          return self.$remove_this_touch("long")
        case "tap":
          return self.$remove_this_touch("tap")
        case "hold":
          return self.$remove_this_touch("hold")
        case "touch":
          return self.$remove_this_touch("touch")
        case "tap":
          return self.$remove_this_touch("tap")
        case "up":
          return self.$remove_this_touch("up")
        default:
          
          self.$remove_this_touch("double");
          self.$remove_this_touch("doubletap");
          self.$remove_this_touch("tap");
          self.$remove_this_touch("down");
          self.$remove_this_touch("long");
          self.$remove_this_touch("touch");
          self.$remove_this_touch("hold");
          self.$remove_this_touch("double");
          return self.$remove_this_touch("up");
      };
    }, {$$source_location: ['renderers/html/html.rb', 2304]});
    
    $def(self, '$internet', function $$internet() {try { 
      
      return $$('JS').$eval("return navigator.onLine")} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$source_location: ['renderers/html/html.rb', 2345]});
    
    $def(self, '$terminal', function $$terminal(id, cmd) {try { 
      var self = this;

      if ($eqeq($$('Atome').$host(), "tauri")) {
        return $$('JS').$eval("terminal('" + (id) + "','" + (cmd) + "')")
      } else {
        return $send($$('A'), 'message', [(new Map([["data", cmd], ["action", "terminal"]]))], function $$83(result){var self = $$83.$$s == null ? this : $$83.$$s, proc_found = nil, string_found = nil, converted_string = nil;
          if (self.original_atome == null) self.original_atome = nil;

          
          if (result == null) result = nil;
          proc_found = self.original_atome.$terminal_code()['$[]']("terminal");
          string_found = result['$[]']("data");
          string_found = string_found.$gsub("\\x23", "#");
          converted_string = $send(string_found, 'gsub', [/<<(\w+)\n(.*?)\n\1/m], function $$84(){var $a, marker = nil, content = nil;

            
            marker = (($a = $gvars['~']) === nil ? nil : $a['$[]'](1));
            content = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2));
            return "\"" + (content.$gsub(/\n/, "\\n")) + "\"";}, {$$source_location: ['renderers/html/html.rb', 2358]});
          if ($truthy(proc_found['$is_a?']($$('Proc')))) {
            return proc_found.$call(converted_string)
          } else {
            return nil
          };}, {$$s: self, $$source_location: ['renderers/html/html.rb', 2354]})
      }} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$source_location: ['renderers/html/html.rb', 2349]});
    
    $def(self, '$read', function $$read(id, file) {try { 
      var self = this;

      if ($eqeq($$('Atome').$host(), "tauri")) {
        return $$('JS').$eval("readFile('" + (id) + "','" + (file) + "')")
      } else {
        return $send($$('A'), 'message', [(new Map([["data", (new Map([["source", file], ["operation", "read"]]))], ["action", "file"]]))], function $$85(result){var self = $$85.$$s == null ? this : $$85.$$s, proc_found = nil, string_found = nil, converted_string = nil;
          if (self.original_atome == null) self.original_atome = nil;

          
          if (result == null) result = nil;
          proc_found = self.original_atome.$instance_variable_get("@read_code")['$[]']("read");
          string_found = $$('JSON').$parse(result['$[]']("data"));
          string_found = string_found.$gsub("\\x23", "#");
          converted_string = $send(string_found, 'gsub', [/<<(\w+)\n(.*?)\n\1/m], function $$86(){var $a, marker = nil, content = nil;

            
            marker = (($a = $gvars['~']) === nil ? nil : $a['$[]'](1));
            content = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2));
            return "\"" + (content.$gsub(/\n/, "\\n")) + "\"";}, {$$source_location: ['renderers/html/html.rb', 2381]});
          if ($truthy(proc_found['$is_a?']($$('Proc')))) {
            return proc_found.$call(converted_string)
          } else {
            return nil
          };}, {$$s: self, $$source_location: ['renderers/html/html.rb', 2377]})
      }} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$source_location: ['renderers/html/html.rb', 2373]});
    
    $def(self, '$write', function $$write(id, file) {try { 
      var self = this;

      if ($eqeq($$('Atome').$host(), "tauri")) {
        return $$('JS').$eval("writeFile('" + (id) + "','" + (file['$[]']("name")) + "','" + (file['$[]']("content")) + "')")
      } else {
        return $send($$('A'), 'message', [(new Map([["data", (new Map([["source", file], ["operation", "write"]]))], ["action", "file"]]))], function $$87(result){var self = $$87.$$s == null ? this : $$87.$$s, proc_found = nil, string_found = nil, converted_string = nil;
          if (self.original_atome == null) self.original_atome = nil;

          
          if (result == null) result = nil;
          proc_found = self.original_atome.$instance_variable_get("@write_code")['$[]']("write");
          string_found = $$('JSON').$parse(result['$[]']("data"));
          string_found = string_found.$gsub("\\x23", "#");
          converted_string = $send(string_found, 'gsub', [/<<(\w+)\n(.*?)\n\1/m], function $$88(){var $a, marker = nil, content = nil;

            
            marker = (($a = $gvars['~']) === nil ? nil : $a['$[]'](1));
            content = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2));
            return "\"" + (content.$gsub(/\n/, "\\n")) + "\"";}, {$$source_location: ['renderers/html/html.rb', 2402]});
          if ($truthy(proc_found['$is_a?']($$('Proc')))) {
            return proc_found.$call(converted_string)
          } else {
            return nil
          };}, {$$s: self, $$source_location: ['renderers/html/html.rb', 2398]})
      }} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$source_location: ['renderers/html/html.rb', 2393]});
    
    $def(self, '$browse', function $$browse(id, file) {try { 
      var self = this;

      if ($eqeq($$('Atome').$host(), "tauri")) {
        return $$('JS').$eval("browseFile('" + (id) + "','" + (file) + "')")
      } else {
        return self.$puts("browse file in progress in server mode")
      }} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$source_location: ['renderers/html/html.rb', 2412]});
    
    $def(self, '$handle_input', function $$handle_input() {
      var self = this;

      return self.original_atome.$instance_variable_set("@data", self.element['$[]']("innerText").$to_s())
    }, {$$source_location: ['renderers/html/html.rb', 2420]});
    
    $def(self, '$update_data', function $$update_data(params) {
      var self = this, $ret_or_1 = nil;

      
      self.input_listener = ($truthy(($ret_or_1 = self.input_listener)) ? ($ret_or_1) : ($send(self, 'lambda', [], function $$89(event){var self = $$89.$$s == null ? this : $$89.$$s;

        
        if (event == null) event = nil;
        return self.$handle_input();}, {$$s: self, $$source_location: ['renderers/html/html.rb', 2427]})));
      if ($truthy(params)) {
        return $send(self.element, 'addEventListener', ["input"], self.input_listener.$to_proc())
      } else {
        return $send(self.element, 'removeEventListener', ["input"], self.input_listener.$to_proc())
      };
    }, {$$source_location: ['renderers/html/html.rb', 2425]});
    
    $def(self, '$animate', function $$animate(animation_properties) {try { 
      var self = this, prop = nil, command = nil;

      
      prop = animation_properties['$[]']("particle");
      command = "          var target_div = document.getElementById('" + (self.id) + "');\n" + "          window.currentAnimation = popmotion.animate({\n" + "            from: " + (animation_properties['$[]']("from")) + ",\n" + "            to: " + (animation_properties['$[]']("to")) + ",\n" + "            duration: " + (animation_properties['$[]']("duration")) + ",\n" + "            onUpdate: function(v) {\n" + "atomeJsToRuby(\"grab('" + (self.id) + "').animation_callback('" + (prop) + "', \"+v+\")\")\n" + "      atomeJsToRuby(\"grab('" + (self.id) + "')." + (prop) + "(\"+v+\")\")\n" + "            },\n" + "            onComplete: function(v) {\n" + "              window.currentAnimation = null;\n" + "atomeJsToRuby(\"grab('" + (self.id) + "').animation_callback('" + (prop) + "_end')\")\n" + "            }\n" + "          });\n";
      return $$('JS').$eval(command);} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$source_location: ['renderers/html/html.rb', 2436]});
    
    $def(self, '$stop_animation', function $$stop_animation() {try { 
      
      return $$('JS').$eval("if (window.currentAnimation) window.currentAnimation.stop();")} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$source_location: ['renderers/html/html.rb', 2457]});
    
    $def(self, '$table', function $$table(data) {
      var self = this, table_html = nil, thead = nil, max_length = nil, header_row = nil, tbody = nil;

      
      table_html = $$('JS').$global()['$[]']("document").$createElement("table");
      thead = $$('JS').$global()['$[]']("document").$createElement("thead");
      max_length = $send(data, 'max_by', [], function $$90(row){
        
        if (row == null) row = nil;
        return row.$keys().$length();}, {$$source_location: ['renderers/html/html.rb', 2468]}).$keys().$length();
      if ($truthy(self.original_atome.$option()['$[]']("header"))) {
        
        header_row = $$('JS').$global()['$[]']("document").$createElement("tr");
        $send(max_length, 'times', [], function $$91(i){var th = nil, $ret_or_1 = nil;

          
          if (i == null) i = nil;
          th = $$('JS').$global()['$[]']("document").$createElement("th");
          th['$[]=']("textContent", ($truthy(($ret_or_1 = $send(data, 'map', [], function $$92(row){
            
            if (row == null) row = nil;
            return row.$keys()['$[]'](i).$to_s();}, {$$source_location: ['renderers/html/html.rb', 2475]}).$compact().$first())) ? ($ret_or_1) : ("")));
          return header_row.$appendChild(th);}, {$$source_location: ['renderers/html/html.rb', 2473]});
        thead.$appendChild(header_row);
      };
      table_html.$appendChild(thead);
      tbody = $$('JS').$global()['$[]']("document").$createElement("tbody");
      $send(data, 'each_with_index', [], function $$93(row, _row_index){var self = $$93.$$s == null ? this : $$93.$$s, tr = nil;

        
        if (row == null) row = nil;
        if (_row_index == null) _row_index = nil;
        tr = $$('JS').$global()['$[]']("document").$createElement("tr");
        $send(max_length, 'times', [], function $$94(cell_index){var self = $$94.$$s == null ? this : $$94.$$s, td = nil, cell_size = nil, cell_height = nil, cell_value = nil, html_element = nil;

          
          if (cell_index == null) cell_index = nil;
          td = $$('JS').$global()['$[]']("document").$createElement("td");
          cell_size = self.$set_td_style(td);
          cell_height = cell_size['$[]']("cell_height");
          cell_value = row.$values()['$[]'](cell_index);
          if ($truthy(cell_value['$instance_of?']($$('Atome')))) {
            
            cell_value.$fit(cell_height);
            html_element = $$('JS').$global()['$[]']("document").$getElementById(cell_value.$id().$to_s());
            td.$appendChild(html_element);
            html_element['$[]']("style")['$[]=']("transformOrigin", "top left");
            html_element['$[]']("style")['$[]=']("position", "relative");
            cell_value.$top(0);
            cell_value.$left(0);
          } else {
            td['$[]=']("textContent", cell_value.$to_s())
          };
          return tr.$appendChild(td);}, {$$s: self, $$source_location: ['renderers/html/html.rb', 2487]});
        return tbody.$appendChild(tr);}, {$$s: self, $$source_location: ['renderers/html/html.rb', 2484]});
      table_html.$appendChild(tbody);
      return $$('JS').$global()['$[]']("document").$querySelector("#" + (self.id)).$appendChild(table_html);
    }, {$$source_location: ['renderers/html/html.rb', 2463]});
    
    $def(self, '$handle_atome', function $$handle_atome(atome, td_element) {
      var self = this, html_element = nil;

      
      atome.$fit(self.$cell_height());
      html_element = $$('JS').$global()['$[]']("document").$getElementById(atome.$id().$to_s());
      td_element.$appendChild(html_element);
      html_element['$[]']("style")['$[]=']("transformOrigin", "top left");
      html_element['$[]']("style")['$[]=']("position", "relative");
      atome.$top(0);
      return atome.$left(0);
    }, {$$source_location: ['renderers/html/html.rb', 2514]});
    
    $def(self, '$refresh_table', function $$refresh_table(_params) {
      var self = this, data = nil, table_element = nil, max_cells = nil;

      
      data = self.original_atome.$data();
      $send(data, 'each', [], function $$95(row){
        
        if (row == null) row = nil;
        return $send(row, 'each', [], function $$96(k, v){
          
          if (k == null) k = nil;
          if (v == null) v = nil;
          if ($truthy(v['$instance_of?']($$('Atome')))) {
            return v.$attach("view")
          } else {
            return nil
          };}, {$$source_location: ['renderers/html/html.rb', 2528]});}, {$$source_location: ['renderers/html/html.rb', 2527]});
      table_element = $$('JS').$global()['$[]']("document").$querySelector("#" + (self.id) + " table");
      if ($truthy(table_element['$nil?']())) {
        
        self.$puts("Table not found");
        return nil;
      };
      $send($rb_minus(table_element['$[]']("rows").$to_a().$length(), 1), 'downto', [1], function $$97(i){
        
        if (i == null) i = nil;
        return table_element.$deleteRow(i);}, {$$source_location: ['renderers/html/html.rb', 2537]});
      max_cells = $send(data, 'map', [], function $$98(row){
        
        if (row == null) row = nil;
        return row.$keys().$length();}, {$$source_location: ['renderers/html/html.rb', 2541]}).$max();
      return $send(data, 'each', [], function $$99(row){var self = $$99.$$s == null ? this : $$99.$$s, new_row = nil;

        
        if (row == null) row = nil;
        new_row = table_element.$insertRow(-1);
        return $send(max_cells, 'times', [], function $$100(i){var self = $$100.$$s == null ? this : $$100.$$s, key = nil, value = nil, cell = nil, html_element = nil;

          
          if (i == null) i = nil;
          key = row.$keys()['$[]'](i);
          value = row['$[]'](key);
          cell = new_row.$insertCell(-1);
          if ($truthy(value['$instance_of?']($$('Atome')))) {
            
            html_element = $$('JS').$global()['$[]']("document").$getElementById(value.$id().$to_s());
            cell.$appendChild(html_element);
          } else {
            cell['$[]=']("textContent", value.$to_s())
          };
          return self.$set_td_style(cell);}, {$$s: self, $$source_location: ['renderers/html/html.rb', 2545]});}, {$$s: self, $$source_location: ['renderers/html/html.rb', 2543]});
    }, {$$source_location: ['renderers/html/html.rb', 2524]});
    
    $def(self, '$set_td_style', function $$set_td_style(td) {
      var self = this, cell_height = nil, cell_width = nil;

      
      cell_height = self.original_atome.$component()['$[]']("height");
      cell_width = self.original_atome.$component()['$[]']("width");
      td['$[]']("style")['$[]=']("backgroundColor", "white");
      td['$[]']("style")['$[]=']("width", "" + (cell_width) + "px");
      td['$[]']("style")['$[]=']("min-width", "" + (cell_width) + "px");
      td['$[]']("style")['$[]=']("max-width", "" + (cell_height) + "px");
      td['$[]']("style")['$[]=']("min-height", "" + (cell_height) + "px");
      td['$[]']("style")['$[]=']("max-height", "" + (cell_height) + "px");
      td['$[]']("style")['$[]=']("height", "" + (cell_height) + "px");
      td['$[]']("style")['$[]=']("overflow", "hidden");
      return (new Map([["cell_height", cell_height], ["cell_width", cell_width]]));
    }, {$$source_location: ['renderers/html/html.rb', 2560]});
    
    $def(self, '$insert_cell', function $$insert_cell(params) {
      var $a, $b, self = this, row_index = nil, cell_index = nil, new_content = nil, container = nil, table = nil, row = nil, cell = nil, html_element = nil;

      
      $b = params['$[]']("cell"), $a = $to_ary($b), (row_index = ($a[0] == null ? nil : $a[0])), (cell_index = ($a[1] == null ? nil : $a[1])), $b;
      new_content = params['$[]']("content");
      container = $$('JS').$global()['$[]']("document").$getElementById(self.id.$to_s());
      table = container.$querySelector("table");
      if ($truthy(table['$nil?']())) {
        
        self.$puts("No table found in the container");
        return nil;
      };
      row = table.$querySelectorAll("tr")['$[]'](row_index);
      if ($truthy(row['$nil?']())) {
        
        self.$puts("Row at index " + (row_index) + " not found");
        return nil;
      };
      cell = row.$querySelectorAll("td")['$[]'](cell_index);
      if ($truthy(cell['$nil?']())) {
        
        self.$puts("Cell at index " + (cell_index) + " in row " + (row_index) + " not found");
        return nil;
      };
      if ($truthy(new_content['$instance_of?']($$('Atome')))) {
        
        cell['$innerHTML=']("");
        html_element = $$('JS').$global()['$[]']("document").$getElementById(new_content.$id().$to_s());
        return cell.$appendChild(html_element);
      } else {
        return ($a = ["textContent", new_content.$to_s()], $send(cell, '[]=', $a), $a[$a.length - 1])
      };
    }, {$$source_location: ['renderers/html/html.rb', 2574]});
    
    $def(self, '$insert_row', function $$insert_row(params) {
      var self = this, insert_at_index = nil, table_element = nil, tbody = nil, header_row = nil, column_count = nil, new_row = nil, reference_row = nil;

      
      insert_at_index = params['$[]']("row");
      table_element = $$('JS').$global()['$[]']("document").$querySelector("#" + (self.id) + " table");
      if ($truthy(table_element['$nil?']())) {
        
        self.$puts("Tableau non trouvé");
        return nil;
      };
      tbody = table_element.$querySelector("tbody");
      header_row = table_element.$querySelector("thead tr");
      column_count = ($truthy(header_row) ? (header_row.$querySelectorAll("th").$to_a().$length()) : (0));
      new_row = $$('JS').$global()['$[]']("document").$createElement("tr");
      $send(column_count, 'times', [], function $$101(cell_index){var self = $$101.$$s == null ? this : $$101.$$s, td = nil;

        
        if (cell_index == null) cell_index = nil;
        td = $$('JS').$global()['$[]']("document").$createElement("td");
        self.$set_td_style(td);
        return new_row.$appendChild(td);}, {$$s: self, $$source_location: ['renderers/html/html.rb', 2621]});
      if ($truthy(insert_at_index['$zero?']())) {
        return tbody.$insertBefore(new_row, tbody.$firstChild())
      } else {
        
        reference_row = tbody.$querySelectorAll("tr").$to_a()['$[]'](insert_at_index);
        return tbody.$insertBefore(new_row, reference_row);
      };
    }, {$$source_location: ['renderers/html/html.rb', 2606]});
    
    $def(self, '$insert_column', function $$insert_column(params) {
      var self = this, insert_at_index = nil, table_element = nil, rows = nil;

      
      insert_at_index = params['$[]']("column");
      table_element = $$('JS').$global()['$[]']("document").$querySelector("#" + (self.id) + " table");
      if ($truthy(table_element['$nil?']())) {
        
        self.$puts("Table not found");
        return nil;
      };
      rows = table_element.$querySelectorAll("tr").$to_a();
      return $send(rows, 'each_with_index', [], function $$102(row, index){var self = $$102.$$s == null ? this : $$102.$$s, new_cell = nil, child_nodes = nil, reference_cell = nil;

        
        if (row == null) row = nil;
        if (index == null) index = nil;
        if ($eqeq(index, 0)) {
          return nil
        } else {
          
          new_cell = $$('JS').$global()['$[]']("document").$createElement("td");
          new_cell['$[]=']("innerText", "");
          self.$set_td_style(new_cell);
          if ($truthy(insert_at_index['$zero?']())) {
            return row.$insertBefore(new_cell, row.$firstChild())
          } else {
            
            child_nodes = row.$querySelectorAll("td").$to_a();
            if ($truthy($rb_lt(insert_at_index, child_nodes.$length()))) {
              
              reference_cell = child_nodes['$[]'](insert_at_index);
              return row.$insertBefore(new_cell, reference_cell);
            } else {
              return row.$appendChild(new_cell)
            };
          };
        };}, {$$s: self, $$source_location: ['renderers/html/html.rb', 2644]});
    }, {$$source_location: ['renderers/html/html.rb', 2636]});
    
    $def(self, '$table_insert', function $$table_insert(params) {
      var self = this;

      if ($truthy(params['$[]']("cell"))) {
        return self.$insert_cell(params)
      } else if ($truthy(params['$[]']("row"))) {
        return self.$insert_row(params)
      } else if ($truthy(params['$[]']("column"))) {
        return self.$insert_column(params)
      } else {
        return nil
      }
    }, {$$source_location: ['renderers/html/html.rb', 2667]});
    
    $def(self, '$remove', function $$remove(params) {try { var $t_return = $thrower('return'); 
      var self = this, $ret_or_1 = nil;

      if ($eqeqeq($$('Hash'), ($ret_or_1 = params))) {
        return $send(params, 'each', [], function $$103(k, v){var self = $$103.$$s == null ? this : $$103.$$s, row_index = nil, table_element = nil, rows = nil, row_to_remove = nil, column_index = nil;
          if (self.id == null) self.id = nil;

          
          if (k == null) k = nil;
          if (v == null) v = nil;
          
          switch (k.valueOf()) {
            case "row":
              
              row_index = params['$[]']("row");
              table_element = $$('JS').$global()['$[]']("document").$querySelector("#" + (self.id) + " table");
              if ($truthy(table_element['$nil?']())) {
                
                self.$puts("Table not found");
                $t_return.$throw(nil, $$103.$$is_lambda);
              };
              rows = table_element.$querySelectorAll("tbody tr").$to_a();
              if ($truthy($rb_ge(row_index, rows.$length()))) {
                
                self.$puts("row not found : " + (row_index));
                true;
              };
              row_to_remove = rows['$[]'](row_index);
              row_to_remove['$[]']("parentNode").$removeChild(row_to_remove);
              return $send(rows, 'each_with_index', [], function $$104(row, i){
                
                if (row == null) row = nil;
                if (i == null) i = nil;
                if ($truthy($rb_le(i, row_index))) {
                  return nil
                } else {
                  return nil
                };}, {$$source_location: ['renderers/html/html.rb', 2703]});
            case "column":
              
              column_index = params['$[]']("column");
              table_element = $$('JS').$global()['$[]']("document").$querySelector("#" + (self.id) + " table");
              if ($truthy(table_element['$nil?']())) {
                
                self.$puts("Table not found");
                true;
              };
              rows = table_element.$querySelectorAll("tbody tr").$to_a();
              return $send(rows, 'each', [], function $$105(row){var cells = nil, cell_to_remove = nil;

                
                if (row == null) row = nil;
                cells = row.$querySelectorAll("td").$to_a();
                if ($truthy($rb_lt(column_index, cells.$length()))) {
                  
                  cell_to_remove = cells['$[]'](column_index);
                  return cell_to_remove['$[]']("parentNode").$removeChild(cell_to_remove);
                } else {
                  return nil
                };}, {$$source_location: ['renderers/html/html.rb', 2716]});
            case "all":
              
              switch (v.valueOf()) {
                case "paint":
                  return self.$style("background", "none")
                case "color":
                  return nil
                case "shadow":
                  
                  self.$style("box-shadow", "none");
                  self.$style("text-shadow", "none");
                  return self.$style("filter", "none");
                default:
                  return nil
              }
              break;
            default:
              return nil
          };}, {$$s: self, $$ret: $t_return, $$source_location: ['renderers/html/html.rb', 2682]})
      } else {
        
        self.original_atome.$apply().$delete(params);
        self.$style("background", "none");
        self.$style("box-shadow", "none");
        self.$style("text-shadow", "none");
        self.$style("boxShadow", "none");
        self.$style("filter", "none");
        return self.original_atome.$apply(self.original_atome.$apply());
      }} catch($e) {
        if ($e === $t_return) return $e.$v;
        throw $e;
      } finally {$t_return.is_orphan = true;}
    }, {$$source_location: ['renderers/html/html.rb', 2678]});
    
    $def(self, '$table_remove', function $$table_remove(params) {
      
      if ($truthy(params['$[]']("row"))) {
        return nil
      } else if ($truthy(params['$[]']("column"))) {
        return nil
      } else {
        return nil
      }
    }, {$$source_location: ['renderers/html/html.rb', 2750]});
    
    $def(self, '$atomized', $assign_ivar("element"), {$$source_location: ['renderers/html/html.rb', 2759]});
    
    $def(self, '$center', function $$center(options, attach) {
      var self = this, event_handler = nil;

      
      self.center_options = options;
      self.parent = self.$grab(attach);
      self.$apply_centering(self.center_options, self.parent);
      if (!$truthy(self.center_options['$[]']("dynamic"))) {
        return nil
      };
      event_handler = $lambda(function $$106(event){var self = $$106.$$s == null ? this : $$106.$$s;
        if (self.center_options == null) self.center_options = nil;
        if (self.parent == null) self.parent = nil;

        
        if (event == null) event = nil;
        return self.$apply_centering(self.center_options, self.parent);}, {$$s: self, $$source_location: ['renderers/html/html.rb', 2770]});
      return $$('JS').$global()['$[]']("window").$addEventListener("resize", event_handler);
    }, {$$source_location: ['renderers/html/html.rb', 2763]});
    
    $def(self, '$record_audio', function $$record_audio(params) {try { 
      var self = this, duration = nil, name = nil;

      
      duration = $rb_times(params['$[]']("duration"), 1000);
      name = params['$[]']("name");
      return $$('JS').$eval("recordAudio(" + (duration) + ",'" + (self.id) + "', '" + (name) + "')");} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$source_location: ['renderers/html/html.rb', 2777]});
    
    $def(self, '$record_video', function $$record_video(params) {try { 
      var self = this, duration = nil, name = nil;

      
      duration = $rb_times(params['$[]']("duration"), 1000);
      name = params['$[]']("name");
      return $$('JS').$eval("recordVideo(" + (duration) + ",'" + (self.id) + "', '" + (name) + "')");} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$source_location: ['renderers/html/html.rb', 2783]});
    
    $def(self, '$stop_video_preview', function $$stop_video_preview(id) {try { 
      
      return $$('JS').$eval("stopPreview('" + (id) + "')")} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$source_location: ['renderers/html/html.rb', 2789]});
    
    $def(self, '$video_preview', function $$video_preview(id, video, audio) {try { 
      
      return $$('JS').$eval("create_preview('" + (id) + "','" + (video) + "','" + (audio) + "')")} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$source_location: ['renderers/html/html.rb', 2793]});
    
    $def(self, '$stop_media_recorder', function $$stop_media_recorder(id) {try { 
      
      return $$('JS').$eval("writeatomestore('" + (id) + "', 'record', 'stop')")} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, {$$source_location: ['renderers/html/html.rb', 2797]});
    self.$private();
    
    $def(self, '$apply_centering', function $$apply_centering(options, parent) {
      var self = this, x_position = nil, y_position = nil;

      
      if ($truthy(options['$[]']("x"))) {
        
        x_position = self.$calculate_position(options['$[]']("x"), parent.$to_px("width"), self.original_atome.$to_px("width"));
        self.original_atome.$left(x_position);
      };
      if (!$truthy(options['$[]']("y"))) {
        return nil
      };
      y_position = self.$calculate_position(options['$[]']("y"), parent.$to_px("height"), self.original_atome.$to_px("height"));
      return self.original_atome.$top(y_position);
    }, {$$source_location: ['renderers/html/html.rb', 2803]});
    return $def(self, '$calculate_position', function $$calculate_position(option, parent_dimension, self_dimension) {
      var percent = nil;

      if (($truthy(option['$is_a?']($$('String'))) && ($truthy(option['$end_with?']("%"))))) {
        
        percent = $rb_divide(option.$chop().$to_f(), 100.0);
        return $rb_times($rb_minus(parent_dimension, self_dimension), percent);
      } else if ($eqeq(option, 0)) {
        return $rb_divide($rb_minus(parent_dimension, self_dimension), 2.0)
      } else {
        return option
      }
    }, {$$source_location: ['renderers/html/html.rb', 2815]});
  })($nesting[0], null, $nesting)
};

Opal.modules["renderers/html/identity"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $send = Opal.send, $return_val = Opal.return_val, $truthy = Opal.truthy, $def = Opal.def, $eqeq = Opal.eqeq, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('new,shape,html,draw,svg,image,editor,video,audio,www,raw,text,add_class,vr,grab,language,instance_of?,each,fasten,<<,delete,each_with_index,==,[]=,js,to_s,int8,check_parent_language,attach,[],alert,translation,svg_data,send,update_svg_data,path,vr_path,raw_data,table,atomized,alien,select_text,markup');
  
  self.$new((new Map([["renderer", "html"], ["method", "id"], ["type", "string"]])));
  $send(self, 'new', [(new Map([["method", "type"], ["type", "string"], ["renderer", "html"]]))], function $$1(_value, _user_proc){var self = $$1.$$s == null ? this : $$1.$$s;
    if (self.id == null) self.id = nil;

    
    if (_value == null) _value = nil;
    if (_user_proc == null) _user_proc = nil;
    return self.$html().$shape(self.id);}, {$$s: self, $$source_location: ['renderers/html/identity.rb', 5]});
  $send(self, 'new', [(new Map([["method", "type"], ["type", "string"], ["renderer", "html"], ["specific", "draw"]]))], function $$2(_value, _user_proc){var self = $$2.$$s == null ? this : $$2.$$s;
    if (self.id == null) self.id = nil;

    
    if (_value == null) _value = nil;
    if (_user_proc == null) _user_proc = nil;
    return self.$html().$draw(self.id);}, {$$s: self, $$source_location: ['renderers/html/identity.rb', 15]});
  $send(self, 'new', [(new Map([["method", "type"], ["type", "string"], ["renderer", "html"], ["specific", "vector"]]))], function $$3(_value, _user_proc){var self = $$3.$$s == null ? this : $$3.$$s;
    if (self.id == null) self.id = nil;

    
    if (_value == null) _value = nil;
    if (_user_proc == null) _user_proc = nil;
    return self.$html().$svg(self.id);}, {$$s: self, $$source_location: ['renderers/html/identity.rb', 28]});
  $send(self, 'new', [(new Map([["method", "type"], ["type", "string"], ["renderer", "html"], ["specific", "image"]]))], function $$4(_value, _user_proc){var self = $$4.$$s == null ? this : $$4.$$s;
    if (self.id == null) self.id = nil;

    
    if (_value == null) _value = nil;
    if (_user_proc == null) _user_proc = nil;
    return self.$html().$image(self.id);}, {$$s: self, $$source_location: ['renderers/html/identity.rb', 32]});
  $send(self, 'new', [(new Map([["method", "type"], ["type", "string"], ["renderer", "html"], ["specific", "editor"]]))], function $$5(_value, _user_proc){var self = $$5.$$s == null ? this : $$5.$$s;
    if (self.id == null) self.id = nil;

    
    if (_value == null) _value = nil;
    if (_user_proc == null) _user_proc = nil;
    return self.$html().$editor(self.id);}, {$$s: self, $$source_location: ['renderers/html/identity.rb', 36]});
  $send(self, 'new', [(new Map([["method", "type"], ["type", "string"], ["renderer", "html"], ["specific", "video"]]))], function $$6(_value, _user_proc){var self = $$6.$$s == null ? this : $$6.$$s;
    if (self.id == null) self.id = nil;

    
    if (_value == null) _value = nil;
    if (_user_proc == null) _user_proc = nil;
    return self.$html().$video(self.id);}, {$$s: self, $$source_location: ['renderers/html/identity.rb', 40]});
  $send(self, 'new', [(new Map([["method", "type"], ["type", "string"], ["renderer", "html"], ["specific", "audio"]]))], function $$7(_value, _user_proc){var self = $$7.$$s == null ? this : $$7.$$s;
    if (self.id == null) self.id = nil;

    
    if (_value == null) _value = nil;
    if (_user_proc == null) _user_proc = nil;
    return self.$html().$audio(self.id);}, {$$s: self, $$source_location: ['renderers/html/identity.rb', 43]});
  $send(self, 'new', [(new Map([["method", "type"], ["type", "string"], ["renderer", "html"], ["specific", "www"]]))], function $$8(_value, _user_proc){var self = $$8.$$s == null ? this : $$8.$$s;
    if (self.id == null) self.id = nil;

    
    if (_value == null) _value = nil;
    if (_user_proc == null) _user_proc = nil;
    return self.$html().$www(self.id);}, {$$s: self, $$source_location: ['renderers/html/identity.rb', 47]});
  $send(self, 'new', [(new Map([["method", "type"], ["type", "string"], ["renderer", "html"], ["specific", "raw"]]))], function $$9(_value, _user_proc){var self = $$9.$$s == null ? this : $$9.$$s;
    if (self.id == null) self.id = nil;

    
    if (_value == null) _value = nil;
    if (_user_proc == null) _user_proc = nil;
    return self.$html().$raw(self.id);}, {$$s: self, $$source_location: ['renderers/html/identity.rb', 51]});
  $send(self, 'new', [(new Map([["method", "type"], ["type", "string"], ["specific", "shape"], ["renderer", "html"]]))], function $$10(_value, _user_proc){var self = $$10.$$s == null ? this : $$10.$$s;
    if (self.id == null) self.id = nil;

    
    if (_value == null) _value = nil;
    if (_user_proc == null) _user_proc = nil;
    return self.$html().$shape(self.id);}, {$$s: self, $$source_location: ['renderers/html/identity.rb', 55]});
  $send(self, 'new', [(new Map([["method", "type"], ["type", "string"], ["specific", "text"], ["renderer", "html"]]))], function $$11(_value, _user_proc){var self = $$11.$$s == null ? this : $$11.$$s;
    if (self.id == null) self.id = nil;

    
    if (_value == null) _value = nil;
    if (_user_proc == null) _user_proc = nil;
    self.$html().$text(self.id);
    return self.$html().$add_class("text");}, {$$s: self, $$source_location: ['renderers/html/identity.rb', 59]});
  $send(self, 'new', [(new Map([["method", "type"], ["type", "string"], ["specific", "vr"], ["renderer", "html"]]))], function $$12(_value, _user_proc){var self = $$12.$$s == null ? this : $$12.$$s;
    if (self.id == null) self.id = nil;

    
    if (_value == null) _value = nil;
    if (_user_proc == null) _user_proc = nil;
    return self.$html().$vr(self.id);}, {$$s: self, $$source_location: ['renderers/html/identity.rb', 64]});
  $send(self, 'new', [(new Map([["method", "type"], ["type", "string"], ["specific", "paint"], ["renderer", "html"]]))], $return_val(nil), {$$source_location: ['renderers/html/identity.rb', 69]});
  $send(self, 'new', [(new Map([["method", "type"], ["type", "string"], ["specific", "color"], ["renderer", "html"]]))], $return_val(nil), {$$source_location: ['renderers/html/identity.rb', 72]});
  
  $def(self, '$check_parent_language', function $$check_parent_language(parent) {
    var self = this, parent_found = nil, language_found = nil;

    
    parent_found = self.$grab(parent);
    if ($truthy(parent_found)) {
      
      language_found = parent_found.$language();
      return language_found;
    } else {
      return nil
    };
  }, {$$source_location: ['renderers/html/identity.rb', 75]});
  $send(self, 'new', [(new Map([["method", "data"], ["type", "string"], ["specific", "text"], ["renderer", "html"]]))], function $$13(params){var self = $$13.$$s == null ? this : $$13.$$s, item_to_erase = nil, language = nil;

    
    if (params == null) params = nil;
    if ($truthy(params['$instance_of?']($$('Array')))) {
      
      item_to_erase = [];
      $send(self.$fasten(), 'each', [], function $$14(child_f){var self = $$14.$$s == null ? this : $$14.$$s;

        
        if (child_f == null) child_f = nil;
        return item_to_erase['$<<'](self.$grab(child_f));}, {$$s: self, $$source_location: ['renderers/html/identity.rb', 94]});
      $send(item_to_erase, 'each', [], function $$15(item){
        
        if (item == null) item = nil;
        return item.$delete(true);}, {$$source_location: ['renderers/html/identity.rb', 97]});
      $send(params, 'each_with_index', [], function $$16(data_f, index){var self = $$16.$$s == null ? this : $$16.$$s;

        
        if (data_f == null) data_f = nil;
        if (index == null) index = nil;
        if ($eqeq(index, 0)) {
          return self.$text(data_f)
        } else {
          return self.$text(data_f)
        };}, {$$s: self, $$source_location: ['renderers/html/identity.rb', 102]});
    } else {
      self.$js()['$[]=']("innerHTML", params.$to_s())
    };
    if ($truthy(self.$int8())) {
      if (!$truthy(self.$language())) {
        language = self.$check_parent_language(self.$attach())
      }
    };
    if ($truthy(self.$int8()['$[]'](language))) {
      
      if ($truthy(self.$int8()['$[]'](language)['$[]'](params))) {
        self.$alert("case1 : " + (self.$int8()['$[]'](language)['$[]'](params)))
      } else if ($truthy(self.$int8()['$[]'](self.$grab("view").$language())['$[]'](params))) {
        self.$alert("case2 : " + (self.$int8()['$[]'](self.$grab("view").$language())['$[]'](params)))
      } else {
        
        self.$alert("case3 : " + (params));
        params;
      };
      params;
    };
    if ($truthy($$('Universe').$translation()['$[]'](params))) {
      
      params = $$('Universe').$translation()['$[]'](params)['$[]']($$('Universe').$language());
      return self.$alert("icicicici");
    } else {
      return nil
    };}, {$$s: self, $$source_location: ['renderers/html/identity.rb', 89]});
  $send(self, 'new', [(new Map([["method", "code"], ["type", "string"], ["specific", "editor"], ["renderer", "html"]]))], function $$17(params){var $a, self = $$17.$$s == null ? this : $$17.$$s;

    
    if (params == null) params = nil;
    if ($truthy($$('Universe').$translation()['$[]'](params))) {
      params = $$('Universe').$translation()['$[]'](params)['$[]']($$('Universe').$language())
    };
    return ($a = ["innerHTML", params.$to_s()], $send(self.$js(), '[]=', $a), $a[$a.length - 1]);}, {$$s: self, $$source_location: ['renderers/html/identity.rb', 179]});
  $send(self, 'new', [(new Map([["method", "data"], ["type", "string"], ["specific", "vector"], ["renderer", "html"]]))], function $$18(value){var self = $$18.$$s == null ? this : $$18.$$s;

    
    if (value == null) value = nil;
    if (!$truthy(value['$instance_of?']($$('Array')))) {
      value = [value]
    };
    return self.$html().$svg_data(value);}, {$$s: self, $$source_location: ['renderers/html/identity.rb', 186]});
  $send(self, 'new', [(new Map([["method", "component"], ["type", "hash"], ["specific", "text"], ["renderer", "html"]]))], function $$19(params, _user_proc){var self = $$19.$$s == null ? this : $$19.$$s;

    
    if (params == null) params = nil;
    if (_user_proc == null) _user_proc = nil;
    return $send(params, 'each', [], function $$20(prop, value){var self = $$20.$$s == null ? this : $$20.$$s;

      
      if (prop == null) prop = nil;
      if (value == null) value = nil;
      return self.$send("html_text_" + (prop), value);}, {$$s: self, $$source_location: ['renderers/html/identity.rb', 194]});}, {$$s: self, $$source_location: ['renderers/html/identity.rb', 193]});
  $send(self, 'new', [(new Map([["method", "component"], ["type", "hash"], ["specific", "vector"], ["renderer", "html"]]))], function $$21(params, _user_proc){var self = $$21.$$s == null ? this : $$21.$$s;

    
    if (params == null) params = nil;
    if (_user_proc == null) _user_proc = nil;
    return self.$html().$update_svg_data(params);}, {$$s: self, $$source_location: ['renderers/html/identity.rb', 200]});
  $send(self, 'new', [(new Map([["method", "path"], ["type", "string"], ["renderer", "html"]]))], function $$22(value, _user_proc){var self = $$22.$$s == null ? this : $$22.$$s;

    
    if (value == null) value = nil;
    if (_user_proc == null) _user_proc = nil;
    return self.$html().$path(value);}, {$$s: self, $$source_location: ['renderers/html/identity.rb', 204]});
  $send(self, 'new', [(new Map([["method", "path"], ["type", "string"], ["renderer", "html"], ["specific", "image"]]))], function $$23(value, _user_proc){var self = $$23.$$s == null ? this : $$23.$$s;

    
    if (value == null) value = nil;
    if (_user_proc == null) _user_proc = nil;
    return self.$html().$path(value);}, {$$s: self, $$source_location: ['renderers/html/identity.rb', 208]});
  $send(self, 'new', [(new Map([["method", "path"], ["type", "string"], ["renderer", "html"], ["specific", "www"]]))], function $$24(value, _user_proc){var self = $$24.$$s == null ? this : $$24.$$s;

    
    if (value == null) value = nil;
    if (_user_proc == null) _user_proc = nil;
    return self.$html().$path(value);}, {$$s: self, $$source_location: ['renderers/html/identity.rb', 212]});
  $send(self, 'new', [(new Map([["method", "path"], ["type", "string"], ["renderer", "html"], ["specific", "vr"]]))], function $$25(value, _user_proc){var self = $$25.$$s == null ? this : $$25.$$s;

    
    if (value == null) value = nil;
    if (_user_proc == null) _user_proc = nil;
    return self.$html().$vr_path(value);}, {$$s: self, $$source_location: ['renderers/html/identity.rb', 216]});
  $send(self, 'new', [(new Map([["method", "data"], ["type", "string"], ["renderer", "html"], ["specific", "raw"]]))], function $$26(value, _user_proc){var self = $$26.$$s == null ? this : $$26.$$s;

    
    if (value == null) value = nil;
    if (_user_proc == null) _user_proc = nil;
    return self.$html().$raw_data(value);}, {$$s: self, $$source_location: ['renderers/html/identity.rb', 222]});
  $send(self, 'new', [(new Map([["renderer", "html"], ["method", "category"], ["type", "symbol"]]))], function $$27(category_names){var self = $$27.$$s == null ? this : $$27.$$s;

    
    if (category_names == null) category_names = nil;
    return $send(category_names, 'each', [], function $$28(category_name){var self = $$28.$$s == null ? this : $$28.$$s;

      
      if (category_name == null) category_name = nil;
      return self.$html().$add_class(category_name);}, {$$s: self, $$source_location: ['renderers/html/identity.rb', 227]});}, {$$s: self, $$source_location: ['renderers/html/identity.rb', 226]});
  $send(self, 'new', [(new Map([["method", "data"], ["type", "string"], ["specific", "table"], ["renderer", "html"]]))], function $$29(value, _user_proc){var self = $$29.$$s == null ? this : $$29.$$s;

    
    if (value == null) value = nil;
    if (_user_proc == null) _user_proc = nil;
    return self.$html().$table(value);}, {$$s: self, $$source_location: ['renderers/html/identity.rb', 232]});
  $send(self, 'new', [(new Map([["method", "type"], ["type", "hash"], ["specific", "atomized"], ["renderer", "html"]]))], function $$30(_value, _user_proc){var self = $$30.$$s == null ? this : $$30.$$s;

    
    if (_value == null) _value = nil;
    if (_user_proc == null) _user_proc = nil;
    return self.$html().$atomized(self.$alien());}, {$$s: self, $$source_location: ['renderers/html/identity.rb', 236]});
  $send(self, 'new', [(new Map([["renderer", "html"], ["method", "selected"], ["specific", "text"]]))], function $$31(value, _bloc){var self = $$31.$$s == null ? this : $$31.$$s;

    
    if (value == null) value = nil;
    if (_bloc == null) _bloc = nil;
    return self.$html().$select_text(value);}, {$$s: self, $$source_location: ['renderers/html/identity.rb', 240]});
  return $send(self, 'new', [(new Map([["renderer", "html"], ["method", "markup"]]))], function $$32(value){var bloc = $$32.$$p || nil, self = $$32.$$s == null ? this : $$32.$$s;

    $$32.$$p = null;
    
    ;
    if (value == null) value = nil;
    return self.$html().$markup(value, bloc);}, {$$s: self, $$source_location: ['renderers/html/identity.rb', 244]});
};

Opal.modules["renderers/html/material"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $send = Opal.send, $truthy = Opal.truthy, $eqeq = Opal.eqeq, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('new,overflow,html,instance_of?,each,remove_class,[],send,remove,grab,type,==,color,style,delete,dup,apply,gradient,fill');
  
  $send(self, 'new', [(new Map([["method", "overflow"], ["renderer", "html"], ["type", "string"]]))], function $$1(params, bloc){var self = $$1.$$s == null ? this : $$1.$$s;

    
    if (params == null) params = nil;
    if (bloc == null) bloc = nil;
    return self.$html().$overflow(params, bloc);}, {$$s: self, $$source_location: ['renderers/html/material.rb', 3]});
  self.$new((new Map([["method", "gradient"], ["renderer", "html"], ["type", "hash"]])));
  $send(self, 'new', [(new Map([["method", "remove"], ["renderer", "html"], ["type", "string"]]))], function $$2(object_id_to_remove, _bloc){var self = $$2.$$s == null ? this : $$2.$$s, atome_to_remove = nil, atome_type_found = nil, temp_array = nil;
    if (self.apply == null) self.apply = nil;

    
    if (object_id_to_remove == null) object_id_to_remove = nil;
    if (_bloc == null) _bloc = nil;
    if ($truthy(object_id_to_remove['$instance_of?']($$('Hash')))) {
      return $send(object_id_to_remove, 'each', [], function $$3(particle, value){var self = $$3.$$s == null ? this : $$3.$$s, atome_ids_found = nil;

        
        if (particle == null) particle = nil;
        if (value == null) value = nil;
        
        switch (particle.valueOf()) {
          case "category":
            return self.$html().$remove_class(value)
          default:
            if ($truthy(object_id_to_remove['$[]']("all"))) {
              
              atome_ids_found = self.$send(object_id_to_remove['$[]']("all"));
              return $send(atome_ids_found, 'each', [], function $$4(atome_id){var self = $$4.$$s == null ? this : $$4.$$s;

                
                if (atome_id == null) atome_id = nil;
                return self.$remove(atome_id);}, {$$s: self, $$source_location: ['renderers/html/material.rb', 20]});
            } else {
              return nil
            }
        };}, {$$s: self, $$source_location: ['renderers/html/material.rb', 13]})
    } else {
      
      atome_to_remove = self.$grab(object_id_to_remove);
      atome_type_found = atome_to_remove.$type();
      
      switch (atome_type_found.valueOf()) {
        case "color":
          if ($eqeq(self.$color(), [])) {
            return self.$html().$style("backgroundColor", "black")
          } else {
            
            self.$html().$style("background", "");
            self.$html().$style("backgroundColor", "");
            self.apply.$delete(object_id_to_remove);
            temp_array = self.apply.$dup();
            return $send(temp_array, 'each', [], function $$5(atome_to_apply){var self = $$5.$$s == null ? this : $$5.$$s;

              
              if (atome_to_apply == null) atome_to_apply = nil;
              return self.$apply(atome_to_apply);}, {$$s: self, $$source_location: ['renderers/html/material.rb', 39]});
          }
          break;
        case "shadow":
          
          self.$html().$style("boxShadow", "none");
          self.$html().$style("filter", "none");
          return self.apply.$delete(object_id_to_remove);
        case "border":
          
          self.$html().$style("border", "none");
          self.$html().$style("filter", "none");
          return self.apply.$delete(object_id_to_remove);
        case "paint":
          
          atome_to_remove = self.$grab(object_id_to_remove);
          $send(atome_to_remove.$gradient(), 'each', [], function $$6(color_id){var self = $$6.$$s == null ? this : $$6.$$s;
            if (self.apply == null) self.apply = nil;

            
            if (color_id == null) color_id = nil;
            self.$html().$style("background", "");
            self.$html().$style("backgroundColor", "");
            return self.apply.$delete(color_id);}, {$$s: self, $$source_location: ['renderers/html/material.rb', 54]});
          self.apply.$delete(object_id_to_remove);
          temp_array = self.apply.$dup();
          return $send(temp_array, 'each', [], function $$7(atome_to_apply){var self = $$7.$$s == null ? this : $$7.$$s;

            
            if (atome_to_apply == null) atome_to_apply = nil;
            return self.$apply(atome_to_apply);}, {$$s: self, $$source_location: ['renderers/html/material.rb', 61]});
        default:
          return nil
      };
    };}, {$$s: self, $$source_location: ['renderers/html/material.rb', 10]});
  self.$new((new Map([["method", "thickness"], ["type", "integer"], ["renderer", "html"]])));
  self.$new((new Map([["method", "pattern"], ["type", "integer"], ["renderer", "html"]])));
  $send(self, 'new', [(new Map([["method", "fill"], ["renderer", "html"]]))], function $$8(params){var self = $$8.$$s == null ? this : $$8.$$s;

    
    if (params == null) params = nil;
    return self.$html().$fill(params);}, {$$s: self, $$source_location: ['renderers/html/material.rb', 74]});
  $send(self, 'new', [(new Map([["method", "opacity"], ["type", "integer"], ["renderer", "html"]]))], function $$9(value){var self = $$9.$$s == null ? this : $$9.$$s;

    
    if (value == null) value = nil;
    return self.$html().$style("opacity", value);}, {$$s: self, $$source_location: ['renderers/html/material.rb', 78]});
  return $send(self, 'new', [(new Map([["method", "visual"], ["type", "string"], ["renderer", "html"], ["specific", "text"]]))], function $$10(value, _user_proc){var self = $$10.$$s == null ? this : $$10.$$s;

    
    if (value == null) value = nil;
    if (_user_proc == null) _user_proc = nil;
    return self.$html().$style("fontFamily", value);}, {$$s: self, $$source_location: ['renderers/html/material.rb', 83]});
};

Opal.modules["renderers/html/property"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $send = Opal.send, $truthy = Opal.truthy, self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('new,attr,html,update_data,table_clean,table_insert,refresh_table,each,affect,style,grab');
  
  self.$new((new Map([["renderer", "html"], ["method", "diffusion"], ["type", "string"]])));
  self.$new((new Map([["method", "red"], ["type", "integer"], ["specific", "color"], ["renderer", "html"]])));
  self.$new((new Map([["method", "green"], ["type", "integer"], ["specific", "color"], ["renderer", "html"]])));
  self.$new((new Map([["method", "blue"], ["type", "integer"], ["specific", "color"], ["renderer", "html"]])));
  self.$new((new Map([["method", "alpha"], ["type", "integer"], ["specific", "color"], ["renderer", "html"]])));
  self.$new((new Map([["renderer", "html"], ["method", "diffusion"], ["type", "string"]])));
  $send(self, 'new', [(new Map([["renderer", "html"], ["method", "edit"]]))], function $$1(params){var self = $$1.$$s == null ? this : $$1.$$s;

    
    if (params == null) params = nil;
    self.$html().$attr("contenteditable", params);
    return self.$html().$update_data(params);}, {$$s: self, $$source_location: ['renderers/html/property.rb', 15]});
  $send(self, 'new', [(new Map([["method", "clean"], ["renderer", "html"], ["type", "hash"]]))], function $$2(params){var self = $$2.$$s == null ? this : $$2.$$s;

    
    if (params == null) params = nil;
    return self.$html().$table_clean(params);}, {$$s: self, $$source_location: ['renderers/html/property.rb', 21]});
  $send(self, 'new', [(new Map([["method", "insert"], ["renderer", "html"], ["type", "hash"]]))], function $$3(params){var self = $$3.$$s == null ? this : $$3.$$s;

    
    if (params == null) params = nil;
    return self.$html().$table_insert(params);}, {$$s: self, $$source_location: ['renderers/html/property.rb', 25]});
  $send(self, 'new', [(new Map([["method", "sort"], ["renderer", "html"], ["type", "hash"]]))], function $$4(params){var self = $$4.$$s == null ? this : $$4.$$s;

    
    if (params == null) params = nil;
    return self.$html().$refresh_table(params);}, {$$s: self, $$source_location: ['renderers/html/property.rb', 31]});
  $send(self, 'new', [(new Map([["method", "inside"], ["renderer", "html"]]))], function $$5(params){var self = $$5.$$s == null ? this : $$5.$$s;

    
    if (params == null) params = nil;
    if ($truthy(params)) {
      return $send(self.$affect(), 'each', [], function $$6(at_found){var self = $$6.$$s == null ? this : $$6.$$s;

        
        if (at_found == null) at_found = nil;
        return self.$grab(at_found).$html().$style("box-sizing", "border-box");}, {$$s: self, $$source_location: ['renderers/html/property.rb', 37]})
    } else {
      return self.$html().$style("boxSizing", " content-box")
    };}, {$$s: self, $$source_location: ['renderers/html/property.rb', 35]});
  return $send(self, 'new', [(new Map([["method", "align"], ["renderer", "html"], ["type", "hash"]]))], function $$7(params){var self = $$7.$$s == null ? this : $$7.$$s;

    
    if (params == null) params = nil;
    return self.$html().$style("text-align", params);}, {$$s: self, $$source_location: ['renderers/html/property.rb', 46]});
};

Opal.modules["renderers/html/security"] = Opal.return_val(Opal.nil); /* Generated by Opal 1.8.2 */

Opal.modules["renderers/html/spatial"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $send = Opal.send, $truthy = Opal.truthy, $eqeq = Opal.eqeq, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('new,is_a?,[],[]=,js,affect,transform,html,style,center,attach,==,merge,location,map_zoom,map_pan');
  
  $send(self, 'new', [(new Map([["method", "left"], ["type", "integer"], ["renderer", "html"]]))], function $$1(params){var $a, self = $$1.$$s == null ? this : $$1.$$s, unit = nil, $ret_or_1 = nil;
    if (self.unit == null) self.unit = nil;

    
    if (params == null) params = nil;
    if ($truthy(params['$is_a?']($$('Numeric')))) {
      unit = ($truthy(($ret_or_1 = self.unit['$[]']("left"))) ? ($ret_or_1) : ("px"))
    };
    return ($a = ["left", "" + (params) + (unit)], $send(self.$js()['$[]']("style"), '[]=', $a), $a[$a.length - 1]);}, {$$s: self, $$source_location: ['renderers/html/spatial.rb', 3]});
  $send(self, 'new', [(new Map([["method", "top"], ["type", "integer"], ["renderer", "html"]]))], function $$2(params){var $a, self = $$2.$$s == null ? this : $$2.$$s, unit = nil, $ret_or_1 = nil;
    if (self.unit == null) self.unit = nil;

    
    if (params == null) params = nil;
    if ($truthy(params['$is_a?']($$('Numeric')))) {
      unit = ($truthy(($ret_or_1 = self.unit['$[]']("top"))) ? ($ret_or_1) : ("px"))
    };
    return ($a = ["top", "" + (params) + (unit)], $send(self.$js()['$[]']("style"), '[]=', $a), $a[$a.length - 1]);}, {$$s: self, $$source_location: ['renderers/html/spatial.rb', 8]});
  $send(self, 'new', [(new Map([["method", "bottom"], ["type", "integer"], ["renderer", "html"]]))], function $$3(params){var $a, self = $$3.$$s == null ? this : $$3.$$s, unit = nil, $ret_or_1 = nil;
    if (self.unit == null) self.unit = nil;

    
    if (params == null) params = nil;
    if ($truthy(params['$is_a?']($$('Numeric')))) {
      unit = ($truthy(($ret_or_1 = self.unit['$[]']("bottom"))) ? ($ret_or_1) : ("px"))
    };
    return ($a = ["bottom", "" + (params) + (unit)], $send(self.$js()['$[]']("style"), '[]=', $a), $a[$a.length - 1]);}, {$$s: self, $$source_location: ['renderers/html/spatial.rb', 13]});
  $send(self, 'new', [(new Map([["method", "right"], ["type", "integer"], ["renderer", "html"]]))], function $$4(params){var $a, self = $$4.$$s == null ? this : $$4.$$s, unit = nil, $ret_or_1 = nil;
    if (self.unit == null) self.unit = nil;

    
    if (params == null) params = nil;
    if ($truthy(params['$is_a?']($$('Numeric')))) {
      unit = ($truthy(($ret_or_1 = self.unit['$[]']("right"))) ? ($ret_or_1) : ("px"))
    };
    return ($a = ["right", "" + (params) + (unit)], $send(self.$js()['$[]']("style"), '[]=', $a), $a[$a.length - 1]);}, {$$s: self, $$source_location: ['renderers/html/spatial.rb', 18]});
  $send(self, 'new', [(new Map([["method", "top"], ["type", "integer"], ["renderer", "html"], ["specific", "shadow"]]))], function $$5(){var self = $$5.$$s == null ? this : $$5.$$s;

    return self.$affect(self.$affect())}, {$$s: self, $$source_location: ['renderers/html/spatial.rb', 24]});
  self.$new((new Map([["method", "left"], ["type", "integer"], ["specific", "color"], ["renderer", "html"]])));
  $send(self, 'new', [(new Map([["method", "left"], ["type", "integer"], ["renderer", "html"], ["specific", "shadow"]]))], function $$6(){var self = $$6.$$s == null ? this : $$6.$$s;

    return self.$affect(self.$affect())}, {$$s: self, $$source_location: ['renderers/html/spatial.rb', 31]});
  self.$new((new Map([["method", "top"], ["type", "integer"], ["specific", "color"], ["renderer", "html"]])));
  $send(self, 'new', [(new Map([["method", "rotate"], ["type", "integer"], ["renderer", "html"]]))], function $$7(params){var self = $$7.$$s == null ? this : $$7.$$s;

    
    if (params == null) params = nil;
    return self.$html().$transform("rotate", params);}, {$$s: self, $$source_location: ['renderers/html/spatial.rb', 38]});
  self.$new((new Map([["method", "rotate"], ["type", "integer"], ["renderer", "html"], ["specific", "paint"]])));
  $send(self, 'new', [(new Map([["renderer", "html"], ["method", "position"]]))], function $$8(params){var self = $$8.$$s == null ? this : $$8.$$s;

    
    if (params == null) params = nil;
    return self.$html().$style("position", params);}, {$$s: self, $$source_location: ['renderers/html/spatial.rb', 44]});
  $send(self, 'new', [(new Map([["renderer", "html"], ["method", "depth"]]))], function $$9(params){var self = $$9.$$s == null ? this : $$9.$$s;

    
    if (params == null) params = nil;
    return self.$html().$style("z-index", params);}, {$$s: self, $$source_location: ['renderers/html/spatial.rb', 48]});
  $send(self, 'new', [(new Map([["method", "organise"], ["renderer", "html"]]))], function $$10(params){var self = $$10.$$s == null ? this : $$10.$$s;

    
    if (params == null) params = nil;
    return self.$html().$style("gridTemplateColumns", params);}, {$$s: self, $$source_location: ['renderers/html/spatial.rb', 52]});
  $send(self, 'new', [(new Map([["method", "spacing"], ["renderer", "html"]]))], function $$11(params){var self = $$11.$$s == null ? this : $$11.$$s;

    
    if (params == null) params = nil;
    return self.$html().$style("gap", "" + (params) + "px");}, {$$s: self, $$source_location: ['renderers/html/spatial.rb', 56]});
  $send(self, 'new', [(new Map([["method", "display"], ["renderer", "html"]]))], function $$12(params){var self = $$12.$$s == null ? this : $$12.$$s;

    
    if (params == null) params = nil;
    return self.$html().$style("display", params);}, {$$s: self, $$source_location: ['renderers/html/spatial.rb', 60]});
  $send(self, 'new', [(new Map([["renderer", "html"], ["method", "center"]]))], function $$13(params){var self = $$13.$$s == null ? this : $$13.$$s;

    
    if (params == null) params = nil;
    return self.$html().$center(params, self.$attach());}, {$$s: self, $$source_location: ['renderers/html/spatial.rb', 64]});
  $send(self, 'new', [(new Map([["method", "map"], ["renderer", "html"], ["type", "int"]]))], function $$14(params, _user_proc){var self = $$14.$$s == null ? this : $$14.$$s, latitude_found = nil, longitude_found = nil, location_hash = nil;
    if (self.latitude == null) self.latitude = nil;
    if (self.longitude == null) self.longitude = nil;

    
    if (params == null) params = nil;
    if (_user_proc == null) _user_proc = nil;
    if ($eqeq(params, "auto")) {
      params = (new Map([["longitude", "auto"], ["latitude", "auto"]]))
    };
    latitude_found = self.latitude;
    longitude_found = self.longitude;
    location_hash = (new Map([["longitude", longitude_found], ["latitude", latitude_found]])).$merge(params);
    return self.$html().$location(location_hash);}, {$$s: self, $$source_location: ['renderers/html/spatial.rb', 69]});
  $send(self, 'new', [(new Map([["method", "map_zoom"], ["renderer", "html"], ["type", "int"]]))], function $$15(params, _user_proc){var self = $$15.$$s == null ? this : $$15.$$s;

    
    if (params == null) params = nil;
    if (_user_proc == null) _user_proc = nil;
    return self.$html().$map_zoom(params);}, {$$s: self, $$source_location: ['renderers/html/spatial.rb', 80]});
  return $send(self, 'new', [(new Map([["method", "map_pan"], ["renderer", "html"], ["type", "int"]]))], function $$16(params, _user_proc){var self = $$16.$$s == null ? this : $$16.$$s;

    
    if (params == null) params = nil;
    if (_user_proc == null) _user_proc = nil;
    return self.$html().$map_pan(params);}, {$$s: self, $$source_location: ['renderers/html/spatial.rb', 84]});
};

Opal.modules["renderers/html/time"] = Opal.return_val(Opal.nil); /* Generated by Opal 1.8.2 */

Opal.modules["renderers/html/utility"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $send = Opal.send, $eqeqeq = Opal.eqeqeq, $truthy = Opal.truthy, $eqeq = Opal.eqeq, $def = Opal.def, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('new,meteo,html,delete,id,hypertext,hyperedit,read,write,browse,terminal,===,call,merge,match,==,host,file_for_opal,getElementById,[],global,to_s,createElement,[]=,addEventListener,Native,puts,file_handler,readAsText,click,appendChild,create_file_browser,getBoundingClientRect,to_f,identity_generator,stop_video_preview,video_preview,stop_media_recorder,message,record_video,record_audio');
  
  $send(self, 'new', [(new Map([["renderer", "html"], ["method", "web"]]))], function $$1(params){var user_proc = $$1.$$p || nil;

    $$1.$$p = null;
    
    ;
    if (params == null) params = nil;
    return params;}, {$$source_location: ['renderers/html/utility.rb', 3]});
  $send(self, 'new', [(new Map([["renderer", "html"], ["method", "meteo"]]))], function $$3(params){var user_proc = $$3.$$p || nil, self = $$3.$$s == null ? this : $$3.$$s;

    $$3.$$p = null;
    
    ;
    if (params == null) params = nil;
    return self.$html().$meteo(params);}, {$$s: self, $$source_location: ['renderers/html/utility.rb', 7]});
  self.$new((new Map([["renderer", "html"], ["method", "renderers"], ["type", "string"]])));
  $send(self, 'new', [(new Map([["renderer", "html"], ["method", "delete"], ["type", "string"]]))], function $$4(params){var self = $$4.$$s == null ? this : $$4.$$s;

    
    if (params == null) params = nil;
    return self.$html().$delete(self.$id());}, {$$s: self, $$source_location: ['renderers/html/utility.rb', 12]});
  $send(self, 'new', [(new Map([["renderer", "html"], ["method", "hypertext"]]))], function $$5(params){var self = $$5.$$s == null ? this : $$5.$$s;

    
    if (params == null) params = nil;
    return self.$html().$hypertext(params);}, {$$s: self, $$source_location: ['renderers/html/utility.rb', 15]});
  $send(self, 'new', [(new Map([["renderer", "html"], ["method", "hyperedit"]]))], function $$6(params, usr_proc){var self = $$6.$$s == null ? this : $$6.$$s;

    
    if (params == null) params = nil;
    if (usr_proc == null) usr_proc = nil;
    return self.$html().$hyperedit(params, usr_proc);}, {$$s: self, $$source_location: ['renderers/html/utility.rb', 18]});
  $send(self, 'new', [(new Map([["renderer", "html"], ["method", "read"], ["type", "string"]]))], function $$7(value){var bloc = $$7.$$p || nil, self = $$7.$$s == null ? this : $$7.$$s;

    $$7.$$p = null;
    
    ;
    if (value == null) value = nil;
    return self.$html().$read(self.$id(), value);}, {$$s: self, $$source_location: ['renderers/html/utility.rb', 21]});
  $send(self, 'new', [(new Map([["renderer", "html"], ["method", "write"], ["type", "string"]]))], function $$8(value){var bloc = $$8.$$p || nil, self = $$8.$$s == null ? this : $$8.$$s;

    $$8.$$p = null;
    
    ;
    if (value == null) value = nil;
    return self.$html().$write(self.$id(), value);}, {$$s: self, $$source_location: ['renderers/html/utility.rb', 24]});
  $send(self, 'new', [(new Map([["renderer", "html"], ["method", "browse"], ["type", "string"]]))], function $$9(value){var bloc = $$9.$$p || nil, self = $$9.$$s == null ? this : $$9.$$s;

    $$9.$$p = null;
    
    ;
    if (value == null) value = nil;
    return self.$html().$browse(self.$id(), value);}, {$$s: self, $$source_location: ['renderers/html/utility.rb', 28]});
  $send(self, 'new', [(new Map([["renderer", "html"], ["method", "terminal"], ["type", "string"]]))], function $$10(value){var bloc = $$10.$$p || nil, self = $$10.$$s == null ? this : $$10.$$s;

    $$10.$$p = null;
    
    ;
    if (value == null) value = nil;
    return self.$html().$terminal(self.$id(), value);}, {$$s: self, $$source_location: ['renderers/html/utility.rb', 32]});
  $send(self, 'new', [(new Map([["renderer", "html"], ["method", "match"]]))], function $$11(params, bloc){var self = $$11.$$s == null ? this : $$11.$$s, $ret_or_2 = nil, $ret_or_1 = nil, result = nil;

    
    if (params == null) params = nil;
    if (bloc == null) bloc = nil;
    if ($eqeqeq(($truthy(($ret_or_2 = "atome")) ? ($ret_or_2) : ("view")), ($ret_or_1 = self.$id()))) {
      
      result = bloc.$call();
      result = (new Map([["alterations", result]]));
      params = params.$merge(result);
      return self.$html().$match(params);
    } else {
      return nil
    };}, {$$s: self, $$source_location: ['renderers/html/utility.rb', 36]});
  $send(self, 'new', [(new Map([["renderer", "html"], ["method", "import"], ["type", "blob"]]))], function $$12(_params, bloc){var self = $$12.$$s == null ? this : $$12.$$s;
    if (self.id == null) self.id = nil;

    
    if (_params == null) _params = nil;
    if (bloc == null) bloc = nil;
    if ($eqeq($$('Atome').$host(), "web-opal")) {
      return $send(self, 'file_for_opal', [self.id, bloc], function $$13(file_content){
        
        if (file_content == null) file_content = nil;
        return bloc.$call(file_content);}, {$$source_location: ['renderers/html/utility.rb', 49]})
    } else {
      
      
      $def(self, '$create_file_browser', function $$create_file_browser(_options) {
        var bloc = $$create_file_browser.$$p || nil, self = this, div_element = nil, input_element = nil;
        if (self.id == null) self.id = nil;

        $$create_file_browser.$$p = null;
        
        ;
        if (_options == null) _options = "";
        div_element = $$('JS').$global()['$[]']("document").$getElementById(self.id.$to_s());
        input_element = $$('JS').$global()['$[]']("document").$createElement("input");
        input_element['$[]=']("type", "file");
        input_element['$[]']("style")['$[]=']("position", "absolute");
        input_element['$[]']("style")['$[]=']("display", "none");
        input_element['$[]']("style")['$[]=']("width", "0px");
        input_element['$[]']("style")['$[]=']("height", "0px");
        $send(input_element, 'addEventListener', ["change"], function $$14(native_event){var self = $$14.$$s == null ? this : $$14.$$s, event = nil, file = nil, file_reader = nil;

          
          if (native_event == null) native_event = nil;
          event = self.$Native(native_event);
          file = event['$[]']("target")['$[]']("files")['$[]'](0);
          if ($truthy(file)) {
            
            self.$puts("file requested: " + (file['$[]']("name")));
            file_reader = $$('JS').$global()['$[]']("FileReader").$new();
            $send(file_reader, 'addEventListener', ["load"], function $$15(load_event){var self = $$15.$$s == null ? this : $$15.$$s, file_content = nil, flename = nil;
              if (self.id == null) self.id = nil;

              
              if (load_event == null) load_event = nil;
              file_content = load_event['$[]']("target")['$[]']("result");
              flename = file['$[]']("name");
              return $$('Atome').$file_handler(self.id, flename, file_content, bloc);}, {$$s: self, $$source_location: ['renderers/html/utility.rb', 70]});
            return file_reader.$readAsText(file);
          } else {
            return nil
          };}, {$$s: self, $$source_location: ['renderers/html/utility.rb', 64]});
        $send(div_element, 'addEventListener', ["mousedown"], function $$16(event){
          
          if (event == null) event = nil;
          return input_element.$click();}, {$$source_location: ['renderers/html/utility.rb', 80]});
        return div_element.$appendChild(input_element);
      }, {$$arity: -1, $$source_location: ['renderers/html/utility.rb', 55]});
      return $send(self, 'create_file_browser', ["options"], function $$17(file_content){
        
        if (file_content == null) file_content = nil;
        return bloc.$call(file_content);}, {$$source_location: ['renderers/html/utility.rb', 86]});
    };}, {$$s: self, $$source_location: ['renderers/html/utility.rb', 46]});
  $send(self, 'new', [(new Map([["method", "compute"], ["type", "hash"], ["renderer", "html"]]))], function $$18(params){var $a, self = $$18.$$s == null ? this : $$18.$$s, element = nil, bounding_box = nil, top = nil, left = nil, width = nil, height = nil, value_found = nil, $ret_or_1 = nil;
    if (self.id == null) self.id = nil;
    if (self.compute == null) self.compute = nil;

    
    if (params == null) params = nil;
    element = $$('JS').$global()['$[]']("document").$getElementById(self.id.$to_s());
    bounding_box = element.$getBoundingClientRect();
    top = bounding_box['$[]']("top");
    left = bounding_box['$[]']("left");
    width = bounding_box['$[]']("width");
    height = bounding_box['$[]']("height");
    value_found = ($eqeqeq("left", ($ret_or_1 = params['$[]']("particle"))) ? (left.$to_f()) : ($eqeqeq("top", $ret_or_1) ? (top.$to_f()) : ($eqeqeq("width", $ret_or_1) ? (width.$to_f()) : ($eqeqeq("height", $ret_or_1) ? (height.$to_f()) : (nil)))));
    return ($a = ["value", value_found], $send(self.compute, '[]=', $a), $a[$a.length - 1]);}, {$$s: self, $$source_location: ['renderers/html/utility.rb', 94]});
  $send(self, 'new', [(new Map([["renderer", "html"], ["method", "preview"]]))], function $$19(params, user_proc){var self = $$19.$$s == null ? this : $$19.$$s, id_f = nil, $ret_or_1 = nil;

    
    if (params == null) params = nil;
    if (user_proc == null) user_proc = nil;
    id_f = ($truthy(($ret_or_1 = params['$[]']("id"))) ? ($ret_or_1) : (self.$identity_generator()));
    if ($truthy(params['$[]']("stop"))) {
      return self.$html().$stop_video_preview(id_f)
    } else 
    switch (params['$[]']("media").valueOf()) {
      case "video":
        return self.$html().$video_preview(id_f, true, false)
      case "audio":
        return self.$html().$video_preview(id_f, false, true)
      case "all":
        return self.$html().$video_preview(id_f, true, true)
      default:
        return self.$html().$video_preview(id_f, true, true)
    };}, {$$s: self, $$source_location: ['renderers/html/utility.rb', 117]});
  return $send(self, 'new', [(new Map([["renderer", "html"], ["method", "record"]]))], function $$20(params, user_proc){var $a, self = $$20.$$s == null ? this : $$20.$$s, duration = nil, $ret_or_1 = nil, media = nil, mode = nil, name = nil, path = nil, data = nil, stop = nil, type = nil;
    if (self.audio_recorder_type == null) self.audio_recorder_type = nil;
    if (self.video_recorder_type == null) self.video_recorder_type = nil;

    
    if (params == null) params = nil;
    if (user_proc == null) user_proc = nil;
    duration = ($truthy(($ret_or_1 = params['$[]']("duration"))) ? ($ret_or_1) : (($a = ["duration", 1000000], $send(params, '[]=', $a), $a[$a.length - 1])));
    media = ($truthy(($ret_or_1 = params['$[]']("media"))) ? ($ret_or_1) : (($a = ["media", "video"], $send(params, '[]=', $a), $a[$a.length - 1])));
    mode = ($truthy(($ret_or_1 = params['$[]']("mode"))) ? ($ret_or_1) : (($a = ["mode", "web"], $send(params, '[]=', $a), $a[$a.length - 1])));
    name = ($truthy(($ret_or_1 = params['$[]']("name"))) ? ($ret_or_1) : (($a = ["name", "record"], $send(params, '[]=', $a), $a[$a.length - 1])));
    path = ($truthy(($ret_or_1 = params['$[]']("path"))) ? ($ret_or_1) : (($a = ["path", "./"], $send(params, '[]=', $a), $a[$a.length - 1])));
    data = ($truthy(($ret_or_1 = params['$[]']("data"))) ? ($ret_or_1) : (($a = ["data", (new Map())], $send(params, '[]=', $a), $a[$a.length - 1])));
    stop = params['$[]']("stop");
    if ($truthy(stop)) {
      if (($eqeq(self.video_recorder_type, "web") || ($eqeq(self.audio_recorder_type, "web")))) {
        return self.$html().$stop_media_recorder(self.$id())
      } else if (($eqeq(self.video_recorder_type, "native") || ($eqeq(self.audio_recorder_type, "native")))) {
        return $$('A').$message((new Map([["action", "stop_recording"], ["data", params]])))
      } else {
        return nil
      }
    } else if ($eqeq(media, "video")) {
      
      type = ($truthy(($ret_or_1 = params['$[]']("type"))) ? ($ret_or_1) : (($a = ["type", "mp4"], $send(params, '[]=', $a), $a[$a.length - 1])));
      if ($eqeq(mode, "native")) {
        
        self.video_recorder_type = "native";
        return $send($$('A'), 'message', [(new Map([["action", "record"], ["data", (new Map([["type", type], ["duration", duration], ["name", name], ["path", path], ["media", media], ["data", data]]))]]))], function $$21(result){
          
          if (result == null) result = nil;
          return user_proc.$call(result);}, {$$source_location: ['renderers/html/utility.rb', 155]});
      } else {
        
        self.video_recorder_type = "web";
        return self.$html().$record_video(params);
      };
    } else if ($eqeq(media, "audio")) {
      
      type = ($truthy(($ret_or_1 = params['$[]']("type"))) ? ($ret_or_1) : (($a = ["type", "wav"], $send(params, '[]=', $a), $a[$a.length - 1])));
      if ($eqeq(mode, "native")) {
        
        self.audio_recorder_type = "native";
        return $send($$('A'), 'message', [(new Map([["action", "record"], ["data", (new Map([["type", type], ["duration", duration], ["name", name], ["path", path], ["media", media], ["data", data]]))]]))], function $$22(result){
          
          if (result == null) result = nil;
          return user_proc.$call(result);}, {$$source_location: ['renderers/html/utility.rb', 167]});
      } else {
        
        self.audio_recorder_type = "web";
        return self.$html().$record_audio(params);
      };
    } else {
      return nil
    };}, {$$s: self, $$source_location: ['renderers/html/utility.rb', 136]});
};

Opal.modules["renderers/html/index"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('require');
  
  self.$require("renderers/html/atome");
  self.$require("renderers/html/atome_html");
  self.$require("renderers/html/communication");
  self.$require("renderers/html/effect");
  self.$require("renderers/html/event");
  self.$require("renderers/html/geometry");
  self.$require("renderers/html/hierarchy");
  self.$require("renderers/html/html");
  self.$require("renderers/html/identity");
  self.$require("renderers/html/material");
  self.$require("renderers/html/property");
  self.$require("renderers/html//security");
  self.$require("renderers/html/spatial");
  self.$require("renderers/html//time");
  return self.$require("renderers/html/utility");
};

Opal.modules["renderers/headless/utility"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('build_render');
  
  $$('Genesis').$build_render("headless_schedule");
  return $$('Genesis').$build_render("headless_reader");
};

Opal.modules["renderers/headless/headless"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $def = Opal.def, $truthy = Opal.truthy, $nesting = [], nil = Opal.nil;

  
  (function($base, $super) {
    var self = $klass($base, $super, 'Atome');

    
    return $def(self, '$headless', function $$headless(_val) {
      
      
      if (_val == null) _val = nil;
      return nil;
    }, {$$arity: -1, $$source_location: ['renderers/headless/headless.rb', 6]})
  })($nesting[0], null);
  return (function($base, $super) {
    var self = $klass($base, $super, 'Headless');

    var $proto = self.$$prototype;

    $proto.element = nil;
    return $def(self, '$initialize', function $$initialize(id_found, current_atome) {
      var self = this, $ret_or_1 = nil;

      
      self.element = ($truthy(($ret_or_1 = self.element)) ? ($ret_or_1) : (self));
      self.id = id_found;
      return (self.original_atome = current_atome);
    }, {$$source_location: ['renderers/headless/headless.rb', 12]})
  })($nesting[0], null);
};

Opal.modules["renderers/headless/index"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('require');
  
  self.$require("renderers/headless/utility");
  return self.$require("renderers/headless/headless");
};

Opal.modules["renderers/server/utility"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('build_render');
  
  $$('Genesis').$build_render("server_schedule");
  return $$('Genesis').$build_render("server_reader");
};

Opal.modules["renderers/server/index"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('require');
  return self.$require("renderers/server/utility")
};

Opal.modules["atome/utilities/sanitizer"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $rb_divide = Opal.rb_divide, $def = Opal.def, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('private,css_rgb,[],split,gsub,sub,/,to_f');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Atome');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    self.$private();
    return $def(self, '$create_color_hash', function $$create_color_hash(params) {
      var rgb_color = nil, split_data = nil;

      
      rgb_color = $$$($$('Color'), 'CSS')['$[]'](params).$css_rgb();
      split_data = rgb_color.$sub("rgb(", "").$sub(")", "").$gsub(",", "").$split("%");
      return (new Map([["red", $rb_divide(split_data['$[]'](0).$to_f(), 100)], ["green", $rb_divide(split_data['$[]'](1).$to_f(), 100)], ["blue", $rb_divide(split_data['$[]'](2).$to_f(), 100)]]));
    }, {$$source_location: ['atome/utilities/sanitizer.rb', 7]});
  })($nesting[0], null, $nesting)
};

Opal.modules["atome/genesis/presets"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('new');
  
  self.$new((new Map([["preset", "box"]])));
  return self.$new((new Map([["preset", "circle"]])));
};

Opal.modules["atome/genesis/sparkle"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $const_set = Opal.const_set, $def = Opal.def, $send = Opal.send, $truthy = Opal.truthy, $not = Opal.not, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$, default_render = nil, machine_id = nil, machine_password = nil, user_password = nil, default_lang = nil;

  Opal.add_stubs('language=,[],default_params,new,human,identity_generator,current_machine=,puts,aui,app_identity,host,ip_address,engine,users,current_user,current_machine,example,text,touch,delete,help,atome_infos,current_server,!,include?,to_s,start_with?,connected=,server,init_websocket,sync,database_ready=,==,each,particle_list,send_localstorage_content,add_text_visual,language,grab,allow_localstorage=,allow_right_touch');
  
  $$('Universe')['$language=']("english");
  default_render = $$('Essentials').$default_params()['$[]']("render_engines");
  $$('Atome').$new((new Map([["renderers", []], ["aid", "eDen"], ["type", "element"], ["tag", (new Map([["system", true]]))]])));
  $$('Atome').$new((new Map([["renderers", []], ["aid", "user_view"], ["type", "element"], ["tag", (new Map([["system", true]]))], ["attach", "eDen"]])));
  $$('Atome').$new((new Map([["renderers", default_render], ["id", "view_color"], ["type", "color"], ["tag", (new Map([["system", true], ["persistent", true]]))], ["red", 0.15], ["green", 0.15], ["blue", 0.15], ["alpha", 1], ["top", 12], ["left", 12], ["diffusion", "linear"]])));
  $$('Atome').$new((new Map([["renderers", default_render], ["id", "shape_color"], ["type", "color"], ["tag", (new Map([["system", true], ["persistent", true]]))], ["red", 0.4], ["green", 0.4], ["blue", 0.4], ["alpha", 1]])));
  $$('Atome').$new((new Map([["renderers", default_render], ["id", "box_color"], ["type", "color"], ["tag", (new Map([["system", true], ["persistent", true]]))], ["red", 0.5], ["green", 0.5], ["blue", 0.5], ["alpha", 1]])));
  $$('Atome').$new((new Map([["renderers", default_render], ["id", "invisible_color"], ["type", "color"], ["tag", (new Map([["system", true], ["persistent", true]]))], ["red", 0], ["green", 0], ["blue", 0], ["alpha", 1]])));
  $$('Atome').$new((new Map([["renderers", default_render], ["id", "text_color"], ["type", "color"], ["tag", (new Map([["system", true], ["persistent", true]]))], ["red", 0.9], ["green", 0.9], ["blue", 0.9], ["alpha", 1]])));
  $$('Atome').$new((new Map([["renderers", default_render], ["id", "circle_color"], ["type", "color"], ["tag", (new Map([["system", true], ["persistent", true]]))], ["red", 0.6], ["green", 0.6], ["blue", 0.6], ["alpha", 1]])));
  $$('Atome').$new((new Map([["renderers", default_render], ["id", "back_selection"], ["type", "color"], ["tag", (new Map([["system", true], ["persistent", true]]))], ["red", 0.6], ["green", 0.6], ["blue", 0.1], ["alpha", 0.7]])));
  $$('Atome').$new((new Map([["renderers", default_render], ["id", "text_selection"], ["type", "color"], ["tag", (new Map([["system", true], ["persistent", true]]))], ["red", 0.3], ["green", 0.3], ["blue", 0.3], ["alpha", 0.9]])));
  $$('Atome').$new((new Map([["renderers", default_render], ["aid", "black_matter"], ["type", "shape"], ["attach", "user_view"], ["left", 0], ["right", 0], ["top", 0], ["bottom", 0], ["width", 0], ["height", 0], ["overflow", "hidden"], ["tag", (new Map([["system", true]]))]])));
  $$('Atome').$new((new Map([["renderers", default_render], ["aid", "view"], ["type", "shape"], ["attach", "user_view"], ["apply", ["view_color"]], ["tag", (new Map([["system", true]]))], ["left", 0], ["right", 0], ["top", 0], ["bottom", 0], ["width", "auto"], ["height", "auto"], ["overflow", "auto"]])));
  $$('Atome').$new((new Map([["renderers", default_render], ["aid", "intuition"], ["type", "shape"], ["attach", "user_view"], ["data", (new Map())], ["tag", (new Map([["system", true]]))], ["left", 0], ["top", 0], ["bottom", 0], ["width", 0], ["height", "auto"], ["overflow", "visible"]])));
  machine_id = "dummy_machine";
  machine_password = (new Map([["read", (new Map([["atome", "star_wars"]]))], ["write", (new Map([["atome", "star_wars"]]))]]));
  $$('Atome').$new((new Map([["renderers", ["html"]], ["aid", "copy"], ["collect", []], ["type", "group"], ["tag", (new Map([["system", true]]))]])));
  $$('Atome').$new((new Map([["renderers", default_render], ["id", machine_id], ["type", "machine"], ["password", machine_password], ["name", "macAir"], ["data", (new Map([["date", "10090717"]]))], ["tag", (new Map([["system", true]]))]])));
  user_password = (new Map([["global", "star_win"], ["read", (new Map([["atome", "star_wars"]]))], ["write", (new Map([["atome", "star_wars"]]))]]));
  self.$human((new Map([["id", self.$identity_generator()], ["login", true], ["password", user_password], ["data", (new Map([["birthday", "10/05/1996"]]))], ["selection", []], ["attach", "user_view"]])));
  $$('Universe')['$current_machine='](machine_id);
  $const_set($nesting[0], 'A', $$('Atome').$new((new Map([["renderers", default_render], ["id", "atome"], ["type", "element"], ["tag", (new Map([["system", true]]))]]))));
  $$('Atome').$new((new Map([["renderers", ["html"]], ["aid", "selector"], ["collect", []], ["type", "group"], ["tag", (new Map([["system", true]]))]])));
  
  $def(self, '$atome_infos', function $$atome_infos() {
    var self = this;

    
    self.$puts("atome version: " + ($$$($$('Atome'), 'VERSION')));
    self.$puts("device identity: " + ($$('Atome').$aui()));
    self.$puts("application identity: " + ($$('Universe').$app_identity()));
    self.$puts("host framework: " + ($$('Atome').$host()));
    self.$puts("IP adress: " + ($$('Atome').$ip_address()));
    self.$puts("engine: " + ($$('Universe').$engine()));
    self.$puts("users: " + ($$('Universe').$users()));
    self.$puts("current user: " + ($$('Universe').$current_user()));
    return self.$puts("machine: " + ($$('Universe').$current_machine()));
  }, {$$source_location: ['atome/genesis/sparkle.rb', 123]});
  $send($$('A'), 'example', ["left"], function $$1(){var self = $$1.$$s == null ? this : $$1.$$s, english = nil, french = nil, code = nil, example = nil, code_text = nil;

    
    english = "here is an example, touch me to get some help, or click the code to exec";
    french = "voici un example, click moi pour de l'aide, ou  clicker le code pour l'executer";
    code = "b=box\n" + "puts b.left\n" + "b.left(155)\n" + "puts b.left\n";
    example = self.$text((new Map([["int8", (new Map([["english", english], ["french", french]]))], ["width", 666]])));
    code_text = self.$text((new Map([["int8", (new Map([["english", code]]))], ["width", 666], ["top", 33]])));
    $send(example, 'touch', [true], function $$2(){var self = $$2.$$s == null ? this : $$2.$$s;

      
      example.$delete(true);
      return self.$help("left");}, {$$s: self, $$source_location: ['atome/genesis/sparkle.rb', 152]});
    return $send(code_text, 'touch', [true], function $$3(){var $a, self = $$3.$$s == null ? this : $$3.$$s;

      return ($a = code, typeof Opal.compile === 'function' ? eval(Opal.compile($a, {scope_variables: ["english", "french", "code", "example", "code_text", "default_render", "machine_id", "machine_password", "user_password"], arity_check: false, file: '(eval)', eval: true})) : self.$eval($a))}, {$$s: self, $$source_location: ['atome/genesis/sparkle.rb', 156]});}, {$$s: self, $$source_location: ['atome/genesis/sparkle.rb', 137]});
  
  $def(self, '$atome_genesis', function $$atome_genesis() {
    var self = this, server = nil, $ret_or_1 = nil, address_found = nil;

    
    self.$atome_infos();
    server = $$('Universe').$current_server();
    server = ($truthy(($ret_or_1 = server)) ? ($ret_or_1) : ("disconnected"));
    self.$puts("current server: " + (server));
    if (($truthy(server['$start_with?']("http")) && ($not($$('Atome').$host().$to_s()['$include?']("tauri"))))) {
      
      $$('Universe')['$connected='](true);
      address_found = "" + ($$('Atome').$ip_address()) + ":9292";
      $$('A').$server((new Map([["address", address_found], ["type", "ws"]])));
      return $$('A').$init_websocket();
    } else {
      return nil
    };
  }, {$$source_location: ['atome/genesis/sparkle.rb', 162]});
  
  $def(self, '$init_database', function $$init_database() {
    
    
    $send($$('A'), 'sync', [(new Map([["action", "init_db"], ["data", (new Map([["database", "eDen"]]))]]))], function $$4(data){var $a;

      
      if (data == null) data = nil;
      return ($a = [data['$[]']("data")['$[]']("message")['$==']("database_ready")], $send($$('Universe'), 'database_ready=', $a), $a[$a.length - 1]);}, {$$source_location: ['atome/genesis/sparkle.rb', 186]});
    $send($$('A'), 'sync', [(new Map([["action", "create_db_table"], ["data", (new Map([["table", "user"], ["type", "string"]]))]]))], function $$5(_db_state){
      
      if (_db_state == null) _db_state = nil;
      return nil;}, {$$source_location: ['atome/genesis/sparkle.rb', 190]});
    $send($$('A'), 'sync', [(new Map([["action", "create_db_table"], ["data", (new Map([["table", "atome"]]))]]))], function $$6(_db_state){
      
      if (_db_state == null) _db_state = nil;
      return nil;}, {$$source_location: ['atome/genesis/sparkle.rb', 192]});
    $send($$('A'), 'sync', [(new Map([["action", "create_db_table"], ["data", (new Map([["table", "history"]]))]]))], function $$7(_db_state){
      
      if (_db_state == null) _db_state = nil;
      return nil;}, {$$source_location: ['atome/genesis/sparkle.rb', 195]});
    $send($$('A'), 'sync', [(new Map([["action", "create_db_column"], ["data", (new Map([["table", "user"], ["column", "phone"], ["type", "string"], ["unique", true]]))]]))], function $$8(_db_state){
      
      if (_db_state == null) _db_state = nil;
      return nil;}, {$$source_location: ['atome/genesis/sparkle.rb', 198]});
    $send($$('A'), 'sync', [(new Map([["action", "create_db_column"], ["data", (new Map([["table", "user"], ["column", "name"], ["type", "string"]]))]]))], function $$9(_db_state){
      
      if (_db_state == null) _db_state = nil;
      return nil;}, {$$source_location: ['atome/genesis/sparkle.rb', 200]});
    $send($$('A'), 'sync', [(new Map([["action", "create_db_column"], ["data", (new Map([["table", "user"], ["column", "password"], ["type", "string"]]))]]))], function $$10(_db_state){
      
      if (_db_state == null) _db_state = nil;
      return nil;}, {$$source_location: ['atome/genesis/sparkle.rb', 202]});
    $send($$('A'), 'sync', [(new Map([["action", "create_db_column"], ["data", (new Map([["table", "history"], ["column", "aid"], ["type", "string"]]))]]))], function $$11(_db_state){
      
      if (_db_state == null) _db_state = nil;
      return nil;}, {$$source_location: ['atome/genesis/sparkle.rb', 204]});
    $send($$('A'), 'sync', [(new Map([["action", "create_db_column"], ["data", (new Map([["table", "history"], ["column", "particle"], ["type", "string"]]))]]))], function $$12(_db_state){
      
      if (_db_state == null) _db_state = nil;
      return nil;}, {$$source_location: ['atome/genesis/sparkle.rb', 206]});
    $send($$('A'), 'sync', [(new Map([["action", "create_db_column"], ["data", (new Map([["table", "history"], ["column", "value"], ["type", "string"]]))]]))], function $$13(_db_state){
      
      if (_db_state == null) _db_state = nil;
      return nil;}, {$$source_location: ['atome/genesis/sparkle.rb', 208]});
    $send($$('A'), 'sync', [(new Map([["action", "create_db_column"], ["data", (new Map([["table", "history"], ["column", "date"], ["type", "datetime"]]))]]))], function $$14(_db_state){
      
      if (_db_state == null) _db_state = nil;
      return nil;}, {$$source_location: ['atome/genesis/sparkle.rb', 210]});
    $send($$('Universe').$particle_list(), 'each', [], function $$15(particle){var particle_name = nil, particle_type = nil;

      
      if (particle == null) particle = nil;
      particle_name = particle['$[]'](0);
      particle_type = particle['$[]'](1)['$[]']("type");
      return $send($$('A'), 'sync', [(new Map([["action", "create_db_column"], ["data", (new Map([["table", "atome"], ["column", particle_name], ["type", particle_type]]))]]))], function $$16(_db_state){
        
        if (_db_state == null) _db_state = nil;
        return nil;}, {$$source_location: ['atome/genesis/sparkle.rb', 216]});}, {$$source_location: ['atome/genesis/sparkle.rb', 213]});
    return $$('Atome').$send_localstorage_content();
  }, {$$source_location: ['atome/genesis/sparkle.rb', 184]});
  $$('A').$add_text_visual((new Map([["path", "Roboto"], ["name", "Roboto-Bold"]])));
  $$('A').$add_text_visual((new Map([["path", "Roboto"], ["name", "Roboto-Thin"]])));
  $$('A').$add_text_visual((new Map([["path", "Roboto"], ["name", "Roboto-LightItalic"]])));
  default_lang = "english";
  self.$grab("view").$language(default_lang);
  self.$grab("intuition").$language(default_lang);
  $$('Universe')['$allow_localstorage='](true);
  return self.$allow_right_touch(true);
};

Opal.modules["molecules/init"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $module = Opal.module, $klass = Opal.klass, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('include');
  
  $module($nesting[0], 'Molecule');
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Object');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    return self.$include($$('Molecule'))
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Atome');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    return self.$include($$('Molecule'))
  })($nesting[0], null, $nesting);
};

Opal.modules["molecules/intuition/utilities"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $send = Opal.send, $eqeq = Opal.eqeq, $rb_plus = Opal.rb_plus, $rb_times = Opal.rb_times, $def = Opal.def, $truthy = Opal.truthy, $hash_rehash = Opal.hash_rehash, $rb_gt = Opal.rb_gt, $rb_minus = Opal.rb_minus, $rb_divide = Opal.rb_divide, $rb_lt = Opal.rb_lt, $to_ary = Opal.to_ary, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('[],data,reject,include?,each_with_index,fasten,grab,==,left=,+,*,top=,each,spacing,role,top,height,delete,reorder_menu,select,box,actor,text,code,set,touch,id,remove,call,length,create_new_button,width,to_px,**,collect,>,-,/,left,%,floor,merge,new,[]=,identity_generator,instance_of?,renderers,tick,edit,component,keyboard,Native,to_s,preventDefault,data=,send,holder,shadow,apply,color,lambda,<,smooth,to_f,instance_variable_set,behavior,round,clamp,drag,value,group,end_with?,times,<<,cells,buttons,define_singleton_method,to_sym,reorder_blocs,puts,show,add_button,category,sub_block,bottom,right,remove_key_pair_but,filter_keys_to_keep,deep_copy,each_key');
  
  (function($base, $super) {
    var self = $klass($base, $super, 'Atome');

    
    
    
    $def(self, '$reorder_menu', function $$reorder_menu() {
      var self = this, disposition = nil, margin = nil, spacing = nil, inactive_style = nil, keys_to_exclude = nil;

      
      disposition = self.$data()['$[]']("inactive")['$[]']("disposition");
      margin = self.$data()['$[]']("inactive")['$[]']("margin");
      spacing = self.$data()['$[]']("inactive")['$[]']("spacing");
      inactive_style = self.$data()['$[]']("inactive");
      keys_to_exclude = ["margin", "spacing", "disposition", "text"];
      inactive_style = $send(inactive_style, 'reject', [], function $$1(key, _){
        
        if (key == null) key = nil;
        if (_ == null) _ = nil;
        return keys_to_exclude['$include?'](key);}, {$$source_location: ['molecules/intuition/utilities.rb', 12]});
      return $send(self.$fasten(), 'each_with_index', [], function $$2(atome_f, index){var $a, self = $$2.$$s == null ? this : $$2.$$s, menu_item = nil;

        
        if (atome_f == null) atome_f = nil;
        if (index == null) index = nil;
        menu_item = self.$grab(atome_f);
        if ($eqeq(disposition, "horizontal")) {
          
          menu_item['$left=']($rb_plus(margin['$[]']("left"), $rb_times($rb_plus(inactive_style['$[]']("width"), spacing), index)));
          return ($a = [margin['$[]']("top")], $send(menu_item, 'top=', $a), $a[$a.length - 1]);
        } else {
          
          menu_item['$top=']($rb_plus(margin['$[]']("top"), $rb_times($rb_plus(inactive_style['$[]']("height"), spacing), index)));
          return ($a = [margin['$[]']("left")], $send(menu_item, 'left=', $a), $a[$a.length - 1]);
        };}, {$$s: self, $$source_location: ['molecules/intuition/utilities.rb', 13]});
    }, {$$source_location: ['molecules/intuition/utilities.rb', 5]});
    
    $def(self, '$reorder_blocs', function $$reorder_blocs() {
      var self = this;

      
      self.prev_bloc_height = 0;
      return $send(self.$fasten(), 'each', [], function $$3(bloc_f){var self = $$3.$$s == null ? this : $$3.$$s, potential_bloc = nil, spacing = nil;
        if (self.prev_bloc_height == null) self.prev_bloc_height = nil;

        
        if (bloc_f == null) bloc_f = nil;
        potential_bloc = self.$grab(bloc_f);
        spacing = potential_bloc.$spacing();
        if (($truthy(potential_bloc.$role()) && ($truthy(potential_bloc.$role()['$include?']("block"))))) {
          
          potential_bloc.$top($rb_plus(spacing, self.prev_bloc_height));
          return (self.prev_bloc_height = $rb_plus($rb_plus(self.prev_bloc_height, potential_bloc.$height()), spacing));
        } else {
          return nil
        };}, {$$s: self, $$source_location: ['molecules/intuition/utilities.rb', 27]});
    }, {$$source_location: ['molecules/intuition/utilities.rb', 25]});
    
    $def(self, '$remove_menu_item', function $$remove_menu_item(item_to_remove) {
      var self = this;

      
      self.$grab(item_to_remove).$delete((new Map([["recursive", true]])));
      return self.$reorder_menu();
    }, {$$source_location: ['molecules/intuition/utilities.rb', 37]});
    
    $def(self, '$create_new_button', function $$create_new_button(button_id, position_in_menu, label, code) {
      var self = this, essential_keys = nil, buttons_style = nil, menu_item = nil, inactive_style = nil, active_style = nil, active_state_text = nil, keys_to_exclude = nil, inactive_state_text = nil, margin = nil, spacing = nil, disposition = nil;

      
      essential_keys = ["inactive", "active"];
      buttons_style = $send(self.$data(), 'select', [], function $$4(key, _value){
        
        if (key == null) key = nil;
        if (_value == null) _value = nil;
        return essential_keys['$include?'](key);}, {$$source_location: ['molecules/intuition/utilities.rb', 44]});
      menu_item = self.$box((new Map([["id", button_id]])));
      self.$actor($hash_rehash(new Map([[button_id, "button"]])));
      menu_item.$role("button");
      menu_item.$text((new Map([["data", label], ["id", "" + (button_id) + "_label"]])));
      menu_item.$code((new Map([["button_code", code]])));
      inactive_style = buttons_style['$[]']("inactive");
      active_style = buttons_style['$[]']("active");
      if ($truthy(active_style)) {
        
        active_state_text = active_style['$[]']("text");
        keys_to_exclude = ["margin", "spacing", "disposition", "text"];
        active_style = $send(active_style, 'reject', [], function $$5(key, _){
          
          if (key == null) key = nil;
          if (_ == null) _ = nil;
          return keys_to_exclude['$include?'](key);}, {$$source_location: ['molecules/intuition/utilities.rb', 57]});
      };
      if ($truthy(inactive_style)) {
        
        inactive_state_text = inactive_style['$[]']("text");
        margin = inactive_style['$[]']("margin");
        spacing = inactive_style['$[]']("spacing");
        disposition = inactive_style['$[]']("disposition");
        keys_to_exclude = ["margin", "spacing", "disposition", "text"];
        inactive_style = $send(inactive_style, 'reject', [], function $$6(key, _){
          
          if (key == null) key = nil;
          if (_ == null) _ = nil;
          return keys_to_exclude['$include?'](key);}, {$$source_location: ['molecules/intuition/utilities.rb', 66]});
        menu_item.$set(inactive_style);
        if ($eqeq(disposition, "horizontal")) {
          
          menu_item['$left=']($rb_plus(margin['$[]']("left"), $rb_times($rb_plus(inactive_style['$[]']("width"), spacing), position_in_menu)));
          menu_item['$top='](margin['$[]']("top"));
        } else {
          
          menu_item['$top=']($rb_plus(margin['$[]']("top"), $rb_times($rb_plus(inactive_style['$[]']("height"), spacing), position_in_menu)));
          menu_item['$left='](margin['$[]']("left"));
        };
        $send(menu_item.$text(), 'each', [], function $$7(text_f){var self = $$7.$$s == null ? this : $$7.$$s, item_found = nil;

          
          if (text_f == null) text_f = nil;
          item_found = self.$grab(text_f);
          return item_found.$set(inactive_state_text);}, {$$s: self, $$source_location: ['molecules/intuition/utilities.rb', 77]});
      };
      return $send(menu_item, 'touch', ["down"], function $$8(){var $a, self = $$8.$$s == null ? this : $$8.$$s;
        if (self.active_item == null) self.active_item = nil;

        if ($eqeq(self.active_item, menu_item.$id())) {
          return nil
        } else {
          
          $send(menu_item.$text(), 'each', [], function $$9(text_f){var self = $$9.$$s == null ? this : $$9.$$s;

            
            if (text_f == null) text_f = nil;
            return $send(self.$fasten(), 'each', [], function $$10(item_id){var self = $$10.$$s == null ? this : $$10.$$s;

              
              if (item_id == null) item_id = nil;
              if (!$eqeq(button_id, item_id)) {
                
                self.$grab(item_id).$remove((new Map([["all", "shadow"]])));
                self.$grab(item_id).$set(inactive_style);
                self.$grab("" + (item_id) + "_label").$remove((new Map([["all", "shadow"]])));
                self.$grab("" + (item_id) + "_label").$set(inactive_state_text);
              };
              return self.$grab(text_f).$set(active_state_text);}, {$$s: self, $$source_location: ['molecules/intuition/utilities.rb', 89]});}, {$$s: self, $$source_location: ['molecules/intuition/utilities.rb', 87]});
          menu_item.$set(active_style);
          ($a = code, ($a === nil || $a == null) ? nil : $a.$call());
          return (self.active_item = menu_item.$id());
        }}, {$$s: self, $$source_location: ['molecules/intuition/utilities.rb', 84]});
    }, {$$source_location: ['molecules/intuition/utilities.rb', 42]});
    
    $def(self, '$add_button', function $$add_button(params) {
      var self = this;

      
      $send(params, 'each', [], function $$11(button_id, params){var self = $$11.$$s == null ? this : $$11.$$s, label = nil, code = nil, index = nil;

        
        if (button_id == null) button_id = nil;
        if (params == null) params = nil;
        label = params['$[]']("text");
        code = params['$[]']("code");
        index = self.$fasten().$length();
        return self.$create_new_button(button_id, index, label, code);}, {$$s: self, $$source_location: ['molecules/intuition/utilities.rb', 110]});
      return false;
    }, {$$source_location: ['molecules/intuition/utilities.rb', 109]});
    
    $def(self, '$resize_matrix', function $$resize_matrix(params) {
      var self = this, current_matrix = nil, real_width = nil, real_height = nil, spacing = nil, matrix_cells = nil, total_spacing_x = nil, total_spacing_y = nil, full_size = nil, available_width = nil, available_height = nil, box_width = nil, box_height = nil;

      
      self.$width(params['$[]']("width"));
      self.$height(params['$[]']("height"));
      current_matrix = self;
      real_width = current_matrix.$to_px("width");
      real_height = current_matrix.$to_px("height");
      spacing = current_matrix.$data()['$[]']("spacing");
      matrix_cells = current_matrix.$data()['$[]']("matrix");
      total_spacing_x = $rb_times(spacing, $rb_plus(matrix_cells.$collect().$length()['$**'](0.5), 1));
      total_spacing_y = $rb_times(spacing, $rb_plus(matrix_cells.$collect().$length()['$**'](0.5), 1));
      if ($truthy($rb_gt(real_width, real_height))) {
        
        full_size = real_width;
        available_width = $rb_minus(full_size, total_spacing_x);
        available_height = $rb_minus(full_size, total_spacing_y);
      } else {
        
        full_size = real_width;
        available_width = $rb_minus(full_size, total_spacing_x);
        available_height = $rb_minus(full_size, total_spacing_y);
      };
      box_width = $rb_divide(available_width, matrix_cells.$collect().$length()['$**'](0.5));
      box_height = $rb_divide(available_height, matrix_cells.$collect().$length()['$**'](0.5));
      return $send(matrix_cells.$collect(), 'each_with_index', [], function $$12(box_id, index){var self = $$12.$$s == null ? this : $$12.$$s, box = nil;

        
        if (box_id == null) box_id = nil;
        if (index == null) index = nil;
        box = self.$grab(box_id);
        box.$width(box_width);
        box.$height(box_height);
        box.$left($rb_plus($rb_times($rb_plus(box_width, spacing), index['$%'](matrix_cells.$collect().$length()['$**'](0.5))), spacing));
        return box.$top($rb_plus($rb_times($rb_plus(box_height, spacing), $rb_divide(index, matrix_cells.$collect().$length()['$**'](0.5)).$floor()), spacing));}, {$$s: self, $$source_location: ['molecules/intuition/utilities.rb', 144]});
    }, {$$source_location: ['molecules/intuition/utilities.rb', 119]});
    return $def(self, '$drop_down', function $$drop_down(params) {
      var code = $$drop_down.$$p || nil, self = this, data_f = nil, text_f = nil, $ret_or_1 = nil, margin = nil, default_params = nil, b = nil, item_height = nil, temp_width = nil;

      $$drop_down.$$p = null;
      
      ;
      data_f = params.$delete("data");
      text_f = ($truthy(($ret_or_1 = params.$delete("text"))) ? ($ret_or_1) : ((new Map([["component", (new Map([["size", 12]]))], ["color", "lightgray"]]))));
      margin = ($truthy(($ret_or_1 = params.$delete("margin"))) ? ($ret_or_1) : (6));
      default_params = (new Map([["width", 150], ["height", 25], ["smooth", 3], ["shadow", (new Map([["blur", 12], ["alpha", 0.3], ["left", 0], ["top", 0]]))]]));
      params = default_params.$merge(params);
      b = self.$grab("view").$box(params.$merge((new Map([["depth", 33333], ["left", self.$to_px("left")], ["top", self.$to_px("top")]]))));
      item_height = $rb_plus(params['$[]']("height"), margin);
      if ($truthy($rb_gt(text_f['$[]']("component")['$[]']("size"), item_height))) {
        item_height = $rb_plus(text_f['$[]']("component")['$[]']("size"), $rb_times(margin, 2))
      };
      b.$height($rb_times(data_f.$length(), item_height));
      temp_width = 0;
      $send(data_f, 'each_with_index', [], function $$13(label, index){var item_f = nil;

        
        if (label == null) label = nil;
        if (index == null) index = nil;
        item_f = b.$text(text_f.$merge((new Map([["left", margin], ["data", label], ["position", "absolute"], ["top", $rb_plus($rb_times(item_height, index), margin)]]))));
        if ($truthy($rb_gt(item_f.$to_px("width"), temp_width))) {
          temp_width = item_f.$to_px("width")
        };
        return $send(item_f, 'touch', ["down"], function $$14(){
          
          code.$call(label);
          return b.$delete(true);}, {$$source_location: ['molecules/intuition/utilities.rb', 175]});}, {$$source_location: ['molecules/intuition/utilities.rb', 172]});
      return b.$width($rb_plus(temp_width, $rb_times(margin, 2)));
    }, {$$source_location: ['molecules/intuition/utilities.rb', 154]});
  })($nesting[0], null);
  $send(self, 'new', [(new Map([["molecule", "input"]]))], function $$15(params, bloc){var self = $$15.$$s == null ? this : $$15.$$s, $ret_or_1 = nil, new_id = nil, trigger = nil, limit = nil, back_col = nil, text_params = nil, default_text = nil, component = nil, default_parent = nil, attach_to = nil, renderer_found = nil, input_back = nil, text_input = nil;

    
    if (params == null) params = nil;
    if (bloc == null) bloc = nil;
    if ($truthy(($ret_or_1 = params['$[]']("height")))) {
      $ret_or_1
    } else {
      params['$[]=']("height", 15)
    };
    if ($truthy(($ret_or_1 = params['$[]']("width")))) {
      $ret_or_1
    } else {
      params['$[]=']("width", 222)
    };
    new_id = ($truthy(($ret_or_1 = params.$delete("id"))) ? ($ret_or_1) : (self.$identity_generator()));
    trigger = params.$delete("trigger");
    trigger = ($truthy(($ret_or_1 = trigger)) ? ($ret_or_1) : ("return"));
    limit = params.$delete("limit");
    limit = ($truthy(($ret_or_1 = limit)) ? ($ret_or_1) : (15));
    back_col = params.$delete("back");
    back_col = ($truthy(($ret_or_1 = back_col)) ? ($ret_or_1) : ("grey"));
    text_params = params.$delete("text");
    text_params = ($truthy(($ret_or_1 = text_params)) ? ($ret_or_1) : ((new Map())));
    default_text = params.$delete("default");
    component = params.$delete("component");
    default_text = ($truthy(($ret_or_1 = default_text)) ? ($ret_or_1) : ("input"));
    default_parent = ($truthy(self['$instance_of?']($$('Atome'))) ? (self.$id()) : ("view"));
    attach_to = ($truthy(($ret_or_1 = params['$[]']("attach"))) ? ($ret_or_1) : (default_parent));
    renderer_found = self.$grab(attach_to).$renderers();
    input_back = $$('Atome').$new((new Map([["renderers", renderer_found], ["id", new_id], ["type", "shape"], ["color", back_col], ["left", 0], ["top", 0], ["data", ""], ["attach", attach_to], ["smooth", 6], ["overflow", "hidden"]])));
    text_input = $$('Atome').$new((new Map([["renderers", ["html"]], ["type", "text"], ["component", component], ["data", default_text], ["left", $rb_divide($rb_times(params['$[]']("height"), 20), 100)], ["top", 0], ["edit", true], ["attach", input_back.$id()], ["height", params['$[]']("height")], ["position", "absolute"]])).$merge(text_params));
    $send(input_back, 'touch', ["down"], function $$16(){
      
      input_back.$tick("input");
      return text_input.$edit(true);}, {$$source_location: ['molecules/intuition/utilities.rb', 218]});
    $send(input_back, 'touch', ["up"], function $$17(){
      return text_input.$component((new Map([["selected", false]])))}, {$$source_location: ['molecules/intuition/utilities.rb', 223]});
    $send(text_input, 'keyboard', ["down"], function $$18(native_event){var self = $$18.$$s == null ? this : $$18.$$s, event = nil;

      
      if (native_event == null) native_event = nil;
      event = self.$Native(native_event);
      if (!($eqeq(event['$[]']("keyCode").$to_s(), "8") || ($eqeq(event['$[]']("keyCode").$to_s(), "46")))) {
        if ($eqeq(event['$[]']("keyCode").$to_s(), "13")) {
          
          if ($eqeq(trigger, "return")) {
            bloc.$call(text_input.$data())
          };
          text_input.$edit(false);
          event.$preventDefault();
        } else if ($truthy($rb_gt(text_input.$data().$length(), limit))) {
          event.$preventDefault()
        }
      };
      if ($eqeq(trigger, "down")) {
        return bloc.$call(text_input.$data())
      } else {
        return nil
      };}, {$$s: self, $$source_location: ['molecules/intuition/utilities.rb', 227]});
    $send(text_input, 'keyboard', ["up"], function $$19(_native_event){
      
      if (_native_event == null) _native_event = nil;
      input_back['$data='](text_input.$data());
      if ($eqeq(trigger, "up")) {
        return bloc.$call(text_input.$data())
      } else {
        return nil
      };}, {$$source_location: ['molecules/intuition/utilities.rb', 242]});
    $send(params, 'each', [], function $$20(part_f, val_f){
      
      if (part_f == null) part_f = nil;
      if (val_f == null) val_f = nil;
      return input_back.$send(part_f, val_f);}, {$$source_location: ['molecules/intuition/utilities.rb', 246]});
    input_back.$holder(text_input);
    return input_back;}, {$$s: self, $$source_location: ['molecules/intuition/utilities.rb', 184]});
  $send(self, 'new', [(new Map([["molecule", "list"]]))], function $$21(params, _bloc){var self = $$21.$$s == null ? this : $$21.$$s, styles_found = nil, element = nil, listing = nil, action = nil, new_id = nil, $ret_or_1 = nil, margin = nil, height_found = nil, default_parent = nil, attach_to = nil, renderer_found = nil, list = nil;

    
    if (params == null) params = nil;
    if (_bloc == null) _bloc = nil;
    styles_found = params.$delete("styles");
    element = params.$delete("element");
    listing = params.$delete("listing");
    action = params.$delete("action");
    new_id = ($truthy(($ret_or_1 = params.$delete("id"))) ? ($ret_or_1) : (self.$identity_generator()));
    styles_found = ($truthy(($ret_or_1 = styles_found)) ? ($ret_or_1) : ((new Map([["width", 99], ["height", 33], ["margin", 6], ["shadow", (new Map([["blur", 9], ["left", 3], ["top", 3], ["id", "cell_shadow"], ["red", 0], ["green", 0], ["blue", 0], ["alpha", 0.6]]))], ["left", 0], ["color", "yellowgreen"]]))));
    element = ($truthy(($ret_or_1 = element)) ? ($ret_or_1) : ((new Map([["width", 33], ["height", 33], ["left", "center"], ["top", "center"], ["color", "orange"], ["type", "text"]]))));
    if (!$truthy(params['$[]']("width"))) {
      params['$[]=']("width", styles_found['$[]']("width"))
    };
    if (!$truthy(element['$[]']("width"))) {
      element['$[]=']("width", styles_found['$[]'](self.$width()))
    };
    margin = styles_found['$[]']("margin");
    height_found = styles_found['$[]']("height");
    default_parent = ($truthy(self['$instance_of?']($$('Atome'))) ? (self.$id()) : ("view"));
    attach_to = ($truthy(($ret_or_1 = params['$[]']("attach"))) ? ($ret_or_1) : (default_parent));
    renderer_found = self.$grab(attach_to).$renderers();
    list = $$('Atome').$new((new Map([["renderers", renderer_found], ["id", new_id], ["type", "shape"], ["color", (new Map([["alpha", 0]]))], ["attach", attach_to]])).$merge(params));
    $send(listing, 'each_with_index', [], function $$22(data, index){var self = $$22.$$s == null ? this : $$22.$$s, new_atome = nil, el = nil, line_content = nil;

      
      if (data == null) data = nil;
      if (index == null) index = nil;
      new_atome = (new Map([["renderers", renderer_found], ["attach", list.$id()]])).$merge(styles_found).$merge((new Map([["type", "shape"]])));
      el = $$('Atome').$new(new_atome);
      el.$top($rb_times($rb_plus(height_found, margin), index));
      line_content = $$('Atome').$new((new Map([["renderers", renderer_found], ["attach", el.$id()]])).$merge(element).$merge(data));
      if ($truthy(action)) {
        return $send(line_content, 'touch', [action['$[]']("touch")], function $$23(event){var self = $$23.$$s == null ? this : $$23.$$s;

          
          if (event == null) event = nil;
          return self.$send(action['$[]']("method"), data);}, {$$s: self, $$source_location: ['molecules/intuition/utilities.rb', 309]})
      } else {
        return nil
      };}, {$$s: self, $$source_location: ['molecules/intuition/utilities.rb', 291]});
    return list;}, {$$s: self, $$source_location: ['molecules/intuition/utilities.rb', 253]});
  $send(self, 'new', [(new Map([["molecule", "slider"]]))], function $$24(params, bloc){var $a, self = $$24.$$s == null ? this : $$24.$$s, default_value = nil, $ret_or_1 = nil, orientation = nil, range_found = nil, min_value = nil, max_value = nil, color_found = nil, new_id = nil, default_smooth = nil, default_slider_particles = nil, default_cursor_particles = nil, cursor_found = nil, slider_particle = nil, slider = nil, slider_shadow = nil, range = nil, cursor_particle = nil, cursor = nil, cursor_left = nil, cursor_top = nil, my_behavior = nil, update_value = nil, cursor_top_initial = nil, cursor_left_initial = nil;

    
    if (params == null) params = nil;
    if (bloc == null) bloc = nil;
    default_value = ($truthy(($ret_or_1 = params['$[]']("value"))) ? ($ret_or_1) : (($a = ["value", 0], $send(params, '[]=', $a), $a[$a.length - 1])));
    orientation = ($truthy(($ret_or_1 = params.$delete("orientation"))) ? ($ret_or_1) : ("horizontal"));
    range_found = params.$delete("range");
    min_value = ($truthy(($ret_or_1 = params.$delete("min"))) ? ($ret_or_1) : (0));
    max_value = ($truthy(($ret_or_1 = params.$delete("max"))) ? ($ret_or_1) : (100));
    color_found = ($truthy(($ret_or_1 = params['$[]']("color"))) ? ($ret_or_1) : (($a = ["color", "gray"], $send(params, '[]=', $a), $a[$a.length - 1])));
    new_id = ($truthy(($ret_or_1 = params.$delete("id"))) ? ($ret_or_1) : (self.$identity_generator()));
    default_smooth = 9;
    default_slider_particles = (new Map([["id", new_id], ["color", color_found], ["width", 333], ["height", 33], ["left", 0], ["top", 0], ["smooth", default_smooth], ["tag", (new Map([["system", true]]))]]));
    default_cursor_particles = (new Map([["color", color_found], ["width", 29], ["height", 29], ["left", 0], ["smooth", "100%"], ["tag", (new Map([["system", true]]))]]));
    cursor_found = params.$delete("cursor");
    slider_particle = default_slider_particles.$merge(params);
    slider = self.$box(slider_particle);
    slider.$remove("box_color");
    slider_shadow = slider.$shadow((new Map([["id", "s2"], ["left", 3], ["top", 3], ["blur", 9], ["invert", true], ["red", 0], ["green", 0], ["blue", 0], ["alpha", 0.7]])));
    range = slider.$box((new Map([["id", "" + (slider.$id()) + "_range"], ["top", "auto"], ["bottom", 0], ["tag", (new Map([["system", true]]))]])));
    range.$remove("box_color");
    if ($truthy(range_found)) {
      
      range.$apply(slider_shadow.$id());
      $send(range_found, 'each', [], function $$25(part, val){
        
        if (part == null) part = nil;
        if (val == null) val = nil;
        return range.$send(part, val);}, {$$source_location: ['molecules/intuition/utilities.rb', 349]});
    } else {
      range.$color((new Map([["alpha", 0]])))
    };
    cursor_particle = default_cursor_particles.$merge(cursor_found).$merge((new Map([["id", "" + (slider.$id()) + "_cursor"]])));
    cursor = slider.$box(cursor_particle);
    cursor.$remove("box_color");
    cursor_left = $rb_divide($rb_minus(slider_particle['$[]']("width"), cursor_particle['$[]']("width")), 2.0);
    cursor_top = $rb_divide($rb_minus(slider_particle['$[]']("height"), cursor_particle['$[]']("height")), 2.0);
    my_behavior = $send(self, 'lambda', [], function $$26(new_value){var cursor_top_initial = nil, cursor_left_initial = nil;

      
      if (new_value == null) new_value = nil;
      if ($eqeq(orientation, "vertical")) {
        
        if ($truthy($rb_lt(cursor.$width(), slider.$width()))) {
          
          range.$width(cursor.$width());
          range.$left(cursor_left);
        } else {
          
          range.$width(slider.$width());
          range.$smooth(default_smooth);
        };
        cursor_top_initial = $rb_times($rb_divide($rb_minus(max_value, new_value).$to_f(), $rb_minus(max_value, min_value)), $rb_minus(slider_particle['$[]']("height"), cursor_particle['$[]']("height")));
        bloc.$call(new_value);
        slider.$instance_variable_set("@value", new_value);
        cursor.$top(cursor_top_initial);
        cursor.$left(cursor_left);
        return range.$height($rb_minus($rb_minus(slider.$height(), cursor.$top()), $rb_divide(cursor.$height(), 2)));
      } else {
        
        if ($truthy($rb_lt(cursor.$height(), slider.$height()))) {
          
          range.$height(cursor.$height());
          range.$top(cursor_top);
        } else {
          
          range.$height(slider.$height());
          range.$smooth(default_smooth);
        };
        cursor_left_initial = $rb_times($rb_divide($rb_minus(new_value, min_value).$to_f(), $rb_minus(max_value, min_value)), $rb_minus(slider_particle['$[]']("width"), cursor_particle['$[]']("width")));
        bloc.$call(new_value);
        slider.$instance_variable_set("@value", new_value);
        cursor.$left(cursor_left_initial);
        cursor.$top(cursor_top);
        return range.$width($rb_plus(cursor.$left(), $rb_divide(cursor.$width(), 2)));
      };}, {$$source_location: ['molecules/intuition/utilities.rb', 361]});
    slider.$behavior((new Map([["value", my_behavior]])));
    update_value = $send(self, 'lambda', [], function $$27(cursor_position, cursor_size, slider_size, orientation){var effective_slider_size = nil, percentage = nil, value_range = nil, calculated_value = nil;

      
      if (cursor_position == null) cursor_position = nil;
      if (cursor_size == null) cursor_size = nil;
      if (slider_size == null) slider_size = nil;
      if (orientation == null) orientation = nil;
      effective_slider_size = $rb_minus(slider_size, cursor_size);
      percentage = ($eqeq(orientation, "vertical") ? ($rb_minus(1.0, $rb_divide(cursor_position.$to_f(), effective_slider_size))) : ($rb_divide(cursor_position.$to_f(), effective_slider_size)));
      value_range = $rb_minus(max_value, min_value);
      calculated_value = $rb_plus(min_value, $rb_times(value_range, percentage).$round());
      return calculated_value.$clamp(min_value, max_value);}, {$$source_location: ['molecules/intuition/utilities.rb', 394]});
    if ($eqeq(orientation, "vertical")) {
      
      if ($truthy($rb_lt(cursor.$width(), slider.$width()))) {
        
        range.$width(cursor.$width());
        range.$left(cursor_left);
      } else {
        
        range.$width(slider.$width());
        range.$smooth(default_smooth);
      };
      cursor_top_initial = $rb_times($rb_divide($rb_minus(max_value, default_value).$to_f(), $rb_minus(max_value, min_value)), $rb_minus(slider_particle['$[]']("height"), cursor_particle['$[]']("height")));
      bloc.$call(default_value);
      cursor.$top(cursor_top_initial);
      cursor.$left(cursor_left);
      range.$height($rb_minus($rb_minus(slider.$height(), cursor.$top()), $rb_divide(cursor.$height(), 2)));
      $send(cursor, 'drag', [(new Map([["restrict", (new Map([["max", (new Map([["top", $rb_minus(slider_particle['$[]']("height"), cursor_particle['$[]']("height"))], ["left", cursor_left]]))], ["min", (new Map([["left", cursor_left]]))]]))]]))], function $$28(event){var value = nil;

        
        if (event == null) event = nil;
        value = update_value.$call(cursor.$top(), cursor_particle['$[]']("height"), slider_particle['$[]']("height"), orientation);
        range.$height($rb_minus($rb_minus(slider.$height(), cursor.$top()), $rb_divide(cursor.$height(), 2)));
        bloc.$call(value);
        return slider.$instance_variable_set("@value", value);}, {$$source_location: ['molecules/intuition/utilities.rb', 421]});
    } else {
      
      if ($truthy($rb_lt(cursor.$height(), slider.$height()))) {
        
        range.$height(cursor.$height());
        range.$top(cursor_top);
      } else {
        
        range.$height(slider.$height());
        range.$smooth(default_smooth);
      };
      cursor_left_initial = $rb_times($rb_divide($rb_minus(default_value, min_value).$to_f(), $rb_minus(max_value, min_value)), $rb_minus(slider_particle['$[]']("width"), cursor_particle['$[]']("width")));
      bloc.$call(default_value);
      cursor.$left(cursor_left_initial);
      cursor.$top(cursor_top);
      range.$width($rb_plus(cursor.$left(), $rb_divide(cursor.$width(), 2)));
      $send(cursor, 'drag', [(new Map([["restrict", (new Map([["max", (new Map([["left", $rb_minus(slider_particle['$[]']("width"), cursor_particle['$[]']("width"))], ["top", cursor_top]]))], ["min", (new Map([["top", cursor_top]]))]]))]]))], function $$29(event){var value = nil;

        
        if (event == null) event = nil;
        value = update_value.$call(cursor.$left(), cursor_particle['$[]']("width"), slider_particle['$[]']("width"), orientation);
        range.$width($rb_plus(cursor.$left(), $rb_divide(cursor.$width(), 2)));
        bloc.$call(value);
        return slider.$instance_variable_set("@value", value);}, {$$source_location: ['molecules/intuition/utilities.rb', 445]});
    };
    $send(cursor, 'touch', ["double"], function $$30(){
      return slider.$value(default_value)}, {$$source_location: ['molecules/intuition/utilities.rb', 452]});
    cursor.$shadow((new Map([["id", "s4"], ["left", 1], ["top", 1], ["blur", 3], ["option", "natural"], ["red", 0], ["green", 0], ["blue", 0], ["alpha", 0.6]])));
    return slider;}, {$$s: self, $$source_location: ['molecules/intuition/utilities.rb', 320]});
  $send(self, 'new', [(new Map([["molecule", "matrix"]]))], function $$31(params){var bloc = $$31.$$p || nil, self = $$31.$$s == null ? this : $$31.$$s, $ret_or_1 = nil, parent_found = nil, id = nil, rows = nil, columns = nil, spacing = nil, size = nil, current_matrix = nil, matrix_cells = nil, total_spacing_x = nil, total_spacing_y = nil, size_coefficient = nil, view_width = nil, view_height = nil, matrix_back = nil, full_size = nil, available_width = nil, available_height = nil, box_width = nil, box_height = nil;

    $$31.$$p = null;
    
    ;
    if (params == null) params = nil;
    params = ($truthy(($ret_or_1 = params)) ? ($ret_or_1) : ((new Map())));
    parent_found = ($eqeq(self, self) ? (self.$grab("view")) : (self));
    id = ($truthy(($ret_or_1 = params['$[]']("id"))) ? ($ret_or_1) : (self.$identity_generator()));
    rows = ($truthy(($ret_or_1 = params['$[]']("rows"))) ? ($ret_or_1) : (8));
    columns = ($truthy(($ret_or_1 = params['$[]']("columns"))) ? ($ret_or_1) : (8));
    spacing = ($truthy(($ret_or_1 = params['$[]']("spacing"))) ? ($ret_or_1) : (6));
    size = ($truthy(($ret_or_1 = params['$[]']("size"))) ? ($ret_or_1) : ("100%"));
    current_matrix = self.$group((new Map([["id", "" + (id) + "_parent"]])));
    current_matrix.$data((new Map([["spacing", spacing], ["size", size]])));
    matrix_cells = [];
    total_spacing_x = $rb_times(spacing, $rb_plus(rows, 1));
    total_spacing_y = $rb_times(spacing, $rb_plus(columns, 1));
    size_coefficient = ($truthy(size['$instance_of?']($$('String'))) ? (($truthy(size['$end_with?']("%")) ? ($rb_divide(size.$to_f(), 100)) : ($rb_divide(size.$to_f(), parent_found.$to_px("width"))))) : ($rb_divide(size.$to_f(), parent_found.$to_px("width"))));
    view_width = parent_found.$to_px("width");
    view_height = parent_found.$to_px("height");
    matrix_back = self.$box((new Map([["id", id], ["width", size], ["height", size], ["color", (new Map([["alpha", 0]]))]])));
    matrix_back.$remove("box_color");
    if ($truthy($rb_gt(view_width, view_height))) {
      
      full_size = $rb_times(view_height, size_coefficient);
      available_width = $rb_minus(full_size, total_spacing_x);
      available_height = $rb_minus(full_size, total_spacing_y);
      matrix_back.$width(full_size);
      matrix_back.$height(full_size);
    } else {
      
      full_size = $rb_times(view_width, size_coefficient);
      available_width = $rb_minus(full_size, total_spacing_x);
      available_height = $rb_minus(full_size, total_spacing_y);
      matrix_back.$width(full_size);
      matrix_back.$height(full_size);
    };
    box_width = $rb_divide(available_width, rows);
    box_height = $rb_divide(available_height, columns);
    $send(columns, 'times', [], function $$33(y){
      
      if (y == null) y = nil;
      return $send(rows, 'times', [], function $$34(x){var id_generated = nil, new_box = nil;

        
        if (x == null) x = nil;
        id_generated = "" + (id) + "_" + (x) + "_" + (y);
        matrix_cells['$<<'](id_generated);
        new_box = matrix_back.$box((new Map([["id", id_generated]])));
        new_box.$width(box_width);
        new_box.$height(box_height);
        new_box.$left($rb_plus($rb_times($rb_plus(box_width, spacing), x), spacing));
        return new_box.$top($rb_plus($rb_times($rb_plus(box_height, spacing), y), spacing));}, {$$source_location: ['molecules/intuition/utilities.rb', 515]});}, {$$source_location: ['molecules/intuition/utilities.rb', 514]});
    current_matrix.$collect(matrix_cells);
    matrix_back.$cells(current_matrix);
    params = params.$merge((new Map([["matrix", current_matrix]])));
    matrix_back.$data(params);
    return matrix_back;}, {$$s: self, $$source_location: ['molecules/intuition/utilities.rb', 467]});
  $send(self, 'new', [(new Map([["molecule", "application"]]))], function $$35(params){var bloc = $$35.$$p || nil, self = $$35.$$s == null ? this : $$35.$$s, $ret_or_1 = nil, id_f = nil, main_app = nil, menu = nil;

    $$35.$$p = null;
    
    ;
    if (params == null) params = nil;
    params = ($truthy(($ret_or_1 = params)) ? ($ret_or_1) : ((new Map())));
    self.$color((new Map([["id", "app_color"], ["red", 0.1], ["green", 0.3], ["blue", 0.1]])));
    id_f = ($truthy(params['$[]']("id")) ? (params.$delete("id")) : (self.$identity_generator()));
    main_app = self.$box((new Map([["id", id_f], ["width", "auto"], ["height", "auto"], ["top", 0], ["bottom", 0], ["left", 0], ["right", 0], ["apply", "app_color"], ["category", "application"]])));
    main_app.$remove("box_color");
    main_app.$instance_variable_set("@pages", (new Map()));
    main_app.$role("application");
    menu = self.$buttons((new Map([["id", "" + (id_f) + "_menu"], ["depth", 9999], ["attach", id_f], ["inactive", (new Map([["text", (new Map([["color", "gray"]]))], ["width", 66], ["height", 12], ["spacing", 3], ["disposition", "horizontal"], ["color", "orange"], ["margin", (new Map([["left", 33], ["top", 12]]))]]))], ["active", (new Map([["text", (new Map([["color", "white"], ["shadow", (new Map())]]))], ["color", "blue"], ["shadow", (new Map())]]))]])));
    $send(main_app, 'define_singleton_method', ["menu"], function $$36(){
      return menu}, {$$source_location: ['molecules/intuition/utilities.rb', 557]});
    $send(main_app, 'define_singleton_method', ["pages"], function $$37(){var self = $$37.$$s == null ? this : $$37.$$s;
      if (self.pages == null) self.pages = nil;

      return self.pages}, {$$s: self, $$source_location: ['molecules/intuition/utilities.rb', 560]});
    $send(main_app, 'define_singleton_method', ["insert"], function $$38(bloc_to_add){var self = $$38.$$s == null ? this : $$38.$$s;

      
      if (bloc_to_add == null) bloc_to_add = nil;
      return $send(bloc_to_add, 'each', [], function $$39(page_id, params_f){var $a, self = $$39.$$s == null ? this : $$39.$$s;
        if (self.blocks == null) self.blocks = nil;
        if (self.pages == null) self.pages = nil;

        
        if (page_id == null) page_id = nil;
        if (params_f == null) params_f = nil;
        $send(params_f, 'each', [], function $$40(block_id, block_content){var $a, self = $$40.$$s == null ? this : $$40.$$s, $logical_op_recvr_tmp_1 = nil;
          if (self.pages == null) self.pages = nil;

          
          if (block_id == null) block_id = nil;
          if (block_content == null) block_content = nil;
          
          $logical_op_recvr_tmp_1 = self.pages['$[]'](page_id);
          if ($truthy(($ret_or_1 = $logical_op_recvr_tmp_1['$[]']("blocks")))) {
            $ret_or_1
          } else {
            $logical_op_recvr_tmp_1['$[]=']("blocks", (new Map()))
          };;
          return ($a = [block_id.$to_sym(), block_content], $send(self.pages['$[]'](page_id)['$[]']("blocks"), '[]=', $a), $a[$a.length - 1]);}, {$$s: self, $$source_location: ['molecules/intuition/utilities.rb', 567]});
        self.blocks = ($truthy(($ret_or_1 = self.blocks)) ? ($ret_or_1) : ((new Map())));
        return ($a = [page_id, self.pages['$[]'](page_id)['$[]']("blocks")], $send(self.blocks, '[]=', $a), $a[$a.length - 1]);}, {$$s: self, $$source_location: ['molecules/intuition/utilities.rb', 565]});}, {$$s: self, $$source_location: ['molecules/intuition/utilities.rb', 564]});
    $send(main_app, 'define_singleton_method', ["extract"], function $$41(bloc_to_extract){var self = $$41.$$s == null ? this : $$41.$$s;

      
      if (bloc_to_extract == null) bloc_to_extract = nil;
      return $send(bloc_to_extract, 'each', [], function $$42(page_id, block_id){var self = $$42.$$s == null ? this : $$42.$$s;
        if (self.blocks == null) self.blocks = nil;

        
        if (page_id == null) page_id = nil;
        if (block_id == null) block_id = nil;
        self.$grab(block_id).$delete((new Map([["recursive", true]])));
        self.blocks['$[]'](page_id).$delete(block_id);
        return self.$grab(page_id).$reorder_blocs();}, {$$s: self, $$source_location: ['molecules/intuition/utilities.rb', 578]});}, {$$s: self, $$source_location: ['molecules/intuition/utilities.rb', 576]});
    $send(main_app, 'define_singleton_method', ["blocks"], function $$43(){var self = $$43.$$s == null ? this : $$43.$$s;
      if (self.blocks == null) self.blocks = nil;

      return self.blocks}, {$$s: self, $$source_location: ['molecules/intuition/utilities.rb', 586]});
    $send(main_app, 'define_singleton_method', ["margin"], function $$44(){var self = $$44.$$s == null ? this : $$44.$$s;

      return (self.margin = params['$[]']("margin"))}, {$$s: self, $$source_location: ['molecules/intuition/utilities.rb', 589]});
    $send(main_app, 'define_singleton_method', ["spacing"], function $$45(){var self = $$45.$$s == null ? this : $$45.$$s;

      return (self.spacing = params['$[]']("spacing"))}, {$$s: self, $$source_location: ['molecules/intuition/utilities.rb', 592]});
    return main_app;}, {$$s: self, $$source_location: ['molecules/intuition/utilities.rb', 532]});
  $send(self, 'new', [(new Map([["molecule", "page"]]))], function $$46(params){var bloc = $$46.$$p || nil, self = $$46.$$s == null ? this : $$46.$$s, allow_menu = nil, id_f = nil, page_name = nil, $ret_or_1 = nil, item_code = nil, menu_f = nil;
    if (self.pages == null) self.pages = nil;
    if (self.id == null) self.id = nil;

    $$46.$$p = null;
    
    ;
    if (params == null) params = nil;
    allow_menu = params.$delete("menu");
    if ($truthy(params['$[]']("id"))) {
      
      id_f = params.$delete("id");
      page_name = params.$delete("name");
      self.pages['$[]='](id_f.$to_sym(), params);
    } else {
      self.$puts("must send an id")
    };
    page_name = ($truthy(($ret_or_1 = page_name)) ? ($ret_or_1) : (id_f));
    item_code = $send(self, 'lambda', [], function $$47(){var self = $$47.$$s == null ? this : $$47.$$s;

      return self.$show(id_f)}, {$$s: self, $$source_location: ['molecules/intuition/utilities.rb', 609]});
    if ($eqeq(allow_menu, false)) {
      return nil
    } else {
      
      menu_f = self.$grab("" + (self.id) + "_menu");
      menu_f.$add_button($hash_rehash(new Map([["" + (self.id) + "_menu_item_" + (page_name), (new Map([["text", page_name], ["code", item_code]]))]])));
      return self.$actor($hash_rehash(new Map([["" + (self.id) + "_menu_item_" + (page_name), "buttons"]])));
    };}, {$$arity: -1, $$s: self, $$source_location: ['molecules/intuition/utilities.rb', 599]});
  $send(self, 'new', [(new Map([["molecule", "show"]]))], function $$48(page_id){var bloc = $$48.$$p || nil, $a, self = $$48.$$s == null ? this : $$48.$$s, params = nil, $ret_or_1 = nil, footer = nil, header = nil, left_side_bar = nil, right_side_bar = nil, basic_size = nil, id_f = nil, main_page = nil, new_page = nil, blocks_found = nil, keys_to_exclude = nil, particles_to_apply = nil, new_footer = nil, new_header = nil, new_right_side_bar = nil, new_left_side_bar = nil;
    if (self.pages == null) self.pages = nil;

    $$48.$$p = null;
    
    ;
    if (page_id == null) page_id = nil;
    params = self.pages['$[]'](page_id.$to_sym());
    params = ($truthy(($ret_or_1 = params)) ? ($ret_or_1) : ((new Map())));
    footer = params.$delete("footer");
    header = params.$delete("header");
    left_side_bar = params.$delete("left_side_bar");
    right_side_bar = params.$delete("right_side_bar");
    basic_size = 30;
    $send(self.$fasten(), 'each', [], function $$49(page_id_found){var $a, $b, self = $$49.$$s == null ? this : $$49.$$s, page_found = nil;

      
      if (page_id_found == null) page_id_found = nil;
      page_found = self.$grab(page_id_found);
      if ($truthy(($a = ($b = page_found, ($b === nil || $b == null) ? nil : $b.$category()), ($a === nil || $a == null) ? nil : $a['$include?']("page")))) {
        return page_found.$delete((new Map([["recursive", true]])))
      } else {
        return nil
      };}, {$$s: self, $$source_location: ['molecules/intuition/utilities.rb', 631]});
    self.$color((new Map([["id", "page_color"], ["red", 0.1], ["green", 0.1], ["blue", 0.1]])));
    id_f = "" + (self.$id()) + "_content";
    main_page = self.$box((new Map([["width", "auto"], ["depth", -1], ["height", "auto"], ["id", id_f], ["top", 0], ["bottom", 0], ["left", 0], ["right", 0], ["apply", "page_color"], ["category", "page"]])));
    main_page.$remove("box_color");
    new_page = main_page.$box((new Map([["width", "100%"], ["height", "100%"], ["top", 0], ["left", 0], ["id", page_id], ["overflow", "auto"]])));
    blocks_found = params['$[]']("blocks");
    self.prev_bloc_height = 0;
    ($a = blocks_found, ($a === nil || $a == null) ? nil : $send($a, 'each', [], function $$50(bloc_id, bloc_content){var self = $$50.$$s == null ? this : $$50.$$s, new_bloc = nil;
      if (self.prev_bloc_height == null) self.prev_bloc_height = nil;

      
      if (bloc_id == null) bloc_id = nil;
      if (bloc_content == null) bloc_content = nil;
      new_bloc = new_page.$box((new Map([["id", bloc_id], ["role", "block"], ["width", "100%"], ["height", 99], ["top", $rb_plus(self.$spacing(), self.prev_bloc_height)], ["bottom", 0], ["left", 0], ["right", 0], ["spacing", self.$spacing()]])));
      $send(new_bloc, 'define_singleton_method', ["subs"], function $$51(sub_params){
        
        if (sub_params == null) sub_params = nil;
        return new_bloc.$sub_block(sub_params, 3);}, {$$source_location: ['molecules/intuition/utilities.rb', 649]});
      new_bloc.$set(bloc_content);
      return (self.prev_bloc_height = $rb_plus($rb_plus(self.prev_bloc_height, new_bloc.$height()), self.$spacing()));}, {$$s: self, $$source_location: ['molecules/intuition/utilities.rb', 647]}));
    keys_to_exclude = ["blocks"];
    particles_to_apply = $send(params, 'reject', [], function $$52(key, _){
      
      if (key == null) key = nil;
      if (_ == null) _ = nil;
      return keys_to_exclude['$include?'](key);}, {$$source_location: ['molecules/intuition/utilities.rb', 658]});
    new_page.$set(particles_to_apply);
    if ($truthy(footer)) {
      
      new_footer = self.$box((new Map([["left", 0], ["depth", 999], ["right", 0], ["width", "auto"], ["top", "auto"], ["bottom", 0], ["height", basic_size], ["category", "footer"], ["id", "" + (id_f) + "_footer"]])));
      new_footer.$remove("box_color");
      new_footer.$set(footer);
    };
    if ($truthy(header)) {
      
      new_header = self.$box((new Map([["left", 0], ["right", 0], ["depth", 999], ["width", "auto"], ["top", 0], ["height", basic_size], ["category", "header"], ["id", "" + (id_f) + "_header"]])));
      new_header.$remove("box_color");
      new_header.$set(header);
    };
    if ($truthy(right_side_bar)) {
      
      new_right_side_bar = self.$box((new Map([["left", "auto"], ["depth", 999], ["right", 0], ["width", basic_size], ["top", 0], ["bottom", 0], ["height", "auto"], ["category", "right_side_bar"], ["id", "" + (id_f) + "_right_side_bar"]])));
      new_right_side_bar.$remove("box_color");
      new_right_side_bar.$set(right_side_bar);
    };
    if ($truthy(left_side_bar)) {
      
      new_left_side_bar = self.$box((new Map([["left", 0], ["right", "auto"], ["depth", 999], ["width", basic_size], ["top", 0], ["bottom", 0], ["height", "auto"], ["category", "left_side_bar"], ["id", "" + (id_f) + "_left_side_bar"]])));
      new_left_side_bar.$remove("box_color");
      new_left_side_bar.$set(left_side_bar);
    };
    $send(self.$fasten(), 'each', [], function $$53(item_id_found){var $b, $c, $d, $e, $f, $g, $h, $i, self = $$53.$$s == null ? this : $$53.$$s, item_found = nil;

      
      if (item_id_found == null) item_id_found = nil;
      item_found = self.$grab(item_id_found);
      if ($truthy(($b = ($c = item_found, ($c === nil || $c == null) ? nil : $c.$category()), ($b === nil || $b == null) ? nil : $b['$include?']("footer")))) {
        
        main_page.$height("auto");
        main_page.$bottom(item_found.$height());
      };
      if ($truthy(($d = ($e = item_found, ($e === nil || $e == null) ? nil : $e.$category()), ($d === nil || $d == null) ? nil : $d['$include?']("header")))) {
        
        main_page.$height("auto");
        main_page.$top(item_found.$height());
      };
      if ($truthy(($f = ($g = item_found, ($g === nil || $g == null) ? nil : $g.$category()), ($f === nil || $f == null) ? nil : $f['$include?']("right_side_bar")))) {
        
        main_page.$width("auto");
        main_page.$left(item_found.$width());
        if ($truthy(footer)) {
          self.$grab("" + (id_f) + "_footer").$right(basic_size)
        };
        if ($truthy(header)) {
          self.$grab("" + (id_f) + "_header").$right(basic_size)
        };
      };
      if ($truthy(($h = ($i = item_found, ($i === nil || $i == null) ? nil : $i.$category()), ($h === nil || $h == null) ? nil : $h['$include?']("left_side_bar")))) {
        
        main_page.$width("auto");
        main_page.$right(item_found.$width());
        if ($truthy(footer)) {
          self.$grab("" + (id_f) + "_footer").$left(basic_size)
        };
        if ($truthy(header)) {
          return self.$grab("" + (id_f) + "_header").$left(basic_size)
        } else {
          return nil
        };
      } else {
        return nil
      };}, {$$s: self, $$source_location: ['molecules/intuition/utilities.rb', 685]});
    return new_page;}, {$$s: self, $$source_location: ['molecules/intuition/utilities.rb', 622]});
  $send(self, 'new', [(new Map([["molecule", "buttons"]]))], function $$54(params){var bloc = $$54.$$p || nil, self = $$54.$$s == null ? this : $$54.$$s, keys_to_keep = nil, remaining_params = nil, role_f = nil, actor_f = nil, params_saf = nil, context = nil, $ret_or_1 = nil, id_f = nil, main = nil, default$ = nil, default_text = nil, active = nil, inactive = nil, inactive_text = nil;

    $$54.$$p = null;
    
    ;
    if (params == null) params = nil;
    keys_to_keep = ["inactive", "active"];
    remaining_params = self.$remove_key_pair_but(params, keys_to_keep);
    params = self.$filter_keys_to_keep(params, keys_to_keep);
    role_f = params.$delete("role");
    actor_f = params.$delete("actor");
    params_saf = self.$deep_copy(params);
    context = ($truthy(($ret_or_1 = remaining_params.$delete("attach"))) ? ($ret_or_1) : ("view"));
    id_f = ($truthy(($ret_or_1 = remaining_params.$delete("id"))) ? ($ret_or_1) : (self.$identity_generator()));
    main = self.$grab(context).$box((new Map([["id", id_f]])));
    main.$set(remaining_params);
    if ($truthy(($ret_or_1 = main.$role(role_f)))) {
      $ret_or_1
    } else {
      main.$role("buttons")
    };
    if ($truthy(actor_f)) {
      main.$actor(actor_f)
    };
    main.$color((new Map([["blue", 0.5], ["red", 1], ["green", 1], ["alpha", 0]])));
    main.$data(params_saf);
    default$ = ($truthy(($ret_or_1 = params.$delete("inactive"))) ? ($ret_or_1) : ((new Map())));
    main.$data()['$[]=']("default", default$);
    default_text = default$.$delete("text");
    main.$data()['$[]=']("default_text", default_text);
    active = ($truthy(($ret_or_1 = params.$delete("active"))) ? ($ret_or_1) : ((new Map())));
    inactive = (new Map());
    $send(active, 'each_key', [], function $$55(part_f){var $a;

      
      if (part_f == null) part_f = nil;
      return ($a = [part_f, default$['$[]'](part_f)], $send(inactive, '[]=', $a), $a[$a.length - 1]);}, {$$source_location: ['molecules/intuition/utilities.rb', 737]});
    inactive_text = (new Map());
    $send(active, 'each_key', [], function $$56(part_f){var $a;

      
      if (part_f == null) part_f = nil;
      return ($a = [part_f, default_text['$[]'](part_f)], $send(inactive_text, '[]=', $a), $a[$a.length - 1]);}, {$$source_location: ['molecules/intuition/utilities.rb', 741]});
    $send(params, 'each_with_index', [], function $$57($mlhs_tmp1, index){var $a, $b, item_id = nil, part_f = nil, label = nil, code = nil;

      
      if ($mlhs_tmp1 == null) $mlhs_tmp1 = nil;
      if (index == null) index = nil;
      $b = $mlhs_tmp1, $a = $to_ary($b), (item_id = ($a[0] == null ? nil : $a[0])), (part_f = ($a[1] == null ? nil : $a[1])), $b;
      label = part_f['$[]']("text");
      code = part_f['$[]']("code");
      return main.$create_new_button(item_id, index, label, code);}, {$$source_location: ['molecules/intuition/utilities.rb', 744], $$has_top_level_mlhs_arg: true});
    return main;}, {$$s: self, $$source_location: ['molecules/intuition/utilities.rb', 713]});
  return $send(self, 'new', [(new Map([["molecule", "editor"]]))], function $$58(params){var bloc = $$58.$$p || nil;

    $$58.$$p = null;
    
    ;
    if (params == null) params = nil;
    return nil;}, {$$source_location: ['molecules/intuition/utilities.rb', 752]});
};

Opal.modules["molecules/intuition/tools"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $send = Opal.send, $def = Opal.def, $truthy = Opal.truthy, $eqeq = Opal.eqeq, $thrower = Opal.thrower, $rb_gt = Opal.rb_gt, $rb_divide = Opal.rb_divide, $hash_rehash = Opal.hash_rehash, $return_val = Opal.return_val, $assign_ivar_val = Opal.assign_ivar_val, $not = Opal.not, $rb_plus = Opal.rb_plus, $rb_times = Opal.rb_times, $to_ary = Opal.to_ary, self = Opal.top, $nesting = [], nil = Opal.nil, size = nil, smooth = nil, margin = nil, text_color = nil;

  Opal.add_stubs('shadow,color,border,element,[],each_with_index,tools,build_tool,start_click_analysis,tools_root,collect,selection,grab,current_user,lambda,allow_tool_operations,Native,elementsFromPoint,global,each,to_a,to_sym,to_s,descendant_of?,==,active_tools,apply_tool,allow_tool_operations=,addEventListener,wait,>,length,dup,selected,fasten,/,is_a?,instance_exec,to_proc,allow_localstorage,allow_localstorage=,data,instance_of?,send,<<,merge,to_i,delete,puts,history_position,historicize,aid,[]=,data=,sub,last,tag,type,id,keys,uniq,concat,edit_mode=,each_key,preset_list,!,activate_click_analysis,active,instance_variable_get,deactivate_tool,de_activate_click_analysis,apply,drag,resize,language,dig,storage,+,*,box,instance_variable_set,vector,text,truncate_string,touch,width,center,top,bottom,height,slider,to_f,value,depth,activate_tool,tick');
  
  size = 33;
  smooth = 3;
  margin = 3;
  text_color = (new Map([["alpha", 0.3], ["red", 1], ["green", 1], ["blue", 1]]));
  self.$shadow((new Map([["id", "tool_shade"], ["left", 3], ["top", 3], ["blur", 3], ["invert", false], ["red", 0], ["green", 0], ["blue", 0], ["alpha", 0.6]])));
  self.$color((new Map([["id", "active_tool_col"], ["alpha", 1], ["red", 1], ["green", 1], ["blue", 1]])));
  self.$color((new Map([["id", "inactive_tool_col"], ["alpha", 0.1]])));
  self.$border((new Map([["id", "tool_box_border"], ["thickness", 1], ["red", 1], ["green", 1], ["blue", 1], ["alpha", 0.06], ["pattern", "solid"], ["inside", true]])));
  self.$element((new Map([["aid", "toolbox_style"], ["id", "toolbox_style"], ["data", (new Map([["color", "gray"], ["size", size], ["margin", margin], ["smooth", smooth], ["text_color", text_color]]))]])));
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Atome');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.tool_scheme = nil;
    
    
    $def(self, '$toolbox', function $$toolbox(tool_list) {
      var self = this;

      
      self.toolbox = tool_list['$[]']("tools");
      return $send(tool_list['$[]']("tools"), 'each_with_index', [], function $$1(root_tool, index){var self = $$1.$$s == null ? this : $$1.$$s, tools_scheme = nil;

        
        if (root_tool == null) root_tool = nil;
        if (index == null) index = nil;
        tools_scheme = $$('Universe').$tools()['$[]'](root_tool);
        return self.$build_tool((new Map([["name", root_tool], ["scheme", tools_scheme], ["index", index], ["toolbox", tool_list['$[]']("toolbox")]])));}, {$$s: self, $$source_location: ['molecules/intuition/tools.rb', 29]});
    }, {$$source_location: ['molecules/intuition/tools.rb', 27]});
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      
      $def(self, '$init_intuition', function $$init_intuition() {
        var toolbox_root = nil;

        
        $$('Atome').$start_click_analysis();
        toolbox_root = $$('Universe').$tools_root();
        return $send(toolbox_root['$[]']("tools"), 'each_with_index', [], function $$2(root_tool, index){var tools_scheme = nil;

          
          if (root_tool == null) root_tool = nil;
          if (index == null) index = nil;
          tools_scheme = $$('Universe').$tools()['$[]'](root_tool);
          return $$('A').$build_tool((new Map([["name", root_tool], ["scheme", tools_scheme], ["index", index], ["toolbox", toolbox_root['$[]']("toolbox")]])));}, {$$source_location: ['molecules/intuition/tools.rb', 39]});
      }, {$$source_location: ['molecules/intuition/tools.rb', 36]});
      
      $def(self, '$selection', function $$selection() {
        var self = this;

        return self.$grab($$('Universe').$current_user()).$selection().$collect()
      }, {$$source_location: ['molecules/intuition/tools.rb', 45]});
      
      $def(self, '$activate_click_analysis', function $$activate_click_analysis() {
        var self = this;
        if (self.click_analysis_active == null) self.click_analysis_active = nil;

        if ($truthy(self.click_analysis_active)) {
          return nil
        } else {
          
          self.click_analysis = $send(self, 'lambda', [], function $$3(native_event){var $a, self = $$3.$$s == null ? this : $$3.$$s, event = nil, x = nil, y = nil, elements = nil;

            
            if (native_event == null) native_event = nil;
            if ($truthy($$('Universe').$allow_tool_operations())) {
              
              event = self.$Native(native_event);
              x = event['$[]']("clientX");
              y = event['$[]']("clientY");
              elements = $$('JS').$global()['$[]']("document").$elementsFromPoint(x, y);
              return (function(){try { var $t_break = $thrower('break'); return $send(elements.$to_a(), 'each', [], function $$4(atome_touched){var self = $$4.$$s == null ? this : $$4.$$s, id_found = nil, atome_found = nil, is_descendant_of_intuition = nil;

                
                if (atome_touched == null) atome_touched = nil;
                id_found = atome_touched['$[]']("id");
                id_found = id_found.$to_s().$to_sym();
                atome_found = self.$grab(id_found);
                if ($truthy(atome_found)) {
                  is_descendant_of_intuition = atome_found['$descendant_of?']("intuition").$to_s()
                };
                if (!$eqeq(is_descendant_of_intuition, "true")) {
                  $send($$('Universe').$active_tools(), 'each', [], function $$5(tool){var self = $$5.$$s == null ? this : $$5.$$s;

                    
                    if (tool == null) tool = nil;
                    return self.$apply_tool(tool, atome_found, event);}, {$$s: self, $$source_location: ['molecules/intuition/tools.rb', 69]})
                };
                $t_break.$throw(nil, $$4.$$is_lambda);}, {$$s: self, $$source_location: ['molecules/intuition/tools.rb', 60]})} catch($e) {
                if ($e === $t_break) return $e.$v;
                throw $e;
              } finally {$t_break.is_orphan = true;}})();
            } else {
              return ($a = [true], $send($$('Universe'), 'allow_tool_operations=', $a), $a[$a.length - 1])
            };}, {$$s: self, $$source_location: ['molecules/intuition/tools.rb', 53]});
          return (self.click_analysis_active = true);
        }
      }, {$$source_location: ['molecules/intuition/tools.rb', 49]});
      
      $def(self, '$de_activate_click_analysis', function $$de_activate_click_analysis() {
        var self = this;

        
        self.click_analysis = nil;
        return (self.click_analysis_active = false);
      }, {$$source_location: ['molecules/intuition/tools.rb', 84]});
      
      $def(self, '$start_click_analysis', function $$start_click_analysis() {
        var self = this, click_timeout = nil, double_click_delay = nil;

        
        self.click_analysis_active = false;
        click_timeout = nil;
        double_click_delay = 222;
        return $send($$('JS').$global()['$[]']("document"), 'addEventListener', ["click"], function $$6(native_event){var self = $$6.$$s == null ? this : $$6.$$s, selected_items = nil, dup_selected_items = nil, atomes_in_view = nil;
          if (self.click_analysis == null) self.click_analysis = nil;

          
          if (native_event == null) native_event = nil;
          if ($truthy(self.click_analysis)) {
            if ($truthy(click_timeout)) {
              
              self.$wait("kill", click_timeout);
              click_timeout = nil;
              selected_items = self.$grab($$('Universe').$current_user()).$selection().$collect();
              if ($truthy($rb_gt(selected_items.$length(), 0))) {
                
                dup_selected_items = selected_items.$dup();
                return $send(dup_selected_items, 'each', [], function $$7(atome_id_selected){var self = $$7.$$s == null ? this : $$7.$$s, atome_selected = nil;

                  
                  if (atome_id_selected == null) atome_id_selected = nil;
                  atome_selected = self.$grab(atome_id_selected);
                  return atome_selected.$selected(false);}, {$$s: self, $$source_location: ['molecules/intuition/tools.rb', 104]});
              } else {
                
                atomes_in_view = self.$grab("view").$fasten();
                return $send(atomes_in_view, 'each', [], function $$8(atome_id_found){var self = $$8.$$s == null ? this : $$8.$$s;

                  
                  if (atome_id_found == null) atome_id_found = nil;
                  return self.$grab(atome_id_found).$selected(true);}, {$$s: self, $$source_location: ['molecules/intuition/tools.rb', 110]});
              };
            } else {
              return (click_timeout = $send(self, 'wait', [$rb_divide(double_click_delay, 1000.0)], function $$9(){var self = $$9.$$s == null ? this : $$9.$$s;
                if (self.click_analysis == null) self.click_analysis = nil;

                
                click_timeout = nil;
                if ($truthy(self.click_analysis['$is_a?']($$('Proc')))) {
                  return $send($$('Atome'), 'instance_exec', [native_event], self.click_analysis.$to_proc())
                } else {
                  return nil
                };}, {$$s: self, $$source_location: ['molecules/intuition/tools.rb', 117]}))
            }
          } else {
            return nil
          };}, {$$s: self, $$source_location: ['molecules/intuition/tools.rb', 96]});
      }, {$$source_location: ['molecules/intuition/tools.rb', 89]});
      
      $def(self, '$alteration', function $$alteration(current_tool, tool_actions, atome_touched, a_event) {
        var storage_allowed = nil, action_found = nil, post = nil, params = nil;

        if ($truthy(atome_touched)) {
          
          storage_allowed = $$('Universe').$allow_localstorage();
          action_found = tool_actions['$[]']("action");
          post = tool_actions['$[]']("post");
          params = (new Map([["current_tool", current_tool], ["atome_touched", atome_touched], ["event", a_event]]));
          return $send(action_found, 'each', [], function $$10(part, val){
            
            if (part == null) part = nil;
            if (val == null) val = nil;
            $$('Universe')['$allow_localstorage='](false);
            $$('Universe')['$allow_localstorage='](storage_allowed);
            if ($truthy(current_tool.$data()['$[]']("allow_alteration"))) {
              
              if ($truthy(val['$instance_of?']($$('Proc')))) {
                $send(atome_touched, 'instance_exec', [], val.$to_proc())
              } else {
                atome_touched.$send(part, val)
              };
              if ($truthy(current_tool.$data()['$[]']("treated"))) {
                current_tool.$data()['$[]']("treated")['$<<'](atome_touched)
              };
            };
            if ($truthy(post['$is_a?']($$('Proc')))) {
              return $send(current_tool, 'instance_exec', [params], post.$to_proc())
            } else {
              return nil
            };}, {$$source_location: ['molecules/intuition/tools.rb', 134]});
        } else {
          return nil
        }
      }, {$$source_location: ['molecules/intuition/tools.rb', 128]});
      
      $def(self, '$creation', function $$creation(current_tool, tool_actions, atome_touched, a_event) {
        var $a, self = this, storage_allowed = nil, action_found = nil, pre = nil, post = nil, params = nil;

        
        self.creation_mode = true;
        storage_allowed = $$('Universe').$allow_localstorage();
        $$('Universe')['$allow_localstorage='](false);
        action_found = tool_actions['$[]']("action");
        pre = tool_actions['$[]']("pre");
        post = tool_actions['$[]']("post");
        params = (new Map([["current_tool", current_tool], ["atome_touched", atome_touched], ["event", a_event]]));
        $send(action_found, 'each', [], function $$11(atome, particle){var self = $$11.$$s == null ? this : $$11.$$s, temp_val = nil, new_atome = nil;

          
          if (atome == null) atome = nil;
          if (particle == null) particle = nil;
          if ($truthy(pre['$is_a?']($$('Proc')))) {
            $send(current_tool, 'instance_exec', [params], pre.$to_proc())
          };
          temp_val = particle.$merge((new Map([["resize", true], ["drag", true], ["top", a_event['$[]']("pageY").$to_i()], ["left", a_event['$[]']("pageX").$to_i()]])));
          if ($truthy(current_tool.$data()['$[]']("allow_creation"))) {
            
            new_atome = ($truthy(atome_touched) ? (atome_touched.$send(atome, temp_val)) : (self.$grab("view").$send(atome, temp_val)));
            current_tool.$data()['$[]']("created")['$<<'](new_atome);
            params.$delete("atome_touched");
            params['$[]']((new Map([["new_atome", new_atome]])));
            $$('Universe')['$allow_localstorage=']([atome]);
            self.$puts("history_position in creation: " + ($$('Universe').$history_position()));
            return $$('Universe').$historicize(new_atome.$aid(), "write", atome, particle);
          } else {
            return nil
          };}, {$$s: self, $$source_location: ['molecules/intuition/tools.rb', 160]});
        if ($truthy(post['$is_a?']($$('Proc')))) {
          $send(current_tool, 'instance_exec', [params], post.$to_proc())
        };
        return ($a = [storage_allowed], $send($$('Universe'), 'allow_localstorage=', $a), $a[$a.length - 1]);
      }, {$$source_location: ['molecules/intuition/tools.rb', 151]});
      return $def(self, '$apply_tool', function $$apply_tool(tool, atome_touched, a_event) {
        var $a, $b, self = this, current_tool = nil, tool_actions = nil, method_found = nil, tool_name = nil, tools_scheme = nil, target = nil;

        
        current_tool = self.$grab(tool);
        tool_actions = current_tool.$data();
        method_found = tool_actions['$[]']("method");
        if (!$truthy(method_found)) {
          
          method_found = "alteration";
          tool_actions['$[]=']("action", (new Map([["noop", true]])));
          current_tool['$data='](tool_actions);
        };
        tool_name = tool.$to_s().$sub("_tool", "");
        tools_scheme = $$('Universe').$tools()['$[]'](tool_name.$to_sym());
        target = ($truthy(tools_scheme['$[]']("target")) ? (self.$grab(atome_touched.$send(tools_scheme['$[]']("target")).$last())) : (atome_touched));
        if ((($truthy(target) && ($eqeq(method_found, "alteration"))) && ($truthy(target.$tag()['$[]']("system"))))) {
          return ($a = tools_scheme['$[]']("particles"), ($a === nil || $a == null) ? nil : $send($a, 'each', [], function $$12(particle_f, value_f){var $b, type_to_create = nil;

            
            if (particle_f == null) particle_f = nil;
            if (value_f == null) value_f = nil;
            type_to_create = target.$type();
            if ($truthy(type_to_create)) {
              
              target = atome_touched.$send(type_to_create, $hash_rehash(new Map([[particle_f, value_f]])));
              return ($b = tools_scheme['$[]']("particles"), ($b === nil || $b == null) ? nil : $send($b, 'each', [], function $$13(particle_f, value_f){
                
                if (particle_f == null) particle_f = nil;
                if (value_f == null) value_f = nil;
                return target.$send(particle_f, value_f);}, {$$source_location: ['molecules/intuition/tools.rb', 208]}));
            } else {
              return nil
            };}, {$$source_location: ['molecules/intuition/tools.rb', 204]}))
        } else {
          
          ($b = tools_scheme['$[]']("particles"), ($b === nil || $b == null) ? nil : $send($b, 'each', [], function $$14(particle_f, value_f){var is_descendant_of_intuition = nil, atome_descendant_of_intuition = nil;

            
            if (particle_f == null) particle_f = nil;
            if (value_f == null) value_f = nil;
            is_descendant_of_intuition = target['$descendant_of?']("intuition").$to_s();
            atome_descendant_of_intuition = atome_touched['$descendant_of?']("intuition").$to_s();
            if (($eqeq(is_descendant_of_intuition, "true") || ($eqeq(atome_descendant_of_intuition, "true")))) {
              return nil
            } else {
              return target.$send(particle_f, value_f)
            };}, {$$source_location: ['molecules/intuition/tools.rb', 216]}));
          return self.$send(method_found, current_tool, tool_actions, target, a_event);
        };
      }, {$$source_location: ['molecules/intuition/tools.rb', 184]});
    })(Opal.get_singleton_class(self), $nesting);
    
    $def(self, '$noop', $return_val(nil), {$$source_location: ['molecules/intuition/tools.rb', 231]});
    
    $def(self, '$set_action_on_touch', function $$set_action_on_touch() {
      var action = $$set_action_on_touch.$$p || nil, self = this;

      $$set_action_on_touch.$$p = null;
      
      ;
      return (self.touch_action = action);
    }, {$$source_location: ['molecules/intuition/tools.rb', 235]});
    
    $def(self, '$remove_get_atome_on_touch', $assign_ivar_val("touch_action", nil), {$$source_location: ['molecules/intuition/tools.rb', 239]});
    
    $def(self, '$activate_tool', function $$activate_tool() {
      var self = this, tool_name = nil, tool_scheme = nil, tool = nil, alterations = nil, creations = nil, prev_auth = nil, events_allow = nil, storage_allowed = nil, activation_code = nil, allow_creation = nil, allow_alteration = nil;

      
      tool_name = self.$id();
      tool_scheme = self.tool_scheme;
      tool = self;
      alterations = ($truthy(tool_scheme['$[]']("alteration")) ? (tool_scheme['$[]']("alteration").$keys()) : ([]));
      creations = ($truthy(tool_scheme['$[]']("creation")) ? (tool_scheme['$[]']("creation").$keys()) : ([]));
      if ($truthy($$('Universe').$allow_localstorage())) {
        prev_auth = [$$('Universe').$allow_localstorage()]
      } else {
        prev_auth = []
      };
      events_allow = ["top", "left", "right", "bottom", "width", "height"];
      storage_allowed = events_allow.$concat(alterations).$concat(creations).$concat(prev_auth).$uniq();
      $$('Universe')['$allow_localstorage='](storage_allowed);
      $$('Universe')['$edit_mode='](true);
      tool.$data()['$[]=']("treated", []);
      tool.$data()['$[]=']("created", []);
      tool.$data()['$[]=']("prev_states", (new Map()));
      self.$grab("" + (tool_name) + "_icon").$color("white");
      self.$grab("" + (tool_name) + "_label").$color("white");
      $$('Universe').$active_tools()['$<<'](tool_name);
      activation_code = tool_scheme['$[]']("activation");
      if ($truthy(activation_code['$is_a?']($$('Proc')))) {
        $send(tool, 'instance_exec', [], activation_code.$to_proc())
      };
      $send($$('Atome').$selection(), 'each', [], function $$15(atome_id_to_treat){var $a, self = $$15.$$s == null ? this : $$15.$$s;

        
        if (atome_id_to_treat == null) atome_id_to_treat = nil;
        return ($a = tool.$data()['$[]']("action"), ($a === nil || $a == null) ? nil : $send($a, 'each_key', [], function $$16(particle_req){var $b, self = $$16.$$s == null ? this : $$16.$$s, value_found = nil;

          
          if (particle_req == null) particle_req = nil;
          if ($truthy($$('Universe').$preset_list())) {
            return nil
          } else {
            
            value_found = self.$grab(atome_id_to_treat).$send(particle_req);
            if ($truthy(value_found)) {
              return ($b = [particle_req, value_found], $send(tool.$data()['$[]']("action"), '[]=', $b), $b[$b.length - 1])
            } else {
              return nil
            };
          };}, {$$s: self, $$source_location: ['molecules/intuition/tools.rb', 277]}));}, {$$s: self, $$source_location: ['molecules/intuition/tools.rb', 276]});
      allow_creation = tool.$data()['$[]']("allow_creation");
      allow_alteration = tool.$data()['$[]']("allow_alteration");
      if (!(($eqeq(tool_name.$to_sym(), "select_tool") || ($not(allow_creation))) || ($not(allow_alteration)))) {
        $send($$('Atome').$selection(), 'each', [], function $$17(atome_id_to_treat){var self = $$17.$$s == null ? this : $$17.$$s, atome_found = nil, event = nil;

          
          if (atome_id_to_treat == null) atome_id_to_treat = nil;
          atome_found = self.$grab(atome_id_to_treat);
          event = (new Map([["pageX", 0], ["pageY", 0], ["clientX", 0], ["clientY", 0]]));
          return $$('Atome').$apply_tool(tool_name, atome_found, event);}, {$$s: self, $$source_location: ['molecules/intuition/tools.rb', 291]})
      };
      $$('Atome').$activate_click_analysis();
      return tool.$active(true);
    }, {$$source_location: ['molecules/intuition/tools.rb', 243]});
    
    $def(self, '$deactivate_tool', function $$deactivate_tool() {
      var $a, $b, self = this, tool_name = nil, tool_scheme = nil, tool = nil, inactivation_code = nil;

      
      tool_name = self.$id();
      tool_scheme = self.tool_scheme;
      tool = self;
      tool.$active(false);
      ($a = tool.$instance_variable_get("@toolbox"), ($a === nil || $a == null) ? nil : $send($a, 'each', [], function $$18(sub_tool_id){var self = $$18.$$s == null ? this : $$18.$$s, toolbox_tool = nil;

        
        if (sub_tool_id == null) sub_tool_id = nil;
        toolbox_tool = self.$grab("" + (sub_tool_id) + "_tool");
        toolbox_tool.$deactivate_tool();
        return toolbox_tool.$delete((new Map([["force", true]])));}, {$$s: self, $$source_location: ['molecules/intuition/tools.rb', 307]}));
      self.$grab("" + (tool_name) + "_icon").$color(self.$grab("toolbox_style").$data()['$[]']("text_color"));
      self.$grab("" + (tool_name) + "_label").$color(self.$grab("toolbox_style").$data()['$[]']("text_color"));
      $$('Universe').$active_tools().$delete(tool_name);
      if ($eqeq($$('Universe').$active_tools().$length(), 0)) {
        
        $$('Atome').$de_activate_click_analysis();
        $$('Universe')['$edit_mode='](false);
        $$('Universe')['$allow_localstorage='](false);
      };
      inactivation_code = tool_scheme['$[]']("inactivation");
      if ($truthy(inactivation_code['$is_a?']($$('Proc')))) {
        $send(tool, 'instance_exec', [tool.$data()], inactivation_code.$to_proc())
      };
      tool.$apply("inactive_tool_col");
      return ($b = tool.$data()['$[]']("created"), ($b === nil || $b == null) ? nil : $send($b, 'each', [], function $$19(new_atome){
        
        if (new_atome == null) new_atome = nil;
        new_atome.$drag(false);
        return new_atome.$resize("remove");}, {$$source_location: ['molecules/intuition/tools.rb', 329]}));
    }, {$$source_location: ['molecules/intuition/tools.rb', 302]});
    return $def(self, '$build_tool', function $$build_tool(params) {
      var self = this, language = nil, $ret_or_1 = nil, label = nil, tool_name = nil, index = nil, tool_scheme = nil, toolbox = nil, orientation_wanted = nil, $logical_op_recvr_tmp_2 = nil, size = nil, margin = nil, smooth = nil, text_color = nil, top = nil, bottom_offset = nil, $ret_or_2 = nil, spacing = nil, bottom = nil, left = nil, right = nil, action = nil, method = nil, tool = nil, edition = nil, icon = nil, code_for_zone = nil;

      
      language = ($truthy(($ret_or_1 = language)) ? ($ret_or_1) : (self.$grab("view").$language()));
      label = ($truthy(($ret_or_1 = params.$dig("scheme", "int8", language))) ? ($ret_or_1) : (params['$[]']("name")));
      tool_name = "" + (params['$[]']("name")) + "_tool";
      index = params['$[]']("index");
      tool_scheme = params['$[]']("scheme");
      toolbox = ($truthy(($ret_or_1 = params['$[]']("toolbox"))) ? ($ret_or_1) : ((new Map())));
      orientation_wanted = ($truthy(($ret_or_1 = tool_scheme['$[]']("orientation"))) ? ($ret_or_1) : ("sn"));
      
      $logical_op_recvr_tmp_2 = self.$grab("intuition").$storage();
      if ($truthy(($ret_or_1 = $logical_op_recvr_tmp_2['$[]']("tool_open")))) {
        $ret_or_1
      } else {
        $logical_op_recvr_tmp_2['$[]=']("tool_open", [])
      };;
      self.$grab("intuition").$storage()['$[]']("tool_open")['$<<'](tool_name);
      size = self.$grab("toolbox_style").$data()['$[]']("size");
      margin = self.$grab("toolbox_style").$data()['$[]']("margin");
      smooth = self.$grab("toolbox_style").$data()['$[]']("smooth");
      text_color = self.$grab("toolbox_style").$data()['$[]']("text_color");
      
      switch (orientation_wanted.valueOf()) {
        case "sn":
          
          top = "auto";
          bottom_offset = ($truthy(($ret_or_2 = toolbox['$[]']("bottom"))) ? ($ret_or_2) : (3));
          spacing = ($truthy(($ret_or_2 = toolbox['$[]']("spacing"))) ? ($ret_or_2) : (3));
          bottom = $rb_plus($rb_times(index, $rb_plus(size, spacing)), bottom_offset);
          left = ($truthy(($ret_or_2 = toolbox['$[]']("left"))) ? ($ret_or_2) : (3));
          right = "auto";
          break;
        case "ns":
          
          break;
        case "ew":
          
          break;
        case "we":
          
          break;
        default:
          nil
      };
      if ($truthy(tool_scheme['$[]']("creation"))) {
        
        action = tool_scheme['$[]']("creation");
        method = "creation";
      };
      if ($truthy(tool_scheme['$[]']("alteration"))) {
        
        action = tool_scheme['$[]']("alteration");
        method = "alteration";
      };
      tool = self.$grab("intuition").$box((new Map([["id", tool_name], ["tag", (new Map([["system", true]]))], ["top", top], ["bottom", bottom], ["depth", 0], ["left", left], ["right", right], ["width", size], ["height", size], ["smooth", smooth], ["apply", ["inactive_tool_col", "tool_box_border", "tool_shade"]], ["state", "closed"], ["data", (new Map([["method", method], ["action", action], ["allow_alteration", true], ["allow_creation", true], ["post", tool_scheme['$[]']("post")], ["pre", tool_scheme['$[]']("pre")]]))]])));
      tool.$instance_variable_set("@tool_scheme", tool_scheme);
      edition = "M257.7 752c2 0 4-0.2 6-0.5L431.9 722c2-0.4 3.9-1.3 5.3-2.8l423.9-423.9c3.9-3.9 3.9-10.2 0-14.1L694.9 114.9c-1.9-1.9-4.4-2.9-7.1-2.9s-5.2 1-7.1 2.9L256.8 538.8c-1.5 1.5-2.4 3.3-2.8 5.3l-29.5 168.2c-1.9 11.1 1.5 21.9 9.4 29.8 6.6 6.4 14.9 9.9 23.8 9.9z m67.4-174.4L687.8 215l73.3 73.3-362.7 362.6-88.9 15.7 15.6-89zM880 836H144c-17.7 0-32 14.3-32 32v36c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-36c0-17.7-14.3-32-32-32z";
      icon = tool.$vector((new Map([["tag", (new Map([["system", true]]))], ["left", 9], ["top", "auto"], ["bottom", 9], ["width", 18], ["height", 18], ["id", "" + (tool_name) + "_icon"], ["data", (new Map([["path", (new Map([["d", edition], ["id", "p1_" + (tool_name) + "_icon"], ["stroke", "black"], ["stroke-width", 37], ["fill", "white"]]))]]))]])));
      icon.$color(text_color);
      tool.$text((new Map([["tag", (new Map([["system", true]]))], ["data", self.$truncate_string(label, 5)], ["component", (new Map([["size", 9]]))], ["center", (new Map([["x", 0]]))], ["top", "auto"], ["bottom", 0], ["color", text_color], ["id", "" + (tool_name) + "_label"], ["width", size], ["position", "absolute"]])));
      code_for_zone = tool_scheme['$[]']("zone");
      if ($truthy(code_for_zone['$is_a?']($$('Proc')))) {
        $send(tool, 'instance_exec', [tool], code_for_zone.$to_proc())
      };
      tool.$active(false);
      $send(tool, 'touch', ["long"], function $$20(){var $a, $b, self = $$20.$$s == null ? this : $$20.$$s;

        
        tool.$instance_variable_set("@prevent_action", true);
        if ($eqeq(tool.$instance_variable_get("@tool_open"), true)) {
          
          tool.$instance_variable_set("@tool_open", false);
          ($a = tool_scheme['$[]']("particles"), ($a === nil || $a == null) ? nil : $send($a, 'each_key', [], function $$21(particle){var self = $$21.$$s == null ? this : $$21.$$s;

            
            if (particle == null) particle = nil;
            return self.$grab("tool_particle_" + (particle)).$delete((new Map([["force", true]])));}, {$$s: self, $$source_location: ['molecules/intuition/tools.rb', 417]}));
          return tool.$width(size);
        } else {
          
          tool.$instance_variable_set("@tool_open", true);
          return ($b = tool_scheme['$[]']("particles"), ($b === nil || $b == null) ? nil : $send($b, 'each_with_index', [], function $$22($mlhs_tmp1, ind){var $c, $d, self = $$22.$$s == null ? this : $$22.$$s, particle_name = nil, _value_ = nil, particle = nil, particle_label = nil, label_value = nil;

            
            if ($mlhs_tmp1 == null) $mlhs_tmp1 = nil;
            if (ind == null) ind = nil;
            $d = $mlhs_tmp1, $c = $to_ary($d), (particle_name = ($c[0] == null ? nil : $c[0])), (_value_ = ($c[1] == null ? nil : $c[1])), $d;
            particle = tool.$box((new Map([["id", "tool_particle_" + (particle_name)], ["tag", (new Map([["system", true]]))], ["depth", 1], ["smooth", smooth], ["apply", ["inactive_tool_col", "tool_box_border", "tool_shade"]], ["width", size], ["height", size], ["left", $rb_plus($rb_times(ind, $rb_plus(size, margin)), size)]])));
            particle_label = particle.$text((new Map([["id", "tool_particle_name_" + (particle_name)], ["tag", (new Map([["system", true]]))], ["data", self.$truncate_string(particle_name, 5)], ["center", (new Map([["x", 0]]))], ["position", "absolute"], ["component", (new Map([["size", 9]]))], ["color", text_color], ["top", "auto"]])));
            label_value = particle.$text((new Map([["id", "tool_particle_value_" + (particle_name)], ["data", 0.0], ["tag", (new Map([["system", true]]))], ["center", (new Map([["x", 0]]))], ["position", "absolute"], ["component", (new Map([["size", 9]]))], ["color", text_color], ["top", margin]])));
            particle_label.$center((new Map([["x", 0]])));
            particle_label.$top("auto");
            particle_label.$bottom(0);
            return $send(particle, 'touch', [true], function $$23(){var self = $$23.$$s == null ? this : $$23.$$s, slider_id = nil, slider_f = nil;

              
              tool.$instance_variable_set("@prevent_action", true);
              slider_id = "particle_slider_" + (particle_name);
              if ($truthy(particle.$instance_variable_get("@active"))) {
                
                self.$grab(slider_id).$delete((new Map([["force", true]])));
                particle.$instance_variable_set("@active", false);
                particle.$height(size);
                return particle.$top(0);
              } else {
                
                particle.$height($rb_plus(139, $rb_divide(size, 2)));
                particle.$top($rb_plus(-139, size));
                slider_id = "particle_slider_" + (particle_name);
                slider_f = $send(particle, 'slider', [(new Map([["orientation", "vertical"], ["id", slider_id], ["range", (new Map([["color", (new Map([["alpha", 0]]))]]))], ["value", 55], ["depth", 2], ["center", (new Map([["x", 0]]))], ["width", 18], ["height", 123], ["smooth", 1], ["left", 0], ["top", $rb_divide(size, 2)], ["color", (new Map([["alpha", 0]]))], ["cursor", (new Map([["color", (new Map([["alpha", 1], ["red", 0.9], ["green", 0.9], ["blue", 0.0]]))], ["width", 18], ["height", 12], ["smooth", 3]]))]]))], function $$24(value){var $e, self = $$24.$$s == null ? this : $$24.$$s;

                  
                  if (value == null) value = nil;
                  if ($truthy(self.$grab(slider_id).$instance_variable_get("@initialised"))) {
                    
                    $send($$('Atome').$selection(), 'each', [], function $$25(atome_id_to_treat){var self = $$25.$$s == null ? this : $$25.$$s, atome_found = nil, target = nil;

                      
                      if (atome_id_to_treat == null) atome_id_to_treat = nil;
                      tool_scheme['$[]']("particles")['$[]='](particle_name, $rb_divide(value.$to_f(), 100));
                      atome_found = self.$grab(atome_id_to_treat);
                      target = self.$grab(atome_found.$color().$last());
                      if ($truthy(tool.$active())) {
                        return target.$send(particle_name, $rb_divide(value.$to_f(), 100))
                      } else {
                        return nil
                      };}, {$$s: self, $$source_location: ['molecules/intuition/tools.rb', 481]});
                    label_value.$data($rb_divide(value.$to_f(), 100));
                    return ($e = [particle_name, $rb_divide(value.$to_f(), 100)], $send(tool_scheme['$[]']("particles"), '[]=', $e), $e[$e.length - 1]);
                  } else {
                    return nil
                  };}, {$$s: self, $$source_location: ['molecules/intuition/tools.rb', 466]});
                $send($$('Atome').$selection(), 'each', [], function $$26(atome_id_to_treat){var self = $$26.$$s == null ? this : $$26.$$s, atome_found = nil, target = nil, value_found = nil;

                  
                  if (atome_id_to_treat == null) atome_id_to_treat = nil;
                  atome_found = self.$grab(atome_id_to_treat);
                  target = ($truthy(tool_scheme['$[]']("target")) ? (self.$grab(atome_found.$send(tool_scheme['$[]']("target")).$last())) : (atome_found));
                  value_found = target.$send(particle_name);
                  return slider_f.$value($rb_times(value_found, 100));}, {$$s: self, $$source_location: ['molecules/intuition/tools.rb', 496]});
                slider_f.$instance_variable_set("@initialised", true);
                return particle.$instance_variable_set("@active", true);
              };}, {$$s: self, $$source_location: ['molecules/intuition/tools.rb', 454]});}, {$$s: self, $$source_location: ['molecules/intuition/tools.rb', 424], $$has_top_level_mlhs_arg: true}));
        };}, {$$s: self, $$source_location: ['molecules/intuition/tools.rb', 413]});
      $send(tool, 'touch', ["down"], function $$27(){
        return tool.$depth(999)}, {$$source_location: ['molecules/intuition/tools.rb', 515]});
      $send(tool, 'touch', ["double"], function $$28(){var self = $$28.$$s == null ? this : $$28.$$s, tool_to_deactivate = nil;

        
        tool_to_deactivate = $$('Universe').$active_tools().$dup();
        $send(tool_to_deactivate, 'each', [], function $$29(atome_id_found){var self = $$29.$$s == null ? this : $$29.$$s, atome_found = nil;

          
          if (atome_id_found == null) atome_id_found = nil;
          atome_found = self.$grab(atome_id_found);
          return atome_found.$deactivate_tool();}, {$$s: self, $$source_location: ['molecules/intuition/tools.rb', 520]});
        return tool.$activate_tool();}, {$$s: self, $$source_location: ['molecules/intuition/tools.rb', 518]});
      return $send(tool, 'touch', [true], function $$30(){var self = $$30.$$s == null ? this : $$30.$$s;

        
        if (!$truthy(tool.$instance_variable_get("@prevent_action"))) {
          
          $$('Universe')['$allow_tool_operations='](false);
          if ($eqeq(tool.$active(), false)) {
            tool.$activate_tool()
          } else {
            
            tool.$deactivate_tool();
            self.$tick()['$[]='](tool_name, 0);
          };
        };
        return tool.$instance_variable_set("@prevent_action", false);}, {$$s: self, $$source_location: ['molecules/intuition/tools.rb', 526]});
    }, {$$source_location: ['molecules/intuition/tools.rb', 335]});
  })($nesting[0], null, $nesting);
};

Opal.modules["molecules/intuition/intuition"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $send = Opal.send, $truthy = Opal.truthy, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('new,lambda,toolbox,grab,delete,a_console,tools_root=,init_intuition');
  
  $send(self, 'new', [(new Map([["tool", "toolbox"]]))], function $$1(){var self = $$1.$$s == null ? this : $$1.$$s, active_code = nil;

    
    active_code = $send(self, 'lambda', [], function $$2(){var self = $$2.$$s == null ? this : $$2.$$s;

      return self.$toolbox((new Map([["tools", ["console"]], ["toolbox", (new Map([["orientation", "ew"], ["left", 49], ["bottom", 9], ["spacing", 9]]))]])))}, {$$s: self, $$source_location: ['molecules/intuition/intuition.rb', 4]});
    return (new Map([["activation", active_code]]));}, {$$s: self, $$source_location: ['molecules/intuition/intuition.rb', 3]});
  $send(self, 'new', [(new Map([["tool", "console"]]))], function $$3(params){var self = $$3.$$s == null ? this : $$3.$$s, active_code = nil, inactive_code = nil, pre_code = nil, post_code = nil, zone_spe = nil;

    
    if (params == null) params = nil;
    active_code = $send(self, 'lambda', [], function $$4(){var self = $$4.$$s == null ? this : $$4.$$s, atome_console = nil;

      
      atome_console = self.$grab("atome_console");
      if ($truthy(atome_console)) {
        return atome_console.$delete((new Map([["recursive", true]])))
      } else {
        return self.$a_console()
      };}, {$$s: self, $$source_location: ['molecules/intuition/intuition.rb', 12]});
    inactive_code = $send(self, 'lambda', [], function $$5(param){
      
      if (param == null) param = nil;
      return nil;}, {$$source_location: ['molecules/intuition/intuition.rb', 25]});
    pre_code = $send(self, 'lambda', [], function $$6(params){
      
      if (params == null) params = nil;
      return nil;}, {$$source_location: ['molecules/intuition/intuition.rb', 28]});
    post_code = $send(self, 'lambda', [], function $$7(params){
      
      if (params == null) params = nil;
      return nil;}, {$$source_location: ['molecules/intuition/intuition.rb', 32]});
    zone_spe = $send(self, 'lambda', [], function $$8(current_tool){
      
      if (current_tool == null) current_tool = nil;
      return nil;}, {$$source_location: ['molecules/intuition/intuition.rb', 37]});
    return (new Map([["activation", active_code], ["icon", "console"], ["int8", (new Map([["french", "console"], ["english", "console"], ["german", "console"]]))]]));}, {$$s: self, $$source_location: ['molecules/intuition/intuition.rb', 10]});
  $$('Universe')['$tools_root=']((new Map([["id", "root_tools"], ["tools", ["toolbox"]], ["toolbox", (new Map([["orientation", "ew"], ["left", 9], ["bottom", 9], ["spacing", 9]]))]])));
  return $$('Atome').$init_intuition();
};

Opal.queue(function(Opal) {/* Generated by Opal 1.8.2 */
  var self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('require');
  
  self.$require("fileutils");
  self.$require("securerandom");
  self.$require("atome/version");
  self.$require("atome/genesis/genesis");
  self.$require("atome/kernel/black_matter");
  self.$require("atome/kernel/universe");
  self.$require("atome/utilities/essentials");
  self.$require("renderers/renderer");
  self.$require("atome/utilities/color_helper/color");
  self.$require("atome/extensions/converters");
  self.$require("atome/extensions/atome");
  self.$require("atome/extensions/mathematics");
  self.$require("atome/atome");
  self.$require("atome/genesis/atomes");
  self.$require("atome/presets/atome");
  self.$require("atome/utilities/utilities");
  self.$require("atome/genesis/particles/atome");
  self.$require("atome/genesis/particles/communication");
  self.$require("atome/genesis/particles/effect");
  self.$require("atome/genesis/particles/event");
  self.$require("atome/genesis/particles/geometry");
  self.$require("atome/genesis/particles/hierarchy");
  self.$require("atome/genesis/particles/identity");
  self.$require("atome/genesis/particles/material");
  self.$require("atome/genesis/particles/property");
  self.$require("atome/genesis/particles/security");
  self.$require("atome/genesis/particles/spatial");
  self.$require("atome/genesis/particles/time");
  self.$require("atome/genesis/particles/utility");
  self.$require("atome/utilities/security");
  self.$require("renderers/html/index");
  self.$require("renderers/headless/index");
  self.$require("renderers/server/index");
  self.$require("atome/utilities/sanitizer");
  self.$require("atome/genesis/presets");
  self.$require("atome/genesis/sparkle");
  self.$require("molecules/init");
  self.$require("molecules/intuition/utilities");
  self.$require("molecules/intuition/tools");
  return self.$require("molecules/intuition/intuition");
});
