Opal.modules["lyrics_style"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $defs = Opal.defs, $rb_plus = Opal.rb_plus, $truthy = Opal.truthy, $not = Opal.not, $rb_minus = Opal.rb_minus, $rb_divide = Opal.rb_divide, $rb_times = Opal.rb_times, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('[],dimensions,colors,decorations,merge,+,button_style,identity_generator,box,shadow,!,empty?,text,-,/,*');
  return (function($base, $super) {
    var self = $klass($base, $super, 'LyricsStyle');

    
    
    $defs(self, '$colors', function $$colors() {
      
      return (new Map([["first_line_color", (new Map([["red", 0.9], ["green", 0.6], ["blue", 0.6]]))], ["other_lines_color", (new Map([["red", 0.5], ["green", 0.3], ["blue", 0.3]]))], ["primary", (new Map([["red", 0.15], ["green", 0.15], ["blue", 0.15]]))], ["secondary", (new Map([["red", 0.72], ["green", 0.52], ["blue", 0.52]]))], ["third", (new Map([["red", 0.32], ["green", 0.32], ["blue", 0.32]]))], ["accent", (new Map([["red", 0.9], ["green", 0.3], ["blue", 0.6]]))], ["danger", (new Map([["red", 1], ["green", 0], ["blue", 0], ["alpha", 0.3]]))], ["success", (new Map([["red", 0.3], ["green", 0.3], ["blue", 0.3]]))], ["warning", (new Map([["red", 0.95], ["green", 0.7], ["blue", 0.2]]))], ["info", (new Map([["red", 0.3], ["green", 0.7], ["blue", 0.95]]))], ["record", (new Map([["red", 0.9], ["green", 0.3], ["blue", 0.6], ["alpha", 0.8]]))], ["text_primary", (new Map([["red", 0.95], ["green", 0.95], ["blue", 0.95]]))], ["text_secondary", (new Map([["red", 0.7], ["green", 0.7], ["blue", 0.85]]))], ["text_accent", (new Map([["red", 0.95], ["green", 0.5], ["blue", 0.8]]))], ["container_bg", (new Map([["red", 0.12], ["green", 0.12], ["blue", 0.12], ["alpha", 1]]))], ["container_dark", (new Map([["red", 0.1], ["green", 0.1], ["blue", 0.18], ["alpha", 0.95]]))], ["container_medium", (new Map([["red", 0.18], ["green", 0.18], ["blue", 0.25], ["alpha", 0.9]]))], ["container_light", (new Map([["red", 0.22], ["green", 0.22], ["blue", 0.3], ["alpha", 0.85]]))]]))
    });
    $defs(self, '$dimensions', function $$dimensions() {
      
      return (new Map([["percent_offset_between_lines", 1.3], ["slider_width", 333], ["standard_width", 55], ["medium_width", 80], ["large_width", 140], ["container_width", 600], ["lyrics_width", 1600], ["button_height", 25], ["medium_height", 40], ["large_height", 52], ["container_height", 500], ["tool_bar_height", 39], ["slider_height", 25], ["margin", 3], ["text_small", 12], ["text_medium", 14], ["text_normal", 16], ["text_large", 20], ["text_xlarge", 36], ["lyrics_size", 69], ["next_Line_lyrics_size", 52]]))
    });
    $defs(self, '$decorations', function $$decorations() {
      
      return (new Map([["standard_smooth", 10], ["button_smooth", 9], ["container_smooth", 16], ["standard_shadow", (new Map([["blur", 15], ["alpha", 0.7]]))], ["container_shadow", (new Map([["blur", 20], ["alpha", 0.6]]))], ["button_shadow", (new Map([["blur", 8], ["alpha", 0.5]]))], ["invert_shadow", (new Map([["left", 3], ["top", 3], ["blur", 12], ["invert", true], ["red", 0], ["green", 0], ["blue", 0], ["alpha", 0.5]]))], ["glow", (new Map([["blur", 18], ["alpha", 0.6], ["red", 0.9], ["green", 0.3], ["blue", 0.6]]))]]))
    });
    $defs(self, '$positions', function $$positions() {
      
      return (new Map([["next", 375], ["prev", 345], ["lyrics_left_offset", 39], ["lyrics_top_offset", 25], ["slider_bottom", 25], ["counter_left", 373], ["first_row", 10], ["second_row", 10], ["third_row", 60], ["fourth_row", 110], ["first_column", 10], ["second_column", 63], ["third_column", 124], ["fourth_column", 188], ["fifth_column", 270], ["sixth_column", 405], ["seventh_column", 480], ["timeline_top", "auto"], ["editor_default_left", 300], ["editor_default_top", 150]]))
    });
    $defs(self, '$button_style', function $$button_style(options) {
      var self = this, style = nil;

      
      if (options == null) options = (new Map());
      style = (new Map([["width", self.$dimensions()['$[]']("standard_width")], ["height", self.$dimensions()['$[]']("button_height")], ["color", self.$colors()['$[]']("primary")], ["smooth", self.$decorations()['$[]']("button_smooth")], ["shadow", self.$decorations()['$[]']("button_shadow")]]));
      return style.$merge(options);
    }, -1);
    $defs(self, '$text_style', function $$text_style(options) {
      var self = this, style = nil;

      
      if (options == null) options = (new Map());
      style = (new Map([["component", (new Map([["size", self.$dimensions()['$[]']("text_medium")]]))], ["color", self.$colors()['$[]']("text_primary")], ["position", "absolute"]]));
      return style.$merge(options);
    }, -1);
    $defs(self, '$container_style', function $$container_style(options) {
      var self = this, style = nil;

      
      if (options == null) options = (new Map());
      style = (new Map([["width", self.$dimensions()['$[]']("container_width")], ["height", self.$dimensions()['$[]']("container_height")], ["color", self.$colors()['$[]']("container_dark")], ["smooth", self.$decorations()['$[]']("container_smooth")], ["shadow", self.$decorations()['$[]']("container_shadow")]]));
      return style.$merge(options);
    }, -1);
    $defs(self, '$slider_style', function $$slider_style(options) {
      var self = this, style = nil;

      
      if (options == null) options = (new Map());
      style = (new Map([["range", (new Map([["color", self.$colors()['$[]']("accent")]]))], ["min", 0], ["width", 399], ["height", self.$dimensions()['$[]']("medium_height")], ["color", self.$colors()['$[]']("secondary")], ["position", "absolute"], ["bottom", 20], ["left", 0], ["shadow", self.$decorations()['$[]']("standard_shadow")], ["cursor", (new Map([["color", self.$colors()['$[]']("accent")], ["width", $rb_plus(self.$dimensions()['$[]']("medium_height"), 10)], ["height", $rb_plus(self.$dimensions()['$[]']("medium_height"), 10)], ["smooth", self.$decorations()['$[]']("button_smooth")], ["shadow", self.$decorations()['$[]']("glow")]]))]]));
      return style.$merge(options);
    }, -1);
    $defs(self, '$line_container_style', function $$line_container_style(options) {
      var self = this, style = nil;

      
      if (options == null) options = (new Map());
      style = (new Map([["width", 520], ["height", 60], ["left", 15], ["color", self.$colors()['$[]']("container_medium")], ["smooth", self.$decorations()['$[]']("standard_smooth")], ["shadow", self.$decorations()['$[]']("standard_shadow")]]));
      return style.$merge(options);
    }, -1);
    $defs(self, '$action_button_style', function $$action_button_style(options) {
      var self = this;

      
      if (options == null) options = (new Map());
      return self.$button_style((new Map([["width", self.$dimensions()['$[]']("medium_width")], ["height", self.$dimensions()['$[]']("medium_height")], ["shadow", self.$decorations()['$[]']("button_shadow")], ["smooth", self.$decorations()['$[]']("button_smooth")]])).$merge(options));
    }, -1);
    return $defs(self, '$build_button', function $$build_button(parent, options) {
      var self = this, default_options = nil, opts = nil, button = nil;

      
      if (options == null) options = (new Map());
      default_options = (new Map([["color", self.$colors()['$[]']("primary")], ["width", self.$dimensions()['$[]']("standard_width")], ["height", self.$dimensions()['$[]']("button_height")], ["top", 0], ["left", 0], ["smooth", self.$decorations()['$[]']("button_smooth")], ["shadow", self.$decorations()['$[]']("button_shadow")], ["label", ""], ["label_color", self.$colors()['$[]']("text_primary")], ["id", self.$identity_generator()]]));
      opts = default_options.$merge(options);
      button = parent.$box((new Map([["id", opts['$[]']("id")], ["width", opts['$[]']("width")], ["height", opts['$[]']("height")], ["top", opts['$[]']("top")], ["left", opts['$[]']("left")], ["color", opts['$[]']("color")], ["smooth", opts['$[]']("smooth")]])));
      if ($truthy(opts['$[]']("shadow"))) {
        button.$shadow(opts['$[]']("shadow"))
      };
      if (($truthy(opts['$[]']("label")) && ($not(opts['$[]']("label")['$empty?']())))) {
        button.$text((new Map([["data", opts['$[]']("label")], ["component", (new Map([["size", self.$dimensions()['$[]']("text_medium")]]))], ["color", opts['$[]']("label_color")], ["position", "absolute"], ["top", $rb_minus($rb_divide(opts['$[]']("height"), 2), $rb_divide(self.$dimensions()['$[]']("text_medium"), 2))], ["left", $rb_minus($rb_divide(opts['$[]']("width"), 2), $rb_times(self.$dimensions()['$[]']("text_medium"), 1.5))]])))
      };
      return button;
    }, -2);
  })($nesting[0], null)
};

Opal.modules["lyricist_base"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $truthy = Opal.truthy, $def = Opal.def, $to_ary = Opal.to_ary, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('attr_accessor,build_ui,new_song,audio,content,grab,last,to_a,refresh_viewer');
  return (function($base, $super) {
    var self = $klass($base, $super, 'Lyricist');

    var $proto = self.$$prototype;

    $proto.default_length = $proto.original_number_of_lines = nil;
    
    self.$attr_accessor("lyrics", "record", "replace_mode", "length", "counter");
    
    $def(self, '$initialize', function $$initialize(content) {
      var self = this;

      
      if (content == null) content = nil;
      self.tempo = 120;
      self.record = false;
      self.imported_lyrics = "none";
      self.playing = false;
      self.replace_mode = false;
      self.default_length = 1;
      self.length = self.default_length;
      self.original_number_of_lines = 4;
      self.number_of_lines = self.original_number_of_lines;
      self.actual_position = 0;
      self.editor_open = false;
      self.title = "ices from hell";
      self.list = (new Map());
      self.allow_next = true;
      self.actual_position = 0;
      self.$build_ui();
      if ($truthy(content)) {
        self.$new_song(content)
      };
      return self.$audio((new Map([["id", "song_audio"]])));
    }, -1);
    return $def(self, '$new_song', function $$new_song(content) {
      var $a, $b, self = this, last_key = nil, last_value = nil;

      
      self.lyrics = content;
      self.$grab("lyric_viewer").$content(content);
      $b = content.$to_a().$last(), $a = $to_ary($b), (last_key = ($a[0] == null ? nil : $a[0])), (last_value = ($a[1] == null ? nil : $a[1])), $b;
      self.default_length = last_key;
      self.length = self.default_length;
      return self.$refresh_viewer(0);
    });
  })($nesting[0], $$('Atome'))
};

Opal.modules["lyricist_ui"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $def = Opal.def, $send = Opal.send, $eqeq = Opal.eqeq, $rb_times = Opal.rb_times, $truthy = Opal.truthy, $rb_divide = Opal.rb_divide, $rb_ge = Opal.rb_ge, $rb_lt = Opal.rb_lt, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('build_tool_bar,build_song_support,build_control_buttons,build_lyrics_viewer,build_timeline_slider,button,[],positions,dimensions,text,grab,colors,box,touch,top,==,left,right,width,height,depth=,depth,bottom,timer,setup_lyrics_events,decorations,shadow,importer,data,load_strategy,slider,slider_style,*,update_lyrics,stop_audio,play_audio,/,to_i,>=,<,value,find_key_by_title,delete_song_from_list,add_current_song_to_list,refresh_song_list,keyboard,Native,to_s,content,preventDefault,alter_lyric_event,update_song_listing');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Lyricist');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.length = $proto.list = $proto.title = nil;
    
    
    $def(self, '$build_ui', function $$build_ui() {
      var self = this;

      
      self.$build_tool_bar();
      self.$build_song_support();
      self.$build_control_buttons();
      self.$build_lyrics_viewer();
      return self.$build_timeline_slider();
    });
    
    $def(self, '$build_lyrics_viewer', function $$build_lyrics_viewer() {
      var self = this, counter = nil, base_text = nil, lyrics_support = nil;

      
      self.$button((new Map([["label", ""], ["id", "counter_support"], ["width", 99], ["left", $$('LyricsStyle').$positions()['$[]']("counter_left")], ["top", $$('LyricsStyle').$dimensions()['$[]']("margin")], ["parent", "tool_bar"]])));
      counter = self.$grab("counter_support").$text((new Map([["data", "counter"], ["content", "play"], ["left", 6], ["color", $$('LyricsStyle').$colors()['$[]']("secondary")], ["top", 6], ["position", "absolute"], ["id", "counter"], ["invert", true]])));
      base_text = "";
      lyrics_support = self.$grab("main_stage").$box((new Map([["id", "lyrics_support"], ["width", "auto"], ["height", "auto"], ["top", $$('LyricsStyle').$dimensions()['$[]']("tool_bar_height")], ["left", 0], ["right", 0], ["bottom", 0], ["color", $$('LyricsStyle').$colors()['$[]']("container_bg")]])));
      lyrics_support.$text((new Map([["top", 3], ["left", 3], ["width", $$('LyricsStyle').$dimensions()['$[]']("line_width")], ["data", base_text], ["id", "lyric_viewer"], ["edit", false], ["component", (new Map([["size", $$('LyricsStyle').$dimensions()['$[]']("text_xlarge")]]))], ["position", "absolute"], ["content", (new Map([[0, base_text]]))], ["context", "insert"]])));
      $send(lyrics_support, 'touch', ["long"], function $$1(){var $a, top_f = nil;

        
        top_f = lyrics_support.$top();
        if ($eqeq(top_f, 0)) {
          
          lyrics_support.$left(0);
          lyrics_support.$right(0);
          lyrics_support.$top($$('LyricsStyle').$dimensions()['$[]']("tool_bar_height"));
          lyrics_support.$width("auto");
          lyrics_support.$height("auto");
          return ($a = [0], $send(lyrics_support, 'depth=', $a), $a[$a.length - 1]);
        } else {
          
          lyrics_support.$depth(7);
          lyrics_support.$left(0);
          lyrics_support.$top(0);
          lyrics_support.$bottom(0);
          lyrics_support.$right(0);
          lyrics_support.$width("auto");
          lyrics_support.$height("auto");
          return ($a = [99], $send(lyrics_support, 'depth=', $a), $a[$a.length - 1]);
        };});
      counter.$timer((new Map([["position", 88]])));
      return self.$setup_lyrics_events();
    });
    
    $def(self, '$build_song_support', function $$build_song_support() {
      var self = this, support = nil;

      
      self.$grab("main_stage").$box((new Map([["id", "import_module"], ["top", $$('LyricsStyle').$dimensions()['$[]']("tool_bar_height")], ["left", "auto"], ["right", 9], ["width", 399], ["bottom", 50], ["height", "auto"], ["smooth", $$('LyricsStyle').$decorations()['$[]']("standard_smooth")], ["color", $$('LyricsStyle').$colors()['$[]']("container_bg")], ["shadow", $$('LyricsStyle').$decorations()['$[]']("shadow")], ["depth", 2]])));
      support = self.$grab("import_module").$box((new Map([["id", "importer_support"], ["overflow", "auto"], ["top", 39], ["left", 3], ["bottom", 3], ["right", 3], ["height", "auto"], ["width", "auto"], ["smooth", $$('LyricsStyle').$decorations()['$[]']("standard_smooth")], ["color", $$('LyricsStyle').$colors()['$[]']("container_light")]])));
      support.$shadow($$('LyricsStyle').$decorations()['$[]']("invert_shadow"));
      return $send(self, 'importer', [], function $$2(val){var self = $$2.$$s == null ? this : $$2.$$s, content = nil, filename = nil, current_lyricist = nil, formated_import = nil;

        
        if (val == null) val = nil;
        content = val['$[]']("content");
        filename = val['$[]']("name");
        current_lyricist = self.$grab("the_lyricist").$data();
        formated_import = (new Map([["content", content], ["filename", filename]]));
        return current_lyricist.$load_strategy(formated_import);}, {$$s: self});
    });
    
    $def(self, '$build_timeline_slider', function $$build_timeline_slider() {
      var self = this;

      
      $send(self.$grab("main_stage"), 'slider', [$$('LyricsStyle').$slider_style((new Map([["id", "timeline_slider"], ["attach", "bottom_bar"], ["range", (new Map([["color", "orange"]]))], ["min", 0], ["max", self.length], ["width", $$('LyricsStyle').$dimensions()['$[]']("slider_width")], ["value", 0], ["height", $$('LyricsStyle').$dimensions()['$[]']("slider_height")], ["left", $$('LyricsStyle').$dimensions()['$[]']("margin")], ["tag", []], ["top", "auto"], ["bottom", $rb_times($$('LyricsStyle').$dimensions()['$[]']("margin"), 3)], ["color", "orange"], ["cursor", (new Map([["color", "orange"], ["width", 25], ["height", 25]]))]])))], function $$3(value){var self = $$3.$$s == null ? this : $$3.$$s, lyrics = nil, counter = nil;

        
        if (value == null) value = nil;
        lyrics = self.$grab("lyric_viewer");
        counter = self.$grab("counter");
        return self.$update_lyrics(value, lyrics, counter);}, {$$s: self});
      $send(self.$grab("timeline_slider_cursor"), 'touch', ["down"], function $$4(){var self = $$4.$$s == null ? this : $$4.$$s;
        if (self.audio_object == null) self.audio_object = nil;

        
        self.$grab("counter").$timer((new Map([["pause", true]])));
        return self.$stop_audio(self.audio_object);}, {$$s: self});
      return $send(self.$grab("timeline_slider_cursor"), 'touch', ["up"], function $$5(){var self = $$5.$$s == null ? this : $$5.$$s, counter = nil, prev_length = nil;
        if (self.playing == null) self.playing = nil;
        if (self.audio_object == null) self.audio_object = nil;
        if (self.actual_position == null) self.actual_position = nil;
        if (self.length == null) self.length = nil;

        
        counter = self.$grab("counter");
        if ($truthy(self.playing)) {
          
          self.$play_audio(self.audio_object, $rb_divide(self.actual_position, 1000));
          prev_length = self.length;
          return $send(counter, 'timer', [(new Map([["end", $$$($$('Float'), 'INFINITY')]]))], function $$6(value){var self = $$6.$$s == null ? this : $$6.$$s, lyrics = nil;
            if (self.length == null) self.length = nil;
            if (self.record == null) self.record = nil;

            
            if (value == null) value = nil;
            lyrics = self.$grab("lyric_viewer");
            value = value.$to_i();
            self.$update_lyrics(value, lyrics, counter);
            if (($truthy(self.record) && ($truthy($rb_ge(value, self.length))))) {
              self.length = value
            } else if ($truthy($rb_ge(value, self.length))) {
              counter.$timer((new Map([["stop", true]])))
            };
            if ($truthy($rb_lt(value, prev_length))) {
              return self.$grab("timeline_slider").$value(value)
            } else {
              return nil
            };}, {$$s: self});
        } else {
          return nil
        };}, {$$s: self});
    });
    
    $def(self, '$build_tool_bar', function $$build_tool_bar() {
      var self = this;

      
      self.$grab("main_stage").$box((new Map([["id", "tool_bar"], ["color", $$('LyricsStyle').$colors()['$[]']("container_bg")], ["shadow", $$('LyricsStyle').$decorations()['$[]']("standard_shadow")], ["top", 5], ["left", 0], ["right", 0], ["width", "auto"], ["height", $$('LyricsStyle').$dimensions()['$[]']("tool_bar_height")], ["opacity", 1], ["depth", 3], ["overflow", "auto"]])));
      return self.$grab("main_stage").$box((new Map([["id", "bottom_bar"], ["color", $$('LyricsStyle').$colors()['$[]']("container_bg")], ["shadow", $$('LyricsStyle').$decorations()['$[]']("standard_shadow")], ["top", "auto"], ["bottom", 5], ["left", 0], ["right", 0], ["width", "auto"], ["height", $$('LyricsStyle').$dimensions()['$[]']("tool_bar_height")], ["opacity", 1], ["depth", 3], ["overflow", "auto"]])));
    });
    
    $def(self, '$update_song_listing', function $$update_song_listing() {
      var self = this, current_song = nil;

      
      current_song = self.$find_key_by_title(self.list, self.title);
      if ($truthy(current_song)) {
        
        self.$delete_song_from_list(current_song);
        self.$add_current_song_to_list(current_song);
      } else {
        self.$add_current_song_to_list()
      };
      return self.$refresh_song_list();
    });
    return $def(self, '$setup_lyrics_events', function $$setup_lyrics_events() {
      var self = this, lyrics = nil;

      
      lyrics = self.$grab("lyric_viewer");
      return $send(lyrics, 'keyboard', ["down"], function $$7(native_event){var self = $$7.$$s == null ? this : $$7.$$s, event = nil;

        
        if (native_event == null) native_event = nil;
        event = self.$Native(native_event);
        if ($eqeq(event['$[]']("keyCode").$to_s(), "13")) {
          
          self.$grab("counter").$content("play");
          event.$preventDefault();
          self.$alter_lyric_event();
          return self.$update_song_listing();
        } else {
          return nil
        };}, {$$s: self});
    });
  })($nesting[0], $$('Atome'), $nesting)
};

Opal.modules["lyricist_buttons"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $thrower = Opal.thrower, $def = Opal.def, $assign_ivar = Opal.assign_ivar, $send = Opal.send, $rb_minus = Opal.rb_minus, $rb_divide = Opal.rb_divide, $truthy = Opal.truthy, $eqeq = Opal.eqeq, $rb_plus = Opal.rb_plus, $rb_lt = Opal.rb_lt, $rb_ge = Opal.rb_ge, $rb_gt = Opal.rb_gt, $lambda = Opal.lambda, $rb_times = Opal.rb_times, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('box,grab,smooth,color,[],colors,shadow,decorations,center,touch,text,wait,data,size,-,/,load_song_from_list,play_lyrics,alert,delete,stop_audio,timer,update_lyrics,build_timeline_slider,==,data=,to_s,+,to_i,find_key_by_title,<,length,loading_coundown,puts,play_audio,>=,value,downcase,extname,init_audio,basename,clear,parse_song_lyrics,display,clear_all,content,full_refresh_viewer,set_list,refresh_song_list,update_song_listing,to_f,duration,>,call,setTimeout,global,wait_for_duration,%,rjust,path,*,button,dimensions,show_lyrics_editor,positions,edit,stop_lyrics,sort,keys,rindex,find_index,last,import,set_imported_lyrics,save_file,keyboard,save_file_to_idb,load_strategy,list_all_files_in_localstorage,each_with_index,position,left,top,load_file,Native,blink,preventDefault');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Lyricist');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.audio_object = $proto.allow_next = $proto.list = $proto.title = $proto.playing = $proto.actual_position = $proto.length = nil;
    
    
    $def(self, '$set_list', function $$set_list(content) {try { 
      var $a, self = this, list_content = nil;

      
      list_content = ($a = content, typeof Opal.compile === 'function' ? eval(Opal.compile($a, {scope_variables: ["list_content", "content"], arity_check: false, file: '(eval)', eval: true})) : self.$eval($a));
      return (self.list = list_content);} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    });
    
    $def(self, '$set_imported_lyrics', $assign_ivar("imported_lyrics"));
    
    $def(self, '$loading_coundown', function $$loading_coundown(next_song) {
      var self = this, countdown = nil, countdown_size = nil, countdown_label = nil;

      
      countdown = self.$grab("lyrics_support").$box((new Map([["id", "load_warning"], ["width", 120], ["height", 120]])));
      countdown.$smooth(120);
      countdown.$color($$('LyricsStyle').$colors()['$[]']("third"));
      countdown.$shadow($$('LyricsStyle').$decorations()['$[]']("container_shadow"));
      countdown.$center(true);
      self.allow_loading = true;
      $send(countdown, 'touch', [true], function $$1(){var self = $$1.$$s == null ? this : $$1.$$s;

        return (self.allow_loading = false)}, {$$s: self});
      countdown_size = 69;
      countdown_label = countdown.$text((new Map([["data", 3], ["size", countdown_size]])));
      countdown_label.$color($$('LyricsStyle').$colors()['$[]']("first_line_color"));
      countdown_label.$center(true);
      $send(self, 'wait', [1], function $$2(){var self = $$2.$$s == null ? this : $$2.$$s;

        
        countdown_label.$data(2);
        countdown_label.$size($rb_minus(countdown_size, $rb_divide(countdown_size, 3)));
        countdown_label.$center(true);
        return $send(self, 'wait', [1], function $$3(){
          
          countdown_label.$data(1);
          countdown_label.$size($rb_minus(countdown_size, $rb_divide(countdown_size, 3)));
          return countdown_label.$center(true);});}, {$$s: self});
      return $send(self, 'wait', [3], function $$4(){var self = $$4.$$s == null ? this : $$4.$$s;
        if (self.allow_loading == null) self.allow_loading = nil;

        
        if ($truthy(self.allow_loading)) {
          
          self.$load_song_from_list(next_song);
          self.$play_lyrics();
          self.allow_next = true;
          self.allow_loading = true;
        } else {
          self.$alert("#msg from line 46 lyricist_button")
        };
        return countdown.$delete((new Map([["recursive", true]])));}, {$$s: self});
    });
    
    $def(self, '$stop_lyrics', function $$stop_lyrics() {
      var self = this, counter = nil, lyrics = nil, next_song = nil;

      
      self.$stop_audio(self.audio_object);
      counter = self.$grab("counter");
      counter.$timer((new Map([["stop", true]])));
      lyrics = self.$grab("lyric_viewer");
      self.$update_lyrics(0, lyrics, counter);
      self.$grab("timeline_slider").$delete((new Map([["force", true]])));
      self.$build_timeline_slider();
      self.playing = false;
      if (($eqeq(self.$grab("lyric_viewer").$data(), "<end>") && ($truthy(self.allow_next)))) {
        
        self.allow_next = false;
        self.$grab("lyric_viewer")['$data=']("");
        next_song = $rb_plus(self.$find_key_by_title(self.list, self.title).$to_i(), 1).$to_s();
        if ($truthy($rb_lt(next_song.$to_i(), $rb_plus(self.list.$length(), 1)))) {
          return self.$loading_coundown(next_song)
        } else {
          return $send(self, 'wait', [1], function $$5(){var self = $$5.$$s == null ? this : $$5.$$s, current_song = nil;

            
            current_song = $rb_minus(next_song.$to_i(), 1).$to_s();
            self.$load_song_from_list(current_song);
            self.allow_next = true;
            return self.$puts("ending of the list");}, {$$s: self})
        };
      } else {
        return nil
      };
    });
    
    $def(self, '$play_lyrics', function $$play_lyrics() {
      var self = this, counter = nil, prev_length = nil;

      if ($truthy(self.playing)) {
        
        self.$grab("counter").$timer((new Map([["pause", true]])));
        self.playing = false;
        return self.$stop_audio(self.audio_object);
      } else {
        
        counter = self.$grab("counter");
        self.$play_audio(self.audio_object, $rb_divide(self.actual_position, 1000));
        prev_length = self.length;
        $send(counter, 'timer', [(new Map([["end", $$$($$('Float'), 'INFINITY')]]))], function $$6(value){var self = $$6.$$s == null ? this : $$6.$$s, lyrics = nil;
          if (self.length == null) self.length = nil;
          if (self.record == null) self.record = nil;

          
          if (value == null) value = nil;
          lyrics = self.$grab("lyric_viewer");
          value = value.$to_i();
          self.$update_lyrics(value, lyrics, counter);
          if (($truthy(self.record) && ($truthy($rb_ge(value, self.length))))) {
            self.length = value
          } else if ($truthy($rb_ge(value, self.length))) {
            counter.$timer((new Map([["stop", true]])))
          };
          if ($truthy($rb_lt(value, prev_length))) {
            return self.$grab("timeline_slider").$value(value)
          } else {
            return nil
          };}, {$$s: self});
        return (self.playing = true);
      }
    });
    
    $def(self, '$load_strategy', function $$load_strategy(val) {try { 
      var $a, $b, self = this, filename = nil, content = nil, current_lyricist = nil, audio_path = nil, name_without_extension = nil, file_to_load = nil, lyrics = nil, title = nil, raw = nil, current_lyrix = nil;

      
      filename = val['$[]']("filename");
      content = val['$[]']("content");
      current_lyricist = self.$grab("the_lyricist").$data();
      
      switch ($$('File').$extname(filename).$downcase().valueOf()) {
        case ".mp3":
        case ".wav":
        case ".ogg":
        case ".aac":
        case ".flac":
        case ".m4a":
          
          audio_path = "medias/audios/" + (filename);
          current_lyricist.$init_audio(audio_path);
          name_without_extension = $$('File').$basename(filename, $$('File').$extname(filename));
          self.title = name_without_extension;
          self.$grab("title_label").$data(name_without_extension);
          return nil;
        case ".txt":
          
          self.$grab("importer_support").$clear(true);
          self.$parse_song_lyrics(val['$[]']("content"));
          self.$grab("import_module").$display("block");
          self.imported_lyrics = val['$[]']("content");
          break;
        case ".lrx":
          
          file_to_load = ($a = content, typeof Opal.compile === 'function' ? eval(Opal.compile($a, {scope_variables: ["filename", "content", "current_lyricist", "audio_path", "name_without_extension", "file_to_load", "val"], arity_check: false, file: '(eval)', eval: true})) : self.$eval($a));
          lyrics = ($b = file_to_load['$[]']("lyrics"), typeof Opal.compile === 'function' ? eval(Opal.compile($b, {scope_variables: ["filename", "content", "current_lyricist", "audio_path", "name_without_extension", "file_to_load", "lyrics", "val"], arity_check: false, file: '(eval)', eval: true})) : self.$eval($b));
          audio_path = file_to_load['$[]']("song");
          title = file_to_load['$[]']("title");
          current_lyricist.$clear_all();
          self.title = title;
          self.$grab("title_label").$data(title);
          current_lyricist.$init_audio(audio_path);
          self.$grab("lyric_viewer").$content(lyrics);
          self.lyrics = self.$grab("lyric_viewer").$content(lyrics);
          current_lyricist.$full_refresh_viewer(0);
          raw = file_to_load['$[]']("raw");
          self.$grab("importer_support").$clear(true);
          self.$parse_song_lyrics(raw);
          self.imported_lyrics = raw;
          return nil;
        case ".prx":
          
          name_without_extension = $$('File').$basename(filename, $$('File').$extname(filename));
          self.list_title = name_without_extension;
          self.$grab("list_title")['$data='](name_without_extension);
          current_lyrix = self.$grab("the_lyricist").$data();
          current_lyrix.$set_list(content);
          self.$refresh_song_list();
          self.$grab("list_panel").$display("block");
          self.$load_song_from_list("1");
          return nil;
        default:
          nil
      };
      return self.$update_song_listing();} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    });
    
    $def(self, '$wait_for_duration', function $$wait_for_duration(audio_object, callback) {
      var self = this, duration_value = nil;

      
      duration_value = (function() { try {
        return audio_object.$duration().$to_f()
      } catch ($err) {
        if (Opal.rescue($err, [$$('StandardError')])) {
          try {
            return nil
          } finally { Opal.pop_exception($err); }
        } else { throw $err; }
      }})();
      if (($truthy(duration_value) && ($truthy($rb_gt(duration_value, 0))))) {
        return callback.$call(duration_value)
      } else {
        return $$('JS').$global().$setTimeout($lambda(function $$7(){var self = $$7.$$s == null ? this : $$7.$$s;

          return self.$wait_for_duration(audio_object, callback)}, {$$s: self}), 100)
      };
    });
    
    $def(self, '$seconds_to_minutes', function $$seconds_to_minutes(seconds) {
      var minutes = nil, remaining_seconds = nil;

      
      minutes = $rb_divide(seconds, 60);
      remaining_seconds = seconds['$%'](60);
      return "" + (minutes) + ":" + (remaining_seconds.$to_s().$rjust(2, "0"));
    });
    
    $def(self, '$init_audio', function $$init_audio(audio_path) {
      var self = this;

      
      self.audio_object = self.$grab("basic_audio");
      self.audio_path = audio_path;
      self.audio_object.$path(audio_path);
      return self.$wait_for_duration(self.audio_object, $lambda(function $$8(duration){var self = $$8.$$s == null ? this : $$8.$$s;

        
        if (duration == null) duration = nil;
        self.default_length = $rb_times(duration, 1000);
        return (self.length = $rb_times(duration, 1000));}, {$$s: self}));
    });
    return $def(self, '$build_control_buttons', function $$build_control_buttons() {
      var self = this, play = nil, edit_lyrics = nil, erase = nil, view_importer = nil, record = nil, clear = nil, stop = nil, prev_word = nil, next_word = nil, import_lyrics = nil, save_edited_text = nil, edit_import = nil, save_song = nil, load_song = nil, titesong = nil;

      
      play = self.$button((new Map([["label", "play"], ["id", "play"], ["top", $$('LyricsStyle').$dimensions()['$[]']("margin")], ["left", $$('LyricsStyle').$dimensions()['$[]']("margin")], ["parent", "tool_bar"]])));
      $send(play, 'touch', [true], function $$9(){var self = $$9.$$s == null ? this : $$9.$$s;

        return self.$play_lyrics()}, {$$s: self});
      edit_lyrics = self.$button((new Map([["label", "Edit"], ["id", "edit_lyrics_button"], ["left", 610], ["right", $$('LyricsStyle').$dimensions()['$[]']("margin")], ["top", $$('LyricsStyle').$dimensions()['$[]']("margin")], ["size", $$('LyricsStyle').$dimensions()['$[]']("text_medium")], ["parent", "tool_bar"]])));
      $send(edit_lyrics, 'touch', [true], function $$10(){var self = $$10.$$s == null ? this : $$10.$$s;
        if (self.editor_open == null) self.editor_open = nil;

        
        if ($truthy(self.editor_open)) {
          
          if ($truthy(self.$grab("lyrics_editor_container"))) {
            self.$grab("lyrics_editor_container").$delete((new Map([["recursive", true]])))
          };
          self.editor_open = false;
        } else {
          
          self.editor_open = true;
          self.$grab("import_module").$display("none");
          self.$show_lyrics_editor(33, 33);
          self.$grab("list_panel").$display("none");
        };
        return self.$update_song_listing();}, {$$s: self});
      erase = self.$button((new Map([["id", "erase"], ["label", "clear"], ["color", $$('LyricsStyle').$colors()['$[]']("accent")], ["top", $$('LyricsStyle').$dimensions()['$[]']("margin")], ["left", $$('LyricsStyle').$positions()['$[]']("fourth_column")], ["parent", "tool_bar"]])));
      $send(erase, 'touch', [true], function $$11(){var self = $$11.$$s == null ? this : $$11.$$s;

        
        self.$clear_all();
        return self.$update_song_listing();}, {$$s: self});
      view_importer = self.$button((new Map([["id", "import_viewer"], ["label", "lyrics"], ["top", $$('LyricsStyle').$dimensions()['$[]']("margin")], ["left", 545], ["right", $$('LyricsStyle').$positions()['$[]']("second_column")], ["parent", "tool_bar"]])));
      $send(view_importer, 'touch', [true], function $$12(){var self = $$12.$$s == null ? this : $$12.$$s, import_drag = nil;

        
        import_drag = self.$grab("import_module");
        if ($eqeq(import_drag.$display(), "none")) {
          
          import_drag.$display("block");
          if ($truthy(self.$grab("lyrics_editor_container"))) {
            self.$grab("lyrics_editor_container").$delete((new Map([["recursive", true]])))
          };
          self.$grab("list_panel").$display("none");
        } else {
          import_drag.$display("none")
        };
        return self.$update_song_listing();}, {$$s: self});
      record = self.$button((new Map([["label", "modify"], ["id", "record"], ["top", $$('LyricsStyle').$dimensions()['$[]']("margin")], ["left", $$('LyricsStyle').$positions()['$[]']("third_column")], ["parent", "tool_bar"]])));
      $send(record, 'touch', [true], function $$13(){var self = $$13.$$s == null ? this : $$13.$$s, prev_postion = nil, lyric_viewer = nil, counter = nil, lyrics = nil;
        if (self.actual_position == null) self.actual_position = nil;
        if (self.record == null) self.record = nil;
        if (self.original_number_of_lines == null) self.original_number_of_lines = nil;

        
        prev_postion = self.actual_position;
        lyric_viewer = self.$grab("lyric_viewer");
        if ($eqeq(self.record, true)) {
          
          self.record = false;
          lyric_viewer.$edit(false);
          record.$color($$('LyricsStyle').$colors()['$[]']("primary"));
          self.number_of_lines = self.original_number_of_lines;
        } else {
          
          self.record = true;
          record.$color($$('LyricsStyle').$colors()['$[]']("danger"));
          lyric_viewer.$edit(true);
          self.number_of_lines = 1;
          counter = self.$grab("counter");
          lyrics = self.$grab("lyric_viewer");
          self.$update_lyrics(0, lyrics, counter);
        };
        return self.$full_refresh_viewer(prev_postion);}, {$$s: self});
      clear = self.$button((new Map([["label", "clear"], ["id", "clear"], ["top", $$('LyricsStyle').$dimensions()['$[]']("margin")], ["color", $$('LyricsStyle').$colors()['$[]']("accent")], ["left", $$('LyricsStyle').$positions()['$[]']("second_column")], ["parent", "import_module"]])));
      $send(clear, 'touch', [true], function $$14(){var self = $$14.$$s == null ? this : $$14.$$s;

        return self.$grab("importer_support").$clear(true)}, {$$s: self});
      stop = self.$button((new Map([["label", "stop"], ["id", "stop"], ["top", $$('LyricsStyle').$dimensions()['$[]']("margin")], ["color", $$('LyricsStyle').$colors()['$[]']("secondary")], ["left", $$('LyricsStyle').$positions()['$[]']("second_column")], ["parent", "tool_bar"]])));
      $send(stop, 'touch', [true], function $$15(){var self = $$15.$$s == null ? this : $$15.$$s;

        return self.$stop_lyrics()}, {$$s: self});
      prev_word = self.$button((new Map([["label", "<"], ["width", 25], ["id", "previous"], ["top", $$('LyricsStyle').$dimensions()['$[]']("margin")], ["left", $$('LyricsStyle').$positions()['$[]']("prev")], ["parent", "bottom_bar"]])));
      next_word = self.$button((new Map([["label", ">"], ["width", 25], ["top", $$('LyricsStyle').$dimensions()['$[]']("margin")], ["id", "next"], ["left", $$('LyricsStyle').$positions()['$[]']("next")], ["parent", "bottom_bar"]])));
      $send(prev_word, 'touch', [true], function $$16(){var self = $$16.$$s == null ? this : $$16.$$s, lyrics = nil, counter = nil, current_position = nil, sorted_keys = nil, prev_index = nil, prev_position = nil;

        
        lyrics = self.$grab("lyric_viewer");
        counter = self.$grab("counter");
        current_position = counter.$timer()['$[]']("position");
        sorted_keys = lyrics.$content().$keys().$sort();
        prev_index = $send(sorted_keys, 'rindex', [], function $$17(key){
          
          if (key == null) key = nil;
          return $rb_lt(key, current_position);});
        if ($truthy(prev_index)) {
          
          prev_position = sorted_keys['$[]'](prev_index);
          self.$update_lyrics(prev_position, lyrics, counter);
          return self.$grab("timeline_slider").$value(prev_position);
        } else {
          
          self.$update_lyrics(0, lyrics, counter);
          return self.$grab("timeline_slider").$value(0);
        };}, {$$s: self});
      $send(next_word, 'touch', [true], function $$18(){var self = $$18.$$s == null ? this : $$18.$$s, lyrics = nil, counter = nil, current_position = nil, sorted_keys = nil, next_index = nil, next_position = nil, last_position = nil;

        
        lyrics = self.$grab("lyric_viewer");
        counter = self.$grab("counter");
        current_position = counter.$timer()['$[]']("position");
        sorted_keys = lyrics.$content().$keys().$sort();
        next_index = $send(sorted_keys, 'find_index', [], function $$19(key){
          
          if (key == null) key = nil;
          return $rb_gt(key, current_position);});
        if ($truthy(next_index)) {
          
          next_position = sorted_keys['$[]'](next_index);
          self.$update_lyrics(next_position, lyrics, counter);
          return self.$grab("timeline_slider").$value(next_position);
        } else {
          
          last_position = sorted_keys.$last();
          self.$update_lyrics(last_position, lyrics, counter);
          return self.$grab("timeline_slider").$value(last_position);
        };}, {$$s: self});
      import_lyrics = self.$button((new Map([["label", "import"], ["id", "import_lyrics"], ["text_color", "black"], ["top", $$('LyricsStyle').$dimensions()['$[]']("margin")], ["left", 3], ["parent", "import_module"]])));
      $send(import_lyrics, 'import', [true], function $$20(val){var self = $$20.$$s == null ? this : $$20.$$s, current_lyrix = nil;

        
        if (val == null) val = nil;
        self.$grab("importer_support").$clear(true);
        self.$parse_song_lyrics(val['$[]']("content"));
        current_lyrix = self.$grab("the_lyricist").$data();
        return current_lyrix.$set_imported_lyrics(val['$[]']("content"));}, {$$s: self});
      save_edited_text = self.$button((new Map([["label", "save"], ["id", "save_edit"], ["top", $$('LyricsStyle').$dimensions()['$[]']("margin")], ["left", "auto"], ["right", 55], ["parent", "import_module"]])));
      $send(save_edited_text, 'touch', [true], function $$21(val){var self = $$21.$$s == null ? this : $$21.$$s;
        if (self.imported_lyrics == null) self.imported_lyrics = nil;
        if (self.title == null) self.title = nil;

        
        if (val == null) val = nil;
        self.$grab("importer_support").$clear(true);
        self.$parse_song_lyrics(self.imported_lyrics);
        self.$update_song_listing();
        return self.$save_file("" + (self.title) + ".txt", self.imported_lyrics);}, {$$s: self});
      edit_import = self.$button((new Map([["label", "raw"], ["id", "edit_import"], ["top", $$('LyricsStyle').$dimensions()['$[]']("margin")], ["left", "auto"], ["right", 5], ["parent", "import_module"]])));
      $send(edit_import, 'touch', [true], function $$22(val){var self = $$22.$$s == null ? this : $$22.$$s, text_to_edit = nil;
        if (self.edit_lyrics_mode == null) self.edit_lyrics_mode = nil;
        if (self.imported_lyrics == null) self.imported_lyrics = nil;

        
        if (val == null) val = nil;
        if ($truthy(self.edit_lyrics_mode)) {
          
          self.$grab("edit_import_label").$data("raw");
          self.$grab("importer_support").$clear(true);
          self.$parse_song_lyrics(self.imported_lyrics);
          self.edit_lyrics_mode = false;
        } else {
          
          self.$grab("edit_import_label").$data("insert");
          self.$grab("importer_support").$clear(true);
          text_to_edit = self.$grab("importer_support").$text((new Map([["data", self.imported_lyrics], ["edit", true]])));
          $send(text_to_edit, 'keyboard', ["down"], function $$23(native_event){var self = $$23.$$s == null ? this : $$23.$$s;

            
            if (native_event == null) native_event = nil;
            return (self.imported_lyrics = text_to_edit.$data());}, {$$s: self});
          self.edit_lyrics_mode = true;
        };
        return self.$update_song_listing();}, {$$s: self});
      save_song = self.$button((new Map([["label", "save"], ["id", "save"], ["top", $$('LyricsStyle').$dimensions()['$[]']("margin")], ["left", 470], ["right", $$('LyricsStyle').$dimensions()['$[]']("margin")], ["parent", "bottom_bar"]])));
      $send(save_song, 'touch', [true], function $$24(){var self = $$24.$$s == null ? this : $$24.$$s, content_to_save = nil, list_tile = nil;
        if (self.list == null) self.list = nil;
        if (self.list_title == null) self.list_title = nil;

        
        self.$update_song_listing();
        content_to_save = self.list;
        list_tile = "" + (self.list_title) + ".prx";
        self.$save_file(list_tile, content_to_save);
        return self.$save_file_to_idb(list_tile, content_to_save);}, {$$s: self});
      load_song = self.$button((new Map([["label", "load"], ["id", "load"], ["top", $$('LyricsStyle').$dimensions()['$[]']("margin")], ["left", 410], ["right", 65], ["parent", "bottom_bar"]])));
      $send(load_song, 'touch', [true], function $$25(){var self = $$25.$$s == null ? this : $$25.$$s, load_file = nil, result = nil;

        if ($truthy(self.$grab("loader"))) {
          return self.$grab("loader").$delete((new Map([["recursive", true]])))
        } else {
          
          self.$grab("lyric_viewer").$box((new Map([["id", "loader"], ["width", 259], ["height", 333], ["smooth", 9], ["shadow", $$('LyricsStyle').$decorations()['$[]']("shadow")]])));
          load_file = self.$button((new Map([["label", "disk"], ["id", "disk_loader"], ["top", 3], ["left", 3], ["right", 65], ["parent", "loader"]])));
          $send(load_file, 'import', [true], function $$26(val){var self = $$26.$$s == null ? this : $$26.$$s, current_lyricist = nil;

            
            if (val == null) val = nil;
            current_lyricist = self.$grab("the_lyricist").$data();
            return current_lyricist.$load_strategy(val);}, {$$s: self});
          result = self.$list_all_files_in_localstorage();
          return $send(result['$[]']("files"), 'each_with_index', [], function $$27(file, index){var self = $$27.$$s == null ? this : $$27.$$s, list_f = nil;

            
            if (file == null) file = nil;
            if (index == null) index = nil;
            list_f = self.$grab("loader").$text(file);
            list_f.$position("absolute");
            list_f.$left(5);
            list_f.$top($rb_plus($rb_times(25, index), 39));
            return $send(list_f, 'touch', [true], function $$28(){var self = $$28.$$s == null ? this : $$28.$$s, file_content = nil, current_lyricist = nil, list_to_load = nil;

              
              file_content = self.$load_file(file);
              current_lyricist = self.$grab("the_lyricist").$data();
              list_to_load = (new Map([["filename", file.$to_s()], ["content", file_content.$to_s()]]));
              return current_lyricist.$load_strategy(list_to_load);}, {$$s: self});}, {$$s: self});
        }}, {$$s: self});
      titesong = self.$button((new Map([["label", self.title], ["id", "title"], ["top", $$('LyricsStyle').$dimensions()['$[]']("margin")], ["left", 250], ["width", 120], ["edit", true], ["parent", "tool_bar"]])));
      return $send(titesong, 'keyboard', ["down"], function $$29(native_event){var self = $$29.$$s == null ? this : $$29.$$s, event = nil, title = nil;

        
        if (native_event == null) native_event = nil;
        event = self.$Native(native_event);
        if ($eqeq(event['$[]']("keyCode").$to_s(), "13")) {
          
          titesong.$blink("orange");
          event.$preventDefault();
          title = self.$grab("title_label");
          return (self.title = title.$data());
        } else {
          return nil
        };}, {$$s: self});
    });
  })($nesting[0], $$('Atome'), $nesting)
};

Opal.modules["lyricist_editor"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $send = Opal.send, $to_ary = Opal.to_ary, $rb_plus = Opal.rb_plus, $rb_times = Opal.rb_times, $def = Opal.def, $eqeq = Opal.eqeq, $neqeq = Opal.neqeq, $truthy = Opal.truthy, $rb_gt = Opal.rb_gt, $not = Opal.not, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('box,grab,container_style,text,text_style,[],dimensions,colors,to_h,sort,content,each_with_index,+,*,line_container_style,to_sym,to_s,setup_edit_line_events,build_update_button,build_delete_button,build_add_line_button,private,keyboard,Native,==,preventDefault,to_i,data,!=,delete,[]=,blink,timer,update_lyrics,max,keys,>,full_refresh_viewer,update_song_listing,action_button_style,touch,left,top,show_lyrics_editor,size,show_add_dialog,build_dialog_buttons,!,empty?');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Lyricist');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    
    $def(self, '$show_lyrics_editor', function $$show_lyrics_editor(left_f, top_f) {
      var self = this, editor_container = nil, lyrics = nil, sorted_lyrics = nil;

      
      editor_container = self.$grab("main_stage").$box($$('LyricsStyle').$container_style((new Map([["id", "lyrics_editor_container"], ["top", top_f], ["left", left_f], ["position", "absolute"], ["overflow", "auto"], ["depth", 4]]))));
      editor_container.$text($$('LyricsStyle').$text_style((new Map([["data", "Lyrics editor"], ["component", (new Map([["size", $$('LyricsStyle').$dimensions()['$[]']("text_large")]]))], ["color", $$('LyricsStyle').$colors()['$[]']("text_primary")], ["left", 33], ["top", 10]]))));
      lyrics = self.$grab("lyric_viewer");
      sorted_lyrics = lyrics.$content().$sort().$to_h();
      $send(sorted_lyrics, 'each_with_index', [], function $$1($mlhs_tmp1, index){var $a, $b, self = $$1.$$s == null ? this : $$1.$$s, timecode = nil, text = nil, y_position = nil, line_container = nil, timecode_field = nil, text_field = nil, update_button = nil, delete_button = nil;

        
        if ($mlhs_tmp1 == null) $mlhs_tmp1 = nil;
        if (index == null) index = nil;
        $b = $mlhs_tmp1, $a = $to_ary($b), (timecode = ($a[0] == null ? nil : $a[0])), (text = ($a[1] == null ? nil : $a[1])), $b;
        y_position = $rb_plus(50, $rb_times(index, 60));
        line_container = editor_container.$box($$('LyricsStyle').$line_container_style((new Map([["id", (("line_container_") + (index)).$to_sym()], ["top", y_position]]))));
        timecode_field = line_container.$text($$('LyricsStyle').$text_style((new Map([["id", (("timecode_") + (index)).$to_sym()], ["data", timecode.$to_s()], ["component", (new Map([["size", $$('LyricsStyle').$dimensions()['$[]']("text_normal")]]))], ["edit", true], ["width", 70], ["left", 10], ["top", 10], ["color", $$('LyricsStyle').$colors()['$[]']("text_primary")]]))));
        text_field = line_container.$text($$('LyricsStyle').$text_style((new Map([["id", (("text_") + (index)).$to_sym()], ["data", text.$to_s()], ["component", (new Map([["size", $$('LyricsStyle').$dimensions()['$[]']("text_normal")]]))], ["edit", true], ["width", 300], ["left", 90], ["top", 10], ["color", $$('LyricsStyle').$colors()['$[]']("text_primary")]]))));
        self.$setup_edit_line_events(line_container, timecode_field, text_field, timecode, lyrics);
        update_button = self.$build_update_button(line_container, timecode, timecode_field, text_field, lyrics);
        return (delete_button = self.$build_delete_button(line_container, editor_container, timecode, lyrics));}, {$$s: self, $$has_top_level_mlhs_arg: true});
      return self.$build_add_line_button(editor_container, sorted_lyrics, lyrics);
    });
    self.$private();
    
    $def(self, '$setup_edit_line_events', function $$setup_edit_line_events(line_container, timecode_field, text_field, timecode, lyrics) {
      var self = this;

      
      $send(timecode_field, 'keyboard', ["dowm"], function $$2(native_event){var self = $$2.$$s == null ? this : $$2.$$s, event = nil, old_timecode = nil, new_timecode = nil, new_text = nil, counter = nil, current_position = nil, max_timecode = nil, prev_position = nil;
        if (self.length == null) self.length = nil;
        if (self.actual_position == null) self.actual_position = nil;

        
        if (native_event == null) native_event = nil;
        event = self.$Native(native_event);
        if ($eqeq(event['$[]']("keyCode").$to_s(), "13")) {
          
          event.$preventDefault();
          old_timecode = timecode;
          new_timecode = timecode_field.$data().$to_i();
          new_text = text_field.$data();
          if ($neqeq(new_timecode, old_timecode)) {
            
            lyrics.$content().$delete(old_timecode);
            lyrics.$content()['$[]='](new_timecode, new_text);
          } else {
            lyrics.$content()['$[]='](old_timecode, new_text)
          };
          line_container.$blink($$('LyricsStyle').$colors()['$[]']("success"));
          counter = self.$grab("counter");
          current_position = counter.$timer()['$[]']("position");
          self.$update_lyrics(current_position, lyrics, counter);
          max_timecode = lyrics.$content().$keys().$max();
          if ($truthy($rb_gt(max_timecode, self.length))) {
            
            self.length = max_timecode;
            self.$full_refresh_viewer(current_position);
          };
          prev_position = self.actual_position;
          self.$full_refresh_viewer(prev_position);
          return self.$update_song_listing();
        } else {
          return nil
        };}, {$$s: self});
      return $send(text_field, 'keyboard', ["dowm"], function $$3(native_event){var self = $$3.$$s == null ? this : $$3.$$s, event = nil, old_timecode = nil, new_timecode = nil, new_text = nil, counter = nil, current_position = nil, max_timecode = nil, prev_position = nil;
        if (self.length == null) self.length = nil;
        if (self.actual_position == null) self.actual_position = nil;

        
        if (native_event == null) native_event = nil;
        event = self.$Native(native_event);
        if ($eqeq(event['$[]']("keyCode").$to_s(), "13")) {
          
          event.$preventDefault();
          old_timecode = timecode;
          new_timecode = timecode_field.$data().$to_i();
          new_text = text_field.$data();
          if ($neqeq(new_timecode, old_timecode)) {
            
            lyrics.$content().$delete(old_timecode);
            lyrics.$content()['$[]='](new_timecode, new_text);
          } else {
            lyrics.$content()['$[]='](old_timecode, new_text)
          };
          line_container.$blink($$('LyricsStyle').$colors()['$[]']("success"));
          counter = self.$grab("counter");
          current_position = counter.$timer()['$[]']("position");
          self.$update_lyrics(current_position, lyrics, counter);
          max_timecode = lyrics.$content().$keys().$max();
          if ($truthy($rb_gt(max_timecode, self.length))) {
            
            self.length = max_timecode;
            self.$full_refresh_viewer(current_position);
          };
          prev_position = self.actual_position;
          self.$full_refresh_viewer(prev_position);
          return self.$update_song_listing();
        } else {
          return nil
        };}, {$$s: self});
    });
    
    $def(self, '$build_update_button', function $$build_update_button(line_container, timecode, timecode_field, text_field, lyrics) {
      var self = this, update_button = nil;

      
      update_button = line_container.$box($$('LyricsStyle').$action_button_style((new Map([["width", 25], ["height", 25], ["left", 400], ["top", 10], ["color", $$('LyricsStyle').$colors()['$[]']("success")]]))));
      update_button.$text($$('LyricsStyle').$text_style((new Map([["data", ""], ["component", (new Map([["size", $$('LyricsStyle').$dimensions()['$[]']("text_small")]]))], ["color", $$('LyricsStyle').$colors()['$[]']("text_primary")], ["left", 7], ["top", 5]]))));
      $send(update_button, 'touch', [true], function $$4(){var self = $$4.$$s == null ? this : $$4.$$s, old_timecode = nil, new_timecode = nil, new_text = nil, counter = nil, current_position = nil, max_timecode = nil, prev_position = nil;
        if (self.length == null) self.length = nil;
        if (self.actual_position == null) self.actual_position = nil;

        
        old_timecode = timecode;
        new_timecode = timecode_field.$data().$to_i();
        new_text = text_field.$data();
        if ($neqeq(new_timecode, old_timecode)) {
          
          lyrics.$content().$delete(old_timecode);
          lyrics.$content()['$[]='](new_timecode, new_text);
        } else {
          lyrics.$content()['$[]='](old_timecode, new_text)
        };
        line_container.$blink($$('LyricsStyle').$colors()['$[]']("success"));
        counter = self.$grab("counter");
        current_position = counter.$timer()['$[]']("position");
        self.$update_lyrics(current_position, lyrics, counter);
        max_timecode = lyrics.$content().$keys().$max();
        if ($truthy($rb_gt(max_timecode, self.length))) {
          
          self.length = max_timecode;
          self.$full_refresh_viewer(current_position);
        };
        prev_position = self.actual_position;
        self.$full_refresh_viewer(prev_position);
        return self.$update_song_listing();}, {$$s: self});
      return update_button;
    });
    
    $def(self, '$build_delete_button', function $$build_delete_button(line_container, editor_container, timecode, lyrics) {
      var self = this, delete_button = nil;

      
      delete_button = line_container.$box($$('LyricsStyle').$action_button_style((new Map([["width", 25], ["height", 25], ["left", 435], ["top", 10], ["color", $$('LyricsStyle').$colors()['$[]']("danger")]]))));
      delete_button.$text($$('LyricsStyle').$text_style((new Map([["data", ""], ["component", (new Map([["size", $$('LyricsStyle').$dimensions()['$[]']("text_small")]]))], ["color", $$('LyricsStyle').$colors()['$[]']("text_primary")], ["left", 7], ["top", 5]]))));
      $send(delete_button, 'touch', [true], function $$5(){var self = $$5.$$s == null ? this : $$5.$$s, prev_left = nil, prev_top = nil, counter = nil, current_position = nil;

        
        prev_left = editor_container.$left();
        prev_top = editor_container.$top();
        lyrics.$content().$delete(timecode);
        line_container.$delete((new Map([["recursive", true]])));
        editor_container.$delete((new Map([["recursive", true]])));
        self.$show_lyrics_editor(prev_left, prev_top);
        counter = self.$grab("counter");
        current_position = counter.$timer()['$[]']("position");
        self.$update_lyrics(current_position, lyrics, counter);
        self.$full_refresh_viewer(current_position);
        return self.$update_song_listing();}, {$$s: self});
      return delete_button;
    });
    
    $def(self, '$build_add_line_button', function $$build_add_line_button(editor_container, sorted_lyrics, lyrics) {
      var self = this, add_button = nil;

      
      add_button = editor_container.$box($$('LyricsStyle').$line_container_style((new Map([["width", 520], ["height", 40], ["left", 10], ["top", $rb_plus(50, $rb_times(sorted_lyrics.$size(), 60))], ["color", $$('LyricsStyle').$colors()['$[]']("success")]]))));
      add_button.$text($$('LyricsStyle').$text_style((new Map([["data", "+ Add a new line"], ["component", (new Map([["size", $$('LyricsStyle').$dimensions()['$[]']("text_normal")]]))], ["color", $$('LyricsStyle').$colors()['$[]']("text_primary")], ["left", 160], ["top", 10]]))));
      $send(add_button, 'touch', [true], function $$6(){var self = $$6.$$s == null ? this : $$6.$$s;

        return self.$show_add_dialog(editor_container, lyrics)}, {$$s: self});
      return add_button;
    });
    
    $def(self, '$show_add_dialog', function $$show_add_dialog(editor_container, lyrics) {
      var self = this, dialog_container = nil, new_timecode_field = nil, new_text_field = nil;

      
      dialog_container = self.$grab("lyrics_editor_container").$box($$('LyricsStyle').$container_style((new Map([["id", "add_dialog"], ["width", 300], ["height", 150], ["left", 120], ["top", 120], ["position", "absolute"]]))));
      dialog_container.$text($$('LyricsStyle').$text_style((new Map([["data", "Add a new line"], ["component", (new Map([["size", $$('LyricsStyle').$dimensions()['$[]']("text_large")]]))], ["color", $$('LyricsStyle').$colors()['$[]']("text_primary")], ["left", 10], ["top", 10]]))));
      dialog_container.$text($$('LyricsStyle').$text_style((new Map([["data", "Timecode:"], ["component", (new Map([["size", $$('LyricsStyle').$dimensions()['$[]']("text_normal")]]))], ["color", $$('LyricsStyle').$colors()['$[]']("text_primary")], ["left", 10], ["top", 40]]))));
      new_timecode_field = dialog_container.$text($$('LyricsStyle').$text_style((new Map([["id", "new_timecode"], ["data", 120], ["component", (new Map([["size", $$('LyricsStyle').$dimensions()['$[]']("text_normal")]]))], ["edit", true], ["width", 200], ["left", 90], ["top", 40], ["color", $$('LyricsStyle').$colors()['$[]']("text_accent")]]))));
      $send(new_timecode_field, 'keyboard', ["down"], function $$7(native_event){var self = $$7.$$s == null ? this : $$7.$$s, event = nil;

        
        if (native_event == null) native_event = nil;
        event = self.$Native(native_event);
        if ($eqeq(event['$[]']("keyCode").$to_s(), "13")) {
          return event.$preventDefault()
        } else {
          return nil
        };}, {$$s: self});
      dialog_container.$text($$('LyricsStyle').$text_style((new Map([["data", "Texte:"], ["component", (new Map([["size", $$('LyricsStyle').$dimensions()['$[]']("text_normal")]]))], ["color", $$('LyricsStyle').$colors()['$[]']("text_primary")], ["left", 10], ["top", 70]]))));
      new_text_field = dialog_container.$text($$('LyricsStyle').$text_style((new Map([["id", "new_text"], ["data", "Dummy text"], ["component", (new Map([["size", $$('LyricsStyle').$dimensions()['$[]']("text_normal")]]))], ["edit", true], ["width", 200], ["left", 90], ["top", 70], ["color", $$('LyricsStyle').$colors()['$[]']("text_primary")]]))));
      $send(new_text_field, 'keyboard', ["down"], function $$8(native_event){var self = $$8.$$s == null ? this : $$8.$$s, event = nil;

        
        if (native_event == null) native_event = nil;
        event = self.$Native(native_event);
        if ($eqeq(event['$[]']("keyCode").$to_s(), "13")) {
          return event.$preventDefault()
        } else {
          return nil
        };}, {$$s: self});
      return self.$build_dialog_buttons(dialog_container, new_timecode_field, new_text_field, editor_container, lyrics);
    });
    return $def(self, '$build_dialog_buttons', function $$build_dialog_buttons(dialog_container, new_timecode_field, new_text_field, editor_container, lyrics) {
      var self = this, confirm_button = nil, cancel_button = nil;

      
      confirm_button = dialog_container.$box($$('LyricsStyle').$action_button_style((new Map([["width", $$('LyricsStyle').$dimensions()['$[]']("large_width")], ["height", 30], ["left", 30], ["top", 110], ["color", $$('LyricsStyle').$colors()['$[]']("success")]]))));
      confirm_button.$text($$('LyricsStyle').$text_style((new Map([["data", "Confirmer"], ["component", (new Map([["size", $$('LyricsStyle').$dimensions()['$[]']("text_normal")]]))], ["color", $$('LyricsStyle').$colors()['$[]']("text_primary")], ["left", 30], ["top", 5]]))));
      cancel_button = dialog_container.$box($$('LyricsStyle').$action_button_style((new Map([["width", $$('LyricsStyle').$dimensions()['$[]']("large_width")], ["height", 30], ["left", 160], ["top", 110], ["color", "gray"]]))));
      cancel_button.$text($$('LyricsStyle').$text_style((new Map([["data", "Annuler"], ["component", (new Map([["size", $$('LyricsStyle').$dimensions()['$[]']("text_normal")]]))], ["color", $$('LyricsStyle').$colors()['$[]']("text_primary")], ["left", 35], ["top", 5]]))));
      $send(confirm_button, 'touch', [true], function $$9(){var self = $$9.$$s == null ? this : $$9.$$s, prev_left = nil, prev_top = nil, new_timecode = nil, new_text = nil, counter = nil, current_position = nil;
        if (self.length == null) self.length = nil;

        
        prev_left = editor_container.$left();
        prev_top = editor_container.$top();
        new_timecode = new_timecode_field.$data().$to_i();
        new_text = new_text_field.$data();
        if (($truthy($rb_gt(new_timecode, 0)) && ($not(new_text['$empty?']())))) {
          
          lyrics.$content()['$[]='](new_timecode, new_text);
          counter = self.$grab("counter");
          current_position = counter.$timer()['$[]']("position");
          self.$update_lyrics(current_position, lyrics, counter);
          if ($truthy($rb_gt(new_timecode, self.length))) {
            self.length = new_timecode
          };
          self.$full_refresh_viewer(current_position);
          dialog_container.$delete((new Map([["recursive", true]])));
          editor_container.$delete((new Map([["recursive", true]])));
          self.$show_lyrics_editor(prev_left, prev_top);
          return self.$update_song_listing();
        } else {
          return dialog_container.$blink($$('LyricsStyle').$colors()['$[]']("danger"))
        };}, {$$s: self});
      return $send(cancel_button, 'touch', [true], function $$10(){
        return dialog_container.$delete((new Map([["recursive", true]])))});
    });
  })($nesting[0], $$('Atome'), $nesting)
};

Opal.modules["lyricist_core"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $truthy = Opal.truthy, $rb_minus = Opal.rb_minus, $neqeq = Opal.neqeq, $rb_gt = Opal.rb_gt, $rb_le = Opal.rb_le, $rb_divide = Opal.rb_divide, $rb_plus = Opal.rb_plus, $rb_lt = Opal.rb_lt, $rb_ge = Opal.rb_ge, $send = Opal.send, $thrower = Opal.thrower, $def = Opal.def, $eqeq = Opal.eqeq, $rb_times = Opal.rb_times, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('empty?,-,[],object_id,!=,size,nil?,sort,keys,[]=,>,<=,/,+,<,>=,abs,index,min_by,min,times,<<,each,==,content,grab,data,content=,stop_lyrics,colors,positions,dimensions,respond_to?,update,send,each_with_index,*,merge,text,timer,closest_values,format_lyrics,delete,build_timeline_slider,value,rebuild_timeline_slider,clear,to_f,eval,call');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Lyricist');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.lyrics_anticipation_time = $proto.sorted_keys_cache = $proto.sorted_keys_cache_size = $proto.number_of_lines = $proto.length = $proto.lyrics = $proto.default_length = nil;
    
    self.lyrics_anticipation_time = 0.0;
    
    $def(self, '$closest_values', function $$closest_values(hash, target, count) {
      var $a, self = this, adjusted_target = nil, $ret_or_1 = nil, sorted_keys = nil, low = nil, high = nil, closest_index = nil, mid = nil, prev = nil, current = nil, result = nil;

      
      if (count == null) count = 1;
      if ($truthy(hash['$empty?']())) {
        return []
      };
      adjusted_target = $rb_minus(target, ($truthy(($ret_or_1 = self.lyrics_anticipation_time)) ? ($ret_or_1) : (0.0)));
      self.sorted_keys_cache = ($truthy(($ret_or_1 = self.sorted_keys_cache)) ? ($ret_or_1) : ((new Map())));
      sorted_keys = self.sorted_keys_cache['$[]'](hash.$object_id());
      if (($truthy(sorted_keys['$nil?']()) || ($neqeq(self.sorted_keys_cache_size, hash.$size())))) {
        
        sorted_keys = hash.$keys().$sort();
        self.sorted_keys_cache['$[]='](hash.$object_id(), sorted_keys);
        self.sorted_keys_cache_size = hash.$size();
      };
      if ($truthy($rb_gt(sorted_keys.$size(), 50))) {
        
        $a = [0, $rb_minus(sorted_keys.$size(), 1)], (low = $a[0]), (high = $a[1]), $a;
        closest_index = nil;
        while ($truthy($rb_le(low, high))) {
        
          mid = $rb_divide($rb_plus(low, high), 2);
          if ($truthy($rb_lt(sorted_keys['$[]'](mid), adjusted_target))) {
            low = $rb_plus(mid, 1)
          } else if ($truthy($rb_gt(sorted_keys['$[]'](mid), adjusted_target))) {
            high = $rb_minus(mid, 1)
          } else {
            
            closest_index = mid;
            break;
          };
        };
        if ($truthy(closest_index['$nil?']())) {
          if ($truthy($rb_ge(low, sorted_keys.$size()))) {
            closest_index = $rb_minus(sorted_keys.$size(), 1)
          } else if ($truthy($rb_le(low, 0))) {
            closest_index = 0
          } else {
            
            prev = sorted_keys['$[]']($rb_minus(low, 1));
            current = sorted_keys['$[]'](low);
            closest_index = ($truthy($rb_lt($rb_minus(adjusted_target, prev).$abs(), $rb_minus(current, adjusted_target).$abs())) ? ($rb_minus(low, 1)) : (low));
          }
        };
      } else {
        closest_index = sorted_keys.$index($send(sorted_keys, 'min_by', [], function $$1(key){
          
          if (key == null) key = nil;
          return $rb_minus(key, adjusted_target).$abs();}))
      };
      if ($truthy(closest_index['$nil?']())) {
        return []
      };
      closest_index = [closest_index, $rb_minus(sorted_keys.$size(), 1)].$min();
      result = [];
      (function(){try { var $t_break = $thrower('break'); return $send(count, 'times', [], function $$2(i){var index = nil, key = nil;

        
        if (i == null) i = nil;
        index = $rb_plus(closest_index, i);
        if ($truthy($rb_ge(index, sorted_keys.$size()))) {
          $t_break.$throw(nil, $$2.$$is_lambda)
        };
        key = sorted_keys['$[]'](index);
        if ($truthy(hash['$[]'](key))) {
          return result['$<<'](hash['$[]'](key))
        } else {
          return nil
        };})} catch($e) {
        if ($e === $t_break) return $e.$v;
        throw $e;
      } finally {$t_break.is_orphan = true;}})();
      return result;
    }, -3);
    
    $def(self, '$closest_key_before', function $$closest_key_before(hash, target) {
      var max_key = nil;

      
      if ($truthy(hash['$empty?']())) {
        return nil
      };
      max_key = nil;
      $send(hash.$keys(), 'each', [], function $$3(key){
        
        if (key == null) key = nil;
        if (($truthy($rb_le(key, target)) && (($truthy(max_key['$nil?']()) || ($truthy($rb_gt(key, max_key))))))) {
          return (max_key = key)
        } else {
          return nil
        };});
      return max_key;
    });
    
    $def(self, '$find_key_by_title', function $$find_key_by_title(hash, title) {try { var $t_return = $thrower('return'); 
      
      
      $send(hash, 'each', [], function $$4(key, value){
        
        if (key == null) key = nil;
        if (value == null) value = nil;
        if ($eqeq(value['$[]']("title"), title)) {
          $t_return.$throw(key, $$4.$$is_lambda)
        } else {
          return nil
        };}, {$$ret: $t_return});
      return nil;} catch($e) {
        if ($e === $t_return) return $e.$v;
        throw $e;
      } finally {$t_return.is_orphan = true;}
    });
    
    $def(self, '$format_lyrics', function $$format_lyrics(lyrics_array, target) {
      var self = this, style_first_line = nil, common_style = nil;

      
      if ($truthy(lyrics_array['$empty?']())) {
        return nil
      };
      if (($neqeq(target.$data(), lyrics_array['$[]'](0)) && ($eqeq(self.$grab("counter").$content(), "play")))) {
        
        target.$data(lyrics_array['$[]'](0));
        if ($eqeq(lyrics_array['$[]'](0), "<end>")) {
          
          lyrics_array = [];
          target['$content=']("");
          self.$stop_lyrics();
        };
        style_first_line = (new Map([["color", $$('LyricsStyle').$colors()['$[]']("first_line_color")], ["left", $$('LyricsStyle').$positions()['$[]']("lyrics_left_offset")], ["top", $$('LyricsStyle').$positions()['$[]']("lyrics_top_offset")], ["component", (new Map([["size", $$('LyricsStyle').$dimensions()['$[]']("lyrics_size")]]))]]));
        if ($truthy(target['$respond_to?']("update"))) {
          target.$update(style_first_line)
        } else {
          $send(style_first_line, 'each', [], function $$5(prop, val){
            
            if (prop == null) prop = nil;
            if (val == null) val = nil;
            return target.$send(prop, val);})
        };
        common_style = (new Map([["edit", false], ["width", $$('LyricsStyle').$dimensions()['$[]']("lyrics_width")], ["color", $$('LyricsStyle').$colors()['$[]']("other_lines_color")], ["position", "absolute"]]));
        return $send(lyrics_array, 'each_with_index', [], function $$6(lyric, index){var top_position = nil, child_params = nil;

          
          if (lyric == null) lyric = nil;
          if (index == null) index = nil;
          if ($eqeq(index, 0)) {
            return nil
          };
          top_position = $rb_plus($rb_times($$('LyricsStyle').$dimensions()['$[]']("next_Line_lyrics_size"), index), $rb_divide($$('LyricsStyle').$dimensions()['$[]']("lyrics_size"), 3));
          child_params = (new Map([["data", lyric], ["component", (new Map([["size", $$('LyricsStyle').$dimensions()['$[]']("next_Line_lyrics_size")]]))], ["top", $rb_times(top_position, $$('LyricsStyle').$dimensions()['$[]']("percent_offset_between_lines"))]])).$merge(common_style);
          return target.$text(child_params);});
      } else {
        return nil
      };
    });
    
    $def(self, '$update_lyrics', function $$update_lyrics(value, target, timer_found) {
      var self = this, current_lyrics = nil;

      
      if ($truthy(timer_found['$respond_to?']("update"))) {
        timer_found.$update((new Map([["data", value], ["timer", (new Map([["position", value], ["start", value]]))]])))
      } else {
        
        timer_found.$data(value);
        timer_found.$timer()['$[]=']("position", value);
        timer_found.$timer()['$[]=']("start", value);
      };
      self.actual_position = value;
      current_lyrics = self.$closest_values(target.$content(), value, self.number_of_lines);
      return self.$format_lyrics(current_lyrics, target);
    });
    
    $def(self, '$rebuild_timeline_slider', function $$rebuild_timeline_slider(at) {
      var self = this, slider = nil;

      
      if (at == null) at = 0;
      slider = self.$grab("timeline_slider");
      if ($truthy(slider)) {
        slider.$delete((new Map([["force", true]])))
      };
      self.$build_timeline_slider();
      return self.$grab("timeline_slider").$value(at);
    }, -1);
    
    $def(self, '$full_refresh_viewer', function $$full_refresh_viewer(at) {
      var self = this;

      
      if (at == null) at = 0;
      self.$rebuild_timeline_slider(0);
      self.$rebuild_timeline_slider(self.length);
      return self.$rebuild_timeline_slider(at);
    }, -1);
    
    $def(self, '$refresh_viewer', function $$refresh_viewer(at) {
      var self = this;

      
      if (at == null) at = 0;
      return self.$rebuild_timeline_slider(at);
    }, -1);
    
    $def(self, '$clear_all', function $$clear_all() {
      var self = this, lyric_viewer = nil;

      
      self.lyrics = (new Map([[0, "new"]]));
      lyric_viewer = self.$grab("lyric_viewer");
      if ($truthy(lyric_viewer['$respond_to?']("update"))) {
        lyric_viewer.$update((new Map([["content", (new Map())], ["data", ""]])))
      } else {
        
        lyric_viewer['$content='](self.lyrics);
        lyric_viewer.$data("");
      };
      self.length = self.default_length;
      lyric_viewer.$clear(true);
      return self.$rebuild_timeline_slider();
    });
    
    $def(self, '$set_lyrics_anticipation', function $$set_lyrics_anticipation(seconds) {
      var self = this;

      
      self.lyrics_anticipation_time = seconds.$to_f();
      return (self.sorted_keys_cache = (new Map()));
    });
    
    $def(self, '$get_lyrics_anticipation', function $$get_lyrics_anticipation() {
      var self = this, $ret_or_1 = nil;

      if ($truthy(($ret_or_1 = self.lyrics_anticipation_time))) {
        return $ret_or_1
      } else {
        return 0.0
      }
    });
    
    $def(self, '$cleanup_cache', function $$cleanup_cache() {
      var self = this;

      return (self.sorted_keys_cache = (new Map()))
    });
    return $def(self, '$save_file', function $$save_file(filename, content, mime_type) {try { 
      var save_js = nil;

      
      if (mime_type == null) mime_type = "text/plain";
      save_js = $$('JS').$eval("(function(fileName, fileContent, mimeType) {\n" + "  console.log(\"Saving file:\", fileName, \"with content:\", fileContent);\n" + "  \n" + "  // Crer le Blob avec le contenu\n" + "  var blob = new Blob([fileContent], {type: mimeType});\n" + "  \n" + "  // Crer l'URL\n" + "  var url = URL.createObjectURL(blob);\n" + "  \n" + "  // Crer le lien de tlchargement avec le nom de fichier correct\n" + "  var link = document.createElement('a');\n" + "  link.href = url;\n" + "  link.setAttribute('download', fileName);  // Utiliser setAttribute pour plus de fiabilit\n" + "  \n" + "  // Assurer la visibilit du lien\n" + "  link.style.display = 'none';\n" + "  \n" + "  // Ajouter au DOM, cliquer et supprimer\n" + "  document.body.appendChild(link);\n" + "  link.click();\n" + "  document.body.removeChild(link);\n" + "  \n" + "  // Librer l'URL\n" + "  setTimeout(function() {\n" + "    URL.revokeObjectURL(url);\n" + "  }, 100);\n" + "  \n" + "  return true;\n" + "})\n");
      return save_js.$call(filename, content, mime_type);} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, -3);
  })($nesting[0], $$('Atome'), $nesting)
};

Opal.modules["list"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $rb_times = Opal.rb_times, $send = Opal.send, $eqeq = Opal.eqeq, $truthy = Opal.truthy, $def = Opal.def, $not = Opal.not, $rb_plus = Opal.rb_plus, $thrower = Opal.thrower, $to_ary = Opal.to_ary, $neqeq = Opal.neqeq, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('button,[],dimensions,positions,box,grab,colors,text,*,keyboard,Native,==,to_s,data,blink,preventDefault,touch,display,delete,refresh_song_list,update_song_listing,add_current_song_to_list,save_playlist,clear,!,empty?,dup,sort_by,keys,to_i,each,find_song_key_by_title,load_song_from_list,delete_song_from_list,reorder_song,+,stop_audio,timer,init_audio,content,parse_song_lyrics,full_refresh_viewer,puts,size,[]=,reorder_all_songs,to_a,map,each_with_index,!=,max,to_proc,save_file,is_a?,build_list_manager');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Lyricist');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.list = $proto.audio_object = $proto.title = $proto.audio_path = $proto.imported_lyrics = $proto.list_title = nil;
    
    
    $def(self, '$build_list_manager', function $$build_list_manager() {
      var self = this, list_button = nil, list_title_bar = nil, title_bar_list_text = nil, add_song = nil, save_list = nil;

      
      list_button = self.$button((new Map([["label", "list"], ["id", "list_button"], ["top", $$('LyricsStyle').$dimensions()['$[]']("margin")], ["left", $$('LyricsStyle').$positions()['$[]']("seventh_column")], ["parent", "tool_bar"]])));
      self.$grab("main_stage").$box((new Map([["id", "list_panel"], ["width", 400], ["bottom", 50], ["top", 0], ["height", "auto"], ["left", 150], ["color", $$('LyricsStyle').$colors()['$[]']("background")], ["border", (new Map([["color", $$('LyricsStyle').$colors()['$[]']("primary")], ["width", 2]]))], ["depth", 10], ["overflow", "auto"], ["display", "none"], ["attach", "lyrics_support"]])));
      list_title_bar = self.$grab("list_title_bar").$box((new Map([["id", "list_title_bar"], ["width", 400], ["height", 40], ["top", 0], ["left", 0], ["color", $$('LyricsStyle').$colors()['$[]']("primary")], ["attach", "list_panel"]])));
      title_bar_list_text = list_title_bar.$text((new Map([["id", "list_title"], ["position", "absolute"], ["top", $rb_times($$('LyricsStyle').$dimensions()['$[]']("margin"), 3)], ["left", $rb_times($$('LyricsStyle').$dimensions()['$[]']("margin"), 3)], ["data", "List name"], ["edit", true], ["color", $$('LyricsStyle').$colors()['$[]']("secondary")]])));
      self.list_title = "new list";
      $send(title_bar_list_text, 'keyboard', ["down"], function $$1(native_event){var self = $$1.$$s == null ? this : $$1.$$s, event = nil;

        
        if (native_event == null) native_event = nil;
        event = self.$Native(native_event);
        if ($eqeq(event['$[]']("keyCode").$to_s(), "13")) {
          
          self.list_title = title_bar_list_text.$data();
          title_bar_list_text.$blink("orange");
          return event.$preventDefault();
        } else {
          return nil
        };}, {$$s: self});
      self.$grab("main_stage").$text((new Map([["content", "Playlist Manager"], ["id", "list_panel_title"], ["width", 300], ["height", 30], ["top", 10], ["left", 10], ["size", $$('LyricsStyle').$dimensions()['$[]']("text_medium")], ["color", "white"], ["attach", "list_title_bar"]])));
      self.$grab("main_stage").$box((new Map([["id", "list_container"], ["width", 380], ["height", "auto"], ["top", 50], ["bottom", 0], ["left", 10], ["color", $$('LyricsStyle').$colors()['$[]']("background")], ["attach", "list_panel"]])));
      add_song = self.$button((new Map([["label", "new"], ["id", "add_song_to_list"], ["top", "auto"], ["bottom", 3], ["left", 10], ["parent", "list_panel"]])));
      save_list = self.$button((new Map([["label", "Save"], ["id", "save_list"], ["top", "auto"], ["bottom", 3], ["left", "auto"], ["right", 10], ["parent", "list_panel"]])));
      $send(list_button, 'touch', [true], function $$2(){var self = $$2.$$s == null ? this : $$2.$$s;

        
        if ($eqeq(self.$grab("list_panel").$display(), "none")) {
          
          self.$grab("list_panel").$display("block");
          self.$grab("import_module").$display("none");
          if ($truthy(self.$grab("lyrics_editor_container"))) {
            self.$grab("lyrics_editor_container").$delete((new Map([["recursive", true]])))
          };
          self.$refresh_song_list();
        } else {
          self.$grab("list_panel").$display("none")
        };
        return self.$update_song_listing();}, {$$s: self});
      $send(add_song, 'touch', [true], function $$3(){var self = $$3.$$s == null ? this : $$3.$$s;

        
        self.$add_current_song_to_list();
        return self.$refresh_song_list();}, {$$s: self});
      return $send(save_list, 'touch', [true], function $$4(){var self = $$4.$$s == null ? this : $$4.$$s;

        return self.$save_playlist()}, {$$s: self});
    });
    
    $def(self, '$refresh_song_list', function $$refresh_song_list() {
      var self = this, list_container = nil, current_list = nil, sorted_keys = nil, top_position = nil;

      
      list_container = self.$grab("list_container");
      list_container.$clear(true);
      if (!($truthy(self.list) && ($not(self.list['$empty?']())))) {
        return nil
      };
      current_list = self.list.$dup();
      sorted_keys = $send(current_list.$keys(), 'sort_by', [], function $$5(k){
        
        if (k == null) k = nil;
        return k.$to_i();});
      top_position = 10;
      return $send(sorted_keys, 'each', [], function $$6(key){var self = $$6.$$s == null ? this : $$6.$$s, item = nil, load_button = nil, delete_button = nil;

        
        if (key == null) key = nil;
        item = current_list['$[]'](key);
        if (!($truthy(item) && ($truthy(item['$[]']("title"))))) {
          return nil
        };
        self.$grab("main_stage").$box((new Map([["id", "song_item_" + (key)], ["width", 360], ["height", 50], ["top", top_position], ["left", 0], ["smooth", 6], ["color", $$('LyricsStyle').$colors()['$[]']("primary")], ["attach", "list_container"]])));
        self.$grab("main_stage").$text((new Map([["data", key.$to_s()], ["id", "order_" + (key)], ["height", 30], ["position", "absolute"], ["top", 10], ["left", 10], ["edit", true], ["color", "lightgray"], ["attach", "song_item_" + (key)]])));
        self.$grab("main_stage").$text((new Map([["data", item['$[]']("title").$to_s()], ["id", "title_" + (key)], ["width", 200], ["position", "absolute"], ["height", 30], ["top", 10], ["left", 50], ["color", "lightgray"], ["attach", "song_item_" + (key)]])));
        load_button = self.$button((new Map([["label", "Load"], ["id", "load_" + (key)], ["top", 10], ["left", 260], ["width", 40], ["height", 30], ["size", $$('LyricsStyle').$dimensions()['$[]']("text_small")], ["parent", "song_item_" + (key)]])));
        delete_button = self.$button((new Map([["label", "X"], ["id", "delete_" + (key)], ["top", 10], ["left", 310], ["width", 30], ["height", 30], ["size", $$('LyricsStyle').$dimensions()['$[]']("text_small")], ["color", $$('LyricsStyle').$colors()['$[]']("danger")], ["parent", "song_item_" + (key)]])));
        $send(load_button, 'touch', [true], function $$7(){var self = $$7.$$s == null ? this : $$7.$$s, title_to_load = nil, new_key = nil;

          
          title_to_load = item['$[]']("title").$to_s();
          new_key = self.$find_song_key_by_title(title_to_load);
          if ($truthy(new_key)) {
            return self.$load_song_from_list(new_key)
          } else {
            return nil
          };}, {$$s: self});
        $send(delete_button, 'touch', [true], function $$8(){var self = $$8.$$s == null ? this : $$8.$$s, title_to_delete = nil, new_key = nil;

          
          title_to_delete = item['$[]']("title").$to_s();
          new_key = self.$find_song_key_by_title(title_to_delete);
          if ($truthy(new_key)) {
            
            self.$delete_song_from_list(new_key);
            return self.$refresh_song_list();
          } else {
            return nil
          };}, {$$s: self});
        $send(self.$grab("order_" + (key)), 'keyboard', ["down"], function $$9(native_event){var self = $$9.$$s == null ? this : $$9.$$s, event = nil, title_to_reorder = nil, new_key = nil, new_order = nil;

          
          if (native_event == null) native_event = nil;
          event = self.$Native(native_event);
          if ($eqeq(event['$[]']("keyCode").$to_s(), "13")) {
            
            title_to_reorder = item['$[]']("title").$to_s();
            new_key = self.$find_song_key_by_title(title_to_reorder);
            new_order = self.$grab("order_" + (key)).$data();
            if ($truthy(new_key)) {
              
              self.$reorder_song(new_key, new_order);
              self.$refresh_song_list();
              self.$update_song_listing();
            };
            return event.$preventDefault();
          } else {
            return nil
          };}, {$$s: self});
        return (top_position = $rb_plus(top_position, 60));}, {$$s: self});
    });
    
    $def(self, '$find_song_key_by_title', function $$find_song_key_by_title(title) {try { var $t_return = $thrower('return'); 
      var self = this;

      
      if (!$truthy(self.list)) {
        return nil
      };
      $send(self.list, 'each', [], function $$10(key, item){
        
        if (key == null) key = nil;
        if (item == null) item = nil;
        if (($truthy(item) && ($eqeq(item['$[]']("title").$to_s(), title)))) {
          $t_return.$throw(key, $$10.$$is_lambda)
        } else {
          return nil
        };}, {$$ret: $t_return});
      return nil;} catch($e) {
        if ($e === $t_return) return $e.$v;
        throw $e;
      } finally {$t_return.is_orphan = true;}
    });
    
    $def(self, '$load_song_from_list', function $$load_song_from_list(key) {try { 
      var $a, self = this, song_data = nil, counter = nil, lyrics = nil, raw_text = nil;

      
      if (!($truthy(self.list) && ($truthy(self.list['$[]'](key))))) {
        return nil
      };
      song_data = self.list['$[]'](key);
      if ($truthy(self.audio_object)) {
        self.$stop_audio(self.audio_object)
      };
      counter = self.$grab("counter");
      if ($truthy(counter)) {
        counter.$timer((new Map([["stop", true]])))
      };
      self.title = song_data['$[]']("title");
      if ($truthy(self.$grab("title_label"))) {
        self.$grab("title_label").$data(self.title)
      };
      self.$init_audio(song_data['$[]']("song"));
      lyrics = (function() { try {
        return ($a = song_data['$[]']("lyrics"), typeof Opal.compile === 'function' ? eval(Opal.compile($a, {scope_variables: ["song_data", "counter", "lyrics", "key"], arity_check: false, file: '(eval)', eval: true})) : self.$eval($a))
      } catch ($err) {
        if (Opal.rescue($err, [$$('StandardError')])) {
          try {
            return (new Map())
          } finally { Opal.pop_exception($err); }
        } else { throw $err; }
      }})();
      if ($truthy(self.$grab("lyric_viewer"))) {
        self.$grab("lyric_viewer").$content(lyrics)
      };
      raw_text = song_data['$[]']("raw");
      self.$grab("importer_support").$clear(true);
      self.$parse_song_lyrics(raw_text);
      self.imported_lyrics = raw_text;
      return self.$full_refresh_viewer(0);} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    });
    
    $def(self, '$delete_song_from_list', function $$delete_song_from_list(key) {
      var self = this, song_title = nil;

      
      if (!($truthy(self.list) && ($truthy(self.list['$[]'](key))))) {
        return nil
      };
      song_title = (function() { try {
        return self.list['$[]'](key)['$[]']("title")
      } catch ($err) {
        if (Opal.rescue($err, [$$('StandardError')])) {
          try {
            return "inconnu"
          } finally { Opal.pop_exception($err); }
        } else { throw $err; }
      }})();
      self.$puts("Suppression de la chanson '" + (song_title) + "' (cl: " + (key) + ")");
      self.list.$delete(key);
      return self.$puts("lment supprim. Nombre d'lments restants: " + (self.list.$size()));
    });
    
    $def(self, '$reorder_song', function $$reorder_song(old_key, new_key) {
      var self = this, song_data = nil;

      
      if (!($truthy(self.list) && ($truthy(self.list['$[]'](old_key))))) {
        return nil
      };
      if ($eqeq(old_key, new_key)) {
        return nil
      };
      song_data = self.list['$[]'](old_key);
      self.list.$delete(old_key);
      self.list['$[]='](new_key, song_data);
      return self.$reorder_all_songs();
    });
    
    $def(self, '$reorder_all_songs', function $$reorder_all_songs() {
      var self = this, sorted_items = nil, old_keys = nil, key_mapping = nil;

      
      sorted_items = $send(self.list.$to_a(), 'sort_by', [], function $$11(k, _){
        
        if (k == null) k = nil;
        if (_ == null) _ = nil;
        return k.$to_i();});
      old_keys = $send(sorted_items, 'map', [], function $$12(k, _){
        
        if (k == null) k = nil;
        if (_ == null) _ = nil;
        return k;});
      key_mapping = (new Map());
      $send(sorted_items, 'each_with_index', [], function $$13($mlhs_tmp1, index){var $a, $b, self = $$13.$$s == null ? this : $$13.$$s, old_key = nil, item = nil, new_key = nil;
        if (self.list == null) self.list = nil;

        
        if ($mlhs_tmp1 == null) $mlhs_tmp1 = nil;
        if (index == null) index = nil;
        $b = $mlhs_tmp1, $a = $to_ary($b), (old_key = ($a[0] == null ? nil : $a[0])), (item = ($a[1] == null ? nil : $a[1])), $b;
        new_key = $rb_plus(index, 1).$to_s();
        key_mapping['$[]='](old_key, new_key);
        if ($eqeq(old_key, new_key)) {
          return nil
        };
        self.list['$[]='](new_key, item);
        if ($neqeq(old_key, new_key)) {
          return self.list.$delete(old_key)
        } else {
          return nil
        };}, {$$s: self, $$has_top_level_mlhs_arg: true});
      return self.$refresh_song_list();
    });
    
    $def(self, '$add_current_song_to_list', function $$add_current_song_to_list(song_nb) {
      var $a, self = this, current_lyrics = nil, new_song = nil, next_key = nil;

      
      if (song_nb == null) song_nb = nil;
      if (!($truthy(self.audio_path) && ($truthy(self.title)))) {
        return nil
      };
      current_lyrics = (function() { try {
        return self.$grab("lyric_viewer").$content().$to_s()
      } catch ($err) {
        if (Opal.rescue($err, [$$('StandardError')])) {
          try {
            return "{}"
          } finally { Opal.pop_exception($err); }
        } else { throw $err; }
      }})();
      new_song = (new Map([["lyrics", current_lyrics], ["song", self.audio_path], ["title", self.title], ["raw", self.imported_lyrics]]));
      next_key = ($truthy(self.list['$empty?']()) ? ("1") : ($rb_plus($send(self.list.$keys(), 'map', [], "to_i".$to_proc()).$max(), 1).$to_s()));
      if ($truthy(song_nb)) {
        return ($a = [song_nb, new_song], $send(self.list, '[]=', $a), $a[$a.length - 1])
      } else {
        return ($a = [next_key, new_song], $send(self.list, '[]=', $a), $a[$a.length - 1])
      };
    }, -1);
    
    $def(self, '$save_playlist', function $$save_playlist() {
      var self = this, content_to_save = nil, list_tile = nil;

      
      self.$update_song_listing();
      content_to_save = self.list;
      list_tile = "" + (self.list_title) + ".prx";
      return self.$save_file(list_tile, content_to_save);
    });
    
    $def(self, '$load_playlist', function $$load_playlist(file_content) {try { 
      var $a, self = this, playlist_data = nil;

      
      playlist_data = (function() { try {
        return ($a = file_content, typeof Opal.compile === 'function' ? eval(Opal.compile($a, {scope_variables: ["playlist_data", "file_content"], arity_check: false, file: '(eval)', eval: true})) : self.$eval($a))
      } catch ($err) {
        if (Opal.rescue($err, [$$('StandardError')])) {
          try {
            return (new Map())
          } finally { Opal.pop_exception($err); }
        } else { throw $err; }
      }})();
      if (($truthy(playlist_data['$is_a?']($$('Hash'))) && ($not(playlist_data['$empty?']())))) {
        
        self.list = playlist_data;
        return self.$refresh_song_list();
      } else {
        return nil
      };} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    });
    return $def(self, '$initialize_list_manager', function $$initialize_list_manager() {
      var self = this;

      return self.$build_list_manager()
    });
  })($nesting[0], null, $nesting)
};

Opal.queue(function(Opal) {/* Generated by Opal 1.8.2 */
  var $truthy = Opal.truthy, $def = Opal.def, $send = Opal.send, $klass = Opal.klass, $rb_times = Opal.rb_times, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('is_a?,to_json,setItem,localStorage,global,getItem,length,times,key,<<,box,[],colors,play,pause,identity_generator,dimensions,grab,button_style,text,text_style,timer,[]=,content,data,blink,split,each_with_index,*,decorations,touch,alter_lyric_event,update_song_listing,audio,display,new,element,init_audio,new_song,initialize_list_manager,init_lyrix');
  
  
  $def(self, '$save_file_to_idb', function $$save_file_to_idb(file_name, content_to_save) {
    var content_string = nil;

    
    content_string = ($truthy(content_to_save['$is_a?']($$('String'))) ? (content_to_save) : (content_to_save.$to_json()));
    return $$('JS').$global().$localStorage().$setItem(file_name, content_string);
  });
  
  $def(self, '$load_file', function $$load_file(file_name) {
    var content = nil, e = nil;

    try {
      return (content = $$('JS').$global().$localStorage().$getItem(file_name))
    } catch ($err) {
      if (Opal.rescue($err, [$$('StandardError')])) {(e = $err)
        try {
          return nil
        } finally { Opal.pop_exception($err); }
      } else { throw $err; }
    }
  });
  
  $def(self, '$list_all_files_in_localstorage', function $$list_all_files_in_localstorage() {
    var storage_length = nil, files = nil;

    
    storage_length = $$('JS').$global().$localStorage().$length();
    files = [];
    $send(storage_length, 'times', [], function $$1(i){var key = nil;

      
      if (i == null) i = nil;
      key = $$('JS').$global().$localStorage().$key(i);
      return files['$<<'](key);});
    return (new Map([["files", files]]));
  });
  self.$require("./index.rb"+ '/../' + "lyrics_style");
  self.$require("./index.rb"+ '/../' + "lyricist_base");
  self.$require("./index.rb"+ '/../' + "lyricist_ui");
  self.$require("./index.rb"+ '/../' + "lyricist_buttons");
  self.$require("./index.rb"+ '/../' + "lyricist_editor");
  self.$require("./index.rb"+ '/../' + "lyricist_core");
  self.$require("./index.rb"+ '/../' + "list");
  self.$box((new Map([["id", "main_stage"], ["width", "100%"], ["height", "100%"], ["overflow", "hidden"], ["color", $$('LyricsStyle').$colors()['$[]']("container_bg")]])));
  (function($base, $super) {
    var self = $klass($base, $super, 'Object');

    
    
    
    $def(self, '$audio_length', function $$audio_length(audio_object) {
      
      return audio_object.$length()
    });
    
    $def(self, '$play_audio', function $$play_audio(audio_object, at) {
      
      return audio_object.$play(at)
    });
    
    $def(self, '$pause_audio', function $$pause_audio(audio_object) {
      
      return audio_object.$pause("pause")
    });
    return $def(self, '$stop_audio', function $$stop_audio(audio_object) {
      
      return audio_object.$play("stop")
    });
  })($nesting[0], null);
  
  $def(self, '$button', function $$button(params) {
    var self = this, id_f = nil, $ret_or_1 = nil, width_f = nil, height_f = nil, right_f = nil, bottom_f = nil, top_f = nil, left_f = nil, background_f = nil, color_f = nil, label_f = nil, parent_f = nil, size_f = nil, edition = nil, btn = nil;

    
    id_f = ($truthy(($ret_or_1 = params['$[]']("id"))) ? ($ret_or_1) : (self.$identity_generator()));
    width_f = ($truthy(($ret_or_1 = params['$[]']("width"))) ? ($ret_or_1) : ($$('LyricsStyle').$dimensions()['$[]']("standard_width")));
    height_f = ($truthy(($ret_or_1 = params['$[]']("height"))) ? ($ret_or_1) : ($$('LyricsStyle').$dimensions()['$[]']("button_height")));
    right_f = ($truthy(($ret_or_1 = params['$[]']("right"))) ? ($ret_or_1) : (0));
    bottom_f = ($truthy(($ret_or_1 = params['$[]']("bottom"))) ? ($ret_or_1) : (0));
    top_f = ($truthy(($ret_or_1 = params['$[]']("top"))) ? ($ret_or_1) : (0));
    left_f = ($truthy(($ret_or_1 = params['$[]']("left"))) ? ($ret_or_1) : (0));
    background_f = ($truthy(($ret_or_1 = params['$[]']("background"))) ? ($ret_or_1) : ($$('LyricsStyle').$colors()['$[]']("primary")));
    color_f = ($truthy(($ret_or_1 = params['$[]']("color"))) ? ($ret_or_1) : ($$('LyricsStyle').$colors()['$[]']("secondary")));
    label_f = ($truthy(($ret_or_1 = params['$[]']("label"))) ? ($ret_or_1) : ("dummy"));
    parent_f = ($truthy(($ret_or_1 = params['$[]']("parent"))) ? ($ret_or_1) : ("view"));
    size_f = ($truthy(($ret_or_1 = params['$[]']("size"))) ? ($ret_or_1) : ($$('LyricsStyle').$dimensions()['$[]']("text_small")));
    edition = ($truthy(($ret_or_1 = params['$[]']("edit"))) && ($ret_or_1));
    btn = self.$grab(parent_f).$box($$('LyricsStyle').$button_style((new Map([["id", id_f], ["width", width_f], ["height", height_f], ["top", top_f], ["left", left_f], ["right", right_f], ["bottom", bottom_f], ["color", background_f]]))));
    btn.$text($$('LyricsStyle').$text_style((new Map([["data", label_f], ["id", "" + (id_f) + "_label"], ["component", (new Map([["size", size_f]]))], ["top", 5], ["center", true], ["color", color_f], ["edit", edition]]))));
    return btn;
  });
  
  $def(self, '$alter_lyric_event', function $$alter_lyric_event() {
    var self = this, lyrics = nil, counter = nil, current_position = nil;

    
    lyrics = self.$grab("lyric_viewer");
    counter = self.$grab("counter");
    current_position = counter.$timer()['$[]']("position");
    lyrics.$content()['$[]='](current_position, lyrics.$data());
    return lyrics.$blink($$('LyricsStyle').$colors()['$[]']("danger"));
  });
  
  $def(self, '$parse_song_lyrics', function $$parse_song_lyrics(song) {
    var self = this, song_lines = nil;

    
    song_lines = song.$split("\n");
    return $send(song_lines, 'each_with_index', [], function $$2(line_found, index){var self = $$2.$$s == null ? this : $$2.$$s, new_id = nil, line_support = nil;

      
      if (line_found == null) line_found = nil;
      if (index == null) index = nil;
      new_id = "a_lyrics_line_" + (index);
      line_support = self.$grab("importer_support").$box((new Map([["id", new_id], ["width", 399], ["height", 30], ["top", $rb_times(index, 33)], ["left", 3], ["color", $$('LyricsStyle').$colors()['$[]']("danger")], ["smooth", $$('LyricsStyle').$decorations()['$[]']("standard_smooth")]])));
      line_support.$text((new Map([["data", line_found], ["id", "" + (new_id) + "_text"], ["top", 1], ["left", 1], ["position", "absolute"], ["width", 399]])));
      return $send(line_support, 'touch', [true], function $$3(){var self = $$3.$$s == null ? this : $$3.$$s, lyrics = nil;

        
        lyrics = self.$grab("lyric_viewer");
        lyrics.$data(line_found);
        self.$alter_lyric_event();
        return self.$update_song_listing();}, {$$s: self});}, {$$s: self});
  });
  self.$audio((new Map([["id", "basic_audio"]])));
  self.$grab("toolbox_tool").$display("none");
  
  $def(self, '$init_lyrix', function $$init_lyrix(lyrics_content, song_path) {
    var self = this, lyr = nil, import_drag = nil;

    
    lyr = $$('Lyricist').$new();
    self.$element((new Map([["id", "the_lyricist"], ["data", lyr]])));
    lyr.$init_audio(song_path);
    lyr.$new_song(lyrics_content);
    import_drag = self.$grab("import_module");
    import_drag.$display("none");
    return lyr.$initialize_list_manager();
  });
  return self.$init_lyrix((new Map([[0, "hi"], [2594, "jeezs"], [8838, "from"], [231295, "hope"]])), "medias/audios/Alive.mp3");
});
